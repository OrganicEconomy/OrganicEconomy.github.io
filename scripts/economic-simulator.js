/*! For license information please see economic-simulator.js.LICENSE.txt */
var economicSimulator;(()=>{var e={44:(e,t,n)=>{const{CapitalistSimulation:i}=n(418),{OrganicSimulation:o}=n(307),{SimulationHandler:r}=n(818);e.exports={CapitalistSimulation:i,OrganicSimulation:o,SimulationHandler:r}},46:function(e,t,n){var i;i=function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=20)}([function(e,t){var i={};e.exports=i,function(){i._baseDelta=1e3/60,i._nextId=0,i._seed=0,i._nowStartTime=+new Date,i._warnedOnce={},i._decomp=null,i.extend=function(e,t){var n,o;"boolean"==typeof t?(n=2,o=t):(n=1,o=!0);for(var r=n;r<arguments.length;r++){var s=arguments[r];if(s)for(var a in s)o&&s[a]&&s[a].constructor===Object?e[a]&&e[a].constructor!==Object?e[a]=s[a]:(e[a]=e[a]||{},i.extend(e[a],o,s[a])):e[a]=s[a]}return e},i.clone=function(e,t){return i.extend({},t,e)},i.keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)t.push(n);return t},i.values=function(e){var t=[];if(Object.keys){for(var n=Object.keys(e),i=0;i<n.length;i++)t.push(e[n[i]]);return t}for(var o in e)t.push(e[o]);return t},i.get=function(e,t,n,i){t=t.split(".").slice(n,i);for(var o=0;o<t.length;o+=1)e=e[t[o]];return e},i.set=function(e,t,n,o,r){var s=t.split(".").slice(o,r);return i.get(e,t,0,-1)[s[s.length-1]]=n,n},i.shuffle=function(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(i.random()*(t+1)),o=e[t];e[t]=e[n],e[n]=o}return e},i.choose=function(e){return e[Math.floor(i.random()*e.length)]},i.isElement=function(e){return"undefined"!=typeof HTMLElement?e instanceof HTMLElement:!!(e&&e.nodeType&&e.nodeName)},i.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},i.isFunction=function(e){return"function"==typeof e},i.isPlainObject=function(e){return"object"==typeof e&&e.constructor===Object},i.isString=function(e){return"[object String]"===toString.call(e)},i.clamp=function(e,t,n){return e<t?t:e>n?n:e},i.sign=function(e){return e<0?-1:1},i.now=function(){if("undefined"!=typeof window&&window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return Date.now?Date.now():new Date-i._nowStartTime},i.random=function(t,n){return n=void 0!==n?n:1,(t=void 0!==t?t:0)+e()*(n-t)};var e=function(){return i._seed=(9301*i._seed+49297)%233280,i._seed/233280};i.colorToNumber=function(e){return 3==(e=e.replace("#","")).length&&(e=e.charAt(0)+e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)),parseInt(e,16)},i.logLevel=1,i.log=function(){console&&i.logLevel>0&&i.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.info=function(){console&&i.logLevel>0&&i.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.warn=function(){console&&i.logLevel>0&&i.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.warnOnce=function(){var e=Array.prototype.slice.call(arguments).join(" ");i._warnedOnce[e]||(i.warn(e),i._warnedOnce[e]=!0)},i.deprecated=function(e,t,n){e[t]=i.chain((function(){i.warnOnce("🔅 deprecated 🔅",n)}),e[t])},i.nextId=function(){return i._nextId++},i.indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;n++)if(e[n]===t)return n;return-1},i.map=function(e,t){if(e.map)return e.map(t);for(var n=[],i=0;i<e.length;i+=1)n.push(t(e[i]));return n},i.topologicalSort=function(e){var t=[],n=[],o=[];for(var r in e)n[r]||o[r]||i._topologicalSort(r,n,o,e,t);return t},i._topologicalSort=function(e,t,n,o,r){var s=o[e]||[];n[e]=!0;for(var a=0;a<s.length;a+=1){var l=s[a];n[l]||t[l]||i._topologicalSort(l,t,n,o,r)}n[e]=!1,t[e]=!0,r.push(e)},i.chain=function(){for(var e=[],t=0;t<arguments.length;t+=1){var n=arguments[t];n._chained?e.push.apply(e,n._chained):e.push(n)}var i=function(){for(var t,n=new Array(arguments.length),i=0,o=arguments.length;i<o;i++)n[i]=arguments[i];for(i=0;i<e.length;i+=1){var r=e[i].apply(t,n);void 0!==r&&(t=r)}return t};return i._chained=e,i},i.chainPathBefore=function(e,t,n){return i.set(e,t,i.chain(n,i.get(e,t)))},i.chainPathAfter=function(e,t,n){return i.set(e,t,i.chain(i.get(e,t),n))},i.setDecomp=function(e){i._decomp=e},i.getDecomp=function(){var e=i._decomp;try{e||"undefined"==typeof window||(e=window.decomp),e||void 0===n.g||(e=n.g.decomp)}catch(t){e=null}return e}}()},function(e,t){var n={};e.exports=n,n.create=function(e){var t={min:{x:0,y:0},max:{x:0,y:0}};return e&&n.update(t,e),t},n.update=function(e,t,n){e.min.x=1/0,e.max.x=-1/0,e.min.y=1/0,e.max.y=-1/0;for(var i=0;i<t.length;i++){var o=t[i];o.x>e.max.x&&(e.max.x=o.x),o.x<e.min.x&&(e.min.x=o.x),o.y>e.max.y&&(e.max.y=o.y),o.y<e.min.y&&(e.min.y=o.y)}n&&(n.x>0?e.max.x+=n.x:e.min.x+=n.x,n.y>0?e.max.y+=n.y:e.min.y+=n.y)},n.contains=function(e,t){return t.x>=e.min.x&&t.x<=e.max.x&&t.y>=e.min.y&&t.y<=e.max.y},n.overlaps=function(e,t){return e.min.x<=t.max.x&&e.max.x>=t.min.x&&e.max.y>=t.min.y&&e.min.y<=t.max.y},n.translate=function(e,t){e.min.x+=t.x,e.max.x+=t.x,e.min.y+=t.y,e.max.y+=t.y},n.shift=function(e,t){var n=e.max.x-e.min.x,i=e.max.y-e.min.y;e.min.x=t.x,e.max.x=t.x+n,e.min.y=t.y,e.max.y=t.y+i}},function(e,t){var n={};e.exports=n,n.create=function(e,t){return{x:e||0,y:t||0}},n.clone=function(e){return{x:e.x,y:e.y}},n.magnitude=function(e){return Math.sqrt(e.x*e.x+e.y*e.y)},n.magnitudeSquared=function(e){return e.x*e.x+e.y*e.y},n.rotate=function(e,t,n){var i=Math.cos(t),o=Math.sin(t);n||(n={});var r=e.x*i-e.y*o;return n.y=e.x*o+e.y*i,n.x=r,n},n.rotateAbout=function(e,t,n,i){var o=Math.cos(t),r=Math.sin(t);i||(i={});var s=n.x+((e.x-n.x)*o-(e.y-n.y)*r);return i.y=n.y+((e.x-n.x)*r+(e.y-n.y)*o),i.x=s,i},n.normalise=function(e){var t=n.magnitude(e);return 0===t?{x:0,y:0}:{x:e.x/t,y:e.y/t}},n.dot=function(e,t){return e.x*t.x+e.y*t.y},n.cross=function(e,t){return e.x*t.y-e.y*t.x},n.cross3=function(e,t,n){return(t.x-e.x)*(n.y-e.y)-(t.y-e.y)*(n.x-e.x)},n.add=function(e,t,n){return n||(n={}),n.x=e.x+t.x,n.y=e.y+t.y,n},n.sub=function(e,t,n){return n||(n={}),n.x=e.x-t.x,n.y=e.y-t.y,n},n.mult=function(e,t){return{x:e.x*t,y:e.y*t}},n.div=function(e,t){return{x:e.x/t,y:e.y/t}},n.perp=function(e,t){return{x:(t=!0===t?-1:1)*-e.y,y:t*e.x}},n.neg=function(e){return{x:-e.x,y:-e.y}},n.angle=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},n._temp=[n.create(),n.create(),n.create(),n.create(),n.create(),n.create()]},function(e,t,n){var i={};e.exports=i;var o=n(2),r=n(0);i.create=function(e,t){for(var n=[],i=0;i<e.length;i++){var o=e[i],r={x:o.x,y:o.y,index:i,body:t,isInternal:!1};n.push(r)}return n},i.fromPath=function(e,t){var n=[];return e.replace(/L?\s*([-\d.e]+)[\s,]*([-\d.e]+)*/gi,(function(e,t,i){n.push({x:parseFloat(t),y:parseFloat(i)})})),i.create(n,t)},i.centre=function(e){for(var t,n,r,s=i.area(e,!0),a={x:0,y:0},l=0;l<e.length;l++)r=(l+1)%e.length,t=o.cross(e[l],e[r]),n=o.mult(o.add(e[l],e[r]),t),a=o.add(a,n);return o.div(a,6*s)},i.mean=function(e){for(var t={x:0,y:0},n=0;n<e.length;n++)t.x+=e[n].x,t.y+=e[n].y;return o.div(t,e.length)},i.area=function(e,t){for(var n=0,i=e.length-1,o=0;o<e.length;o++)n+=(e[i].x-e[o].x)*(e[i].y+e[o].y),i=o;return t?n/2:Math.abs(n)/2},i.inertia=function(e,t){for(var n,i,r=0,s=0,a=e,l=0;l<a.length;l++)i=(l+1)%a.length,r+=(n=Math.abs(o.cross(a[i],a[l])))*(o.dot(a[i],a[i])+o.dot(a[i],a[l])+o.dot(a[l],a[l])),s+=n;return t/6*(r/s)},i.translate=function(e,t,n){n=void 0!==n?n:1;var i,o=e.length,r=t.x*n,s=t.y*n;for(i=0;i<o;i++)e[i].x+=r,e[i].y+=s;return e},i.rotate=function(e,t,n){if(0!==t){var i,o,r,s,a=Math.cos(t),l=Math.sin(t),c=n.x,u=n.y,p=e.length;for(s=0;s<p;s++)o=(i=e[s]).x-c,r=i.y-u,i.x=c+(o*a-r*l),i.y=u+(o*l+r*a);return e}},i.contains=function(e,t){for(var n,i=t.x,o=t.y,r=e.length,s=e[r-1],a=0;a<r;a++){if(n=e[a],(i-s.x)*(n.y-s.y)+(o-s.y)*(s.x-n.x)>0)return!1;s=n}return!0},i.scale=function(e,t,n,r){if(1===t&&1===n)return e;var s,a;r=r||i.centre(e);for(var l=0;l<e.length;l++)s=e[l],a=o.sub(s,r),e[l].x=r.x+a.x*t,e[l].y=r.y+a.y*n;return e},i.chamfer=function(e,t,n,i,s){t="number"==typeof t?[t]:t||[8],n=void 0!==n?n:-1,i=i||2,s=s||14;for(var a=[],l=0;l<e.length;l++){var c=e[l-1>=0?l-1:e.length-1],u=e[l],p=e[(l+1)%e.length],d=t[l<t.length?l:t.length-1];if(0!==d){var f=o.normalise({x:u.y-c.y,y:c.x-u.x}),m=o.normalise({x:p.y-u.y,y:u.x-p.x}),h=Math.sqrt(2*Math.pow(d,2)),v=o.mult(r.clone(f),d),y=o.normalise(o.mult(o.add(f,m),.5)),g=o.sub(u,o.mult(y,h)),x=n;-1===n&&(x=1.75*Math.pow(d,.32)),(x=r.clamp(x,i,s))%2==1&&(x+=1);for(var b=Math.acos(o.dot(f,m))/x,S=0;S<x;S++)a.push(o.add(o.rotate(v,b*S),g))}else a.push(u)}return a},i.clockwiseSort=function(e){var t=i.mean(e);return e.sort((function(e,n){return o.angle(t,e)-o.angle(t,n)})),e},i.isConvex=function(e){var t,n,i,o,r=0,s=e.length;if(s<3)return null;for(t=0;t<s;t++)if(i=(t+2)%s,o=(e[n=(t+1)%s].x-e[t].x)*(e[i].y-e[n].y),(o-=(e[n].y-e[t].y)*(e[i].x-e[n].x))<0?r|=1:o>0&&(r|=2),3===r)return!1;return 0!==r||null},i.hull=function(e){var t,n,i=[],r=[];for((e=e.slice(0)).sort((function(e,t){var n=e.x-t.x;return 0!==n?n:e.y-t.y})),n=0;n<e.length;n+=1){for(t=e[n];r.length>=2&&o.cross3(r[r.length-2],r[r.length-1],t)<=0;)r.pop();r.push(t)}for(n=e.length-1;n>=0;n-=1){for(t=e[n];i.length>=2&&o.cross3(i[i.length-2],i[i.length-1],t)<=0;)i.pop();i.push(t)}return i.pop(),r.pop(),i.concat(r)}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(2),s=n(7),a=n(0),l=n(1),c=n(11);!function(){i._timeCorrection=!0,i._inertiaScale=4,i._nextCollidingGroupId=1,i._nextNonCollidingGroupId=-1,i._nextCategory=1,i._baseDelta=1e3/60,i.create=function(t){var n={id:a.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:o.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,strokeStyle:null,fillStyle:null,lineWidth:null,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0}},events:null,bounds:null,chamfer:null,circleRadius:0,positionPrev:null,anglePrev:0,parent:null,axes:null,area:0,mass:0,inertia:0,deltaTime:1e3/60,_original:null},i=a.extend(n,t);return e(i,t),i},i.nextGroup=function(e){return e?i._nextNonCollidingGroupId--:i._nextCollidingGroupId++},i.nextCategory=function(){return i._nextCategory=i._nextCategory<<1,i._nextCategory};var e=function(e,t){t=t||{},i.set(e,{bounds:e.bounds||l.create(e.vertices),positionPrev:e.positionPrev||r.clone(e.position),anglePrev:e.anglePrev||e.angle,vertices:e.vertices,parts:e.parts||[e],isStatic:e.isStatic,isSleeping:e.isSleeping,parent:e.parent||e}),o.rotate(e.vertices,e.angle,e.position),c.rotate(e.axes,e.angle),l.update(e.bounds,e.vertices,e.velocity),i.set(e,{axes:t.axes||e.axes,area:t.area||e.area,mass:t.mass||e.mass,inertia:t.inertia||e.inertia});var n=e.isStatic?"#14151f":a.choose(["#f19648","#f5d259","#f55a3c","#063e7b","#ececd1"]),s=e.isStatic?"#555":"#ccc",u=e.isStatic&&null===e.render.fillStyle?1:0;e.render.fillStyle=e.render.fillStyle||n,e.render.strokeStyle=e.render.strokeStyle||s,e.render.lineWidth=e.render.lineWidth||u,e.render.sprite.xOffset+=-(e.bounds.min.x-e.position.x)/(e.bounds.max.x-e.bounds.min.x),e.render.sprite.yOffset+=-(e.bounds.min.y-e.position.y)/(e.bounds.max.y-e.bounds.min.y)};i.set=function(e,t,n){var o;for(o in"string"==typeof t&&(o=t,(t={})[o]=n),t)if(Object.prototype.hasOwnProperty.call(t,o))switch(n=t[o],o){case"isStatic":i.setStatic(e,n);break;case"isSleeping":s.set(e,n);break;case"mass":i.setMass(e,n);break;case"density":i.setDensity(e,n);break;case"inertia":i.setInertia(e,n);break;case"vertices":i.setVertices(e,n);break;case"position":i.setPosition(e,n);break;case"angle":i.setAngle(e,n);break;case"velocity":i.setVelocity(e,n);break;case"angularVelocity":i.setAngularVelocity(e,n);break;case"speed":i.setSpeed(e,n);break;case"angularSpeed":i.setAngularSpeed(e,n);break;case"parts":i.setParts(e,n);break;case"centre":i.setCentre(e,n);break;default:e[o]=n}},i.setStatic=function(e,t){for(var n=0;n<e.parts.length;n++){var i=e.parts[n];t?(i.isStatic||(i._original={restitution:i.restitution,friction:i.friction,mass:i.mass,inertia:i.inertia,density:i.density,inverseMass:i.inverseMass,inverseInertia:i.inverseInertia}),i.restitution=0,i.friction=1,i.mass=i.inertia=i.density=1/0,i.inverseMass=i.inverseInertia=0,i.positionPrev.x=i.position.x,i.positionPrev.y=i.position.y,i.anglePrev=i.angle,i.angularVelocity=0,i.speed=0,i.angularSpeed=0,i.motion=0):i._original&&(i.restitution=i._original.restitution,i.friction=i._original.friction,i.mass=i._original.mass,i.inertia=i._original.inertia,i.density=i._original.density,i.inverseMass=i._original.inverseMass,i.inverseInertia=i._original.inverseInertia,i._original=null),i.isStatic=t}},i.setMass=function(e,t){var n=e.inertia/(e.mass/6);e.inertia=n*(t/6),e.inverseInertia=1/e.inertia,e.mass=t,e.inverseMass=1/e.mass,e.density=e.mass/e.area},i.setDensity=function(e,t){i.setMass(e,t*e.area),e.density=t},i.setInertia=function(e,t){e.inertia=t,e.inverseInertia=1/e.inertia},i.setVertices=function(e,t){t[0].body===e?e.vertices=t:e.vertices=o.create(t,e),e.axes=c.fromVertices(e.vertices),e.area=o.area(e.vertices),i.setMass(e,e.density*e.area);var n=o.centre(e.vertices);o.translate(e.vertices,n,-1),i.setInertia(e,i._inertiaScale*o.inertia(e.vertices,e.mass)),o.translate(e.vertices,e.position),l.update(e.bounds,e.vertices,e.velocity)},i.setParts=function(e,t,n){var r;for(t=t.slice(0),e.parts.length=0,e.parts.push(e),e.parent=e,r=0;r<t.length;r++){var s=t[r];s!==e&&(s.parent=e,e.parts.push(s))}if(1!==e.parts.length){if(n=void 0===n||n){var a=[];for(r=0;r<t.length;r++)a=a.concat(t[r].vertices);o.clockwiseSort(a);var l=o.hull(a),c=o.centre(l);i.setVertices(e,l),o.translate(e.vertices,c)}var u=i._totalProperties(e);e.area=u.area,e.parent=e,e.position.x=u.centre.x,e.position.y=u.centre.y,e.positionPrev.x=u.centre.x,e.positionPrev.y=u.centre.y,i.setMass(e,u.mass),i.setInertia(e,u.inertia),i.setPosition(e,u.centre)}},i.setCentre=function(e,t,n){n?(e.positionPrev.x+=t.x,e.positionPrev.y+=t.y,e.position.x+=t.x,e.position.y+=t.y):(e.positionPrev.x=t.x-(e.position.x-e.positionPrev.x),e.positionPrev.y=t.y-(e.position.y-e.positionPrev.y),e.position.x=t.x,e.position.y=t.y)},i.setPosition=function(e,t,n){var i=r.sub(t,e.position);n?(e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.velocity.x=i.x,e.velocity.y=i.y,e.speed=r.magnitude(i)):(e.positionPrev.x+=i.x,e.positionPrev.y+=i.y);for(var s=0;s<e.parts.length;s++){var a=e.parts[s];a.position.x+=i.x,a.position.y+=i.y,o.translate(a.vertices,i),l.update(a.bounds,a.vertices,e.velocity)}},i.setAngle=function(e,t,n){var i=t-e.angle;n?(e.anglePrev=e.angle,e.angularVelocity=i,e.angularSpeed=Math.abs(i)):e.anglePrev+=i;for(var s=0;s<e.parts.length;s++){var a=e.parts[s];a.angle+=i,o.rotate(a.vertices,i,e.position),c.rotate(a.axes,i),l.update(a.bounds,a.vertices,e.velocity),s>0&&r.rotateAbout(a.position,i,e.position,a.position)}},i.setVelocity=function(e,t){var n=e.deltaTime/i._baseDelta;e.positionPrev.x=e.position.x-t.x*n,e.positionPrev.y=e.position.y-t.y*n,e.velocity.x=(e.position.x-e.positionPrev.x)/n,e.velocity.y=(e.position.y-e.positionPrev.y)/n,e.speed=r.magnitude(e.velocity)},i.getVelocity=function(e){var t=i._baseDelta/e.deltaTime;return{x:(e.position.x-e.positionPrev.x)*t,y:(e.position.y-e.positionPrev.y)*t}},i.getSpeed=function(e){return r.magnitude(i.getVelocity(e))},i.setSpeed=function(e,t){i.setVelocity(e,r.mult(r.normalise(i.getVelocity(e)),t))},i.setAngularVelocity=function(e,t){var n=e.deltaTime/i._baseDelta;e.anglePrev=e.angle-t*n,e.angularVelocity=(e.angle-e.anglePrev)/n,e.angularSpeed=Math.abs(e.angularVelocity)},i.getAngularVelocity=function(e){return(e.angle-e.anglePrev)*i._baseDelta/e.deltaTime},i.getAngularSpeed=function(e){return Math.abs(i.getAngularVelocity(e))},i.setAngularSpeed=function(e,t){i.setAngularVelocity(e,a.sign(i.getAngularVelocity(e))*t)},i.translate=function(e,t,n){i.setPosition(e,r.add(e.position,t),n)},i.rotate=function(e,t,n,o){if(n){var r=Math.cos(t),s=Math.sin(t),a=e.position.x-n.x,l=e.position.y-n.y;i.setPosition(e,{x:n.x+(a*r-l*s),y:n.y+(a*s+l*r)},o),i.setAngle(e,e.angle+t,o)}else i.setAngle(e,e.angle+t,o)},i.scale=function(e,t,n,r){var s=0,a=0;r=r||e.position;for(var u=0;u<e.parts.length;u++){var p=e.parts[u];o.scale(p.vertices,t,n,r),p.axes=c.fromVertices(p.vertices),p.area=o.area(p.vertices),i.setMass(p,e.density*p.area),o.translate(p.vertices,{x:-p.position.x,y:-p.position.y}),i.setInertia(p,i._inertiaScale*o.inertia(p.vertices,p.mass)),o.translate(p.vertices,{x:p.position.x,y:p.position.y}),u>0&&(s+=p.area,a+=p.inertia),p.position.x=r.x+(p.position.x-r.x)*t,p.position.y=r.y+(p.position.y-r.y)*n,l.update(p.bounds,p.vertices,e.velocity)}e.parts.length>1&&(e.area=s,e.isStatic||(i.setMass(e,e.density*s),i.setInertia(e,a))),e.circleRadius&&(t===n?e.circleRadius*=t:e.circleRadius=null)},i.update=function(e,t){var n=(t=(void 0!==t?t:1e3/60)*e.timeScale)*t,s=i._timeCorrection?t/(e.deltaTime||t):1,u=1-e.frictionAir*(t/a._baseDelta),p=(e.position.x-e.positionPrev.x)*s,d=(e.position.y-e.positionPrev.y)*s;e.velocity.x=p*u+e.force.x/e.mass*n,e.velocity.y=d*u+e.force.y/e.mass*n,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.position.x+=e.velocity.x,e.position.y+=e.velocity.y,e.deltaTime=t,e.angularVelocity=(e.angle-e.anglePrev)*u*s+e.torque/e.inertia*n,e.anglePrev=e.angle,e.angle+=e.angularVelocity;for(var f=0;f<e.parts.length;f++){var m=e.parts[f];o.translate(m.vertices,e.velocity),f>0&&(m.position.x+=e.velocity.x,m.position.y+=e.velocity.y),0!==e.angularVelocity&&(o.rotate(m.vertices,e.angularVelocity,e.position),c.rotate(m.axes,e.angularVelocity),f>0&&r.rotateAbout(m.position,e.angularVelocity,e.position,m.position)),l.update(m.bounds,m.vertices,e.velocity)}},i.updateVelocities=function(e){var t=i._baseDelta/e.deltaTime,n=e.velocity;n.x=(e.position.x-e.positionPrev.x)*t,n.y=(e.position.y-e.positionPrev.y)*t,e.speed=Math.sqrt(n.x*n.x+n.y*n.y),e.angularVelocity=(e.angle-e.anglePrev)*t,e.angularSpeed=Math.abs(e.angularVelocity)},i.applyForce=function(e,t,n){var i=t.x-e.position.x,o=t.y-e.position.y;e.force.x+=n.x,e.force.y+=n.y,e.torque+=i*n.y-o*n.x},i._totalProperties=function(e){for(var t={mass:0,area:0,inertia:0,centre:{x:0,y:0}},n=1===e.parts.length?0:1;n<e.parts.length;n++){var i=e.parts[n],o=i.mass!==1/0?i.mass:1;t.mass+=o,t.area+=i.area,t.inertia+=i.inertia,t.centre=r.add(t.centre,r.mult(i.position,o))}return t.centre=r.div(t.centre,t.mass),t}}()},function(e,t,n){var i={};e.exports=i;var o=n(0);i.on=function(e,t,n){for(var i,o=t.split(" "),r=0;r<o.length;r++)i=o[r],e.events=e.events||{},e.events[i]=e.events[i]||[],e.events[i].push(n);return n},i.off=function(e,t,n){if(t){"function"==typeof t&&(n=t,t=o.keys(e.events).join(" "));for(var i=t.split(" "),r=0;r<i.length;r++){var s=e.events[i[r]],a=[];if(n&&s)for(var l=0;l<s.length;l++)s[l]!==n&&a.push(s[l]);e.events[i[r]]=a}}else e.events={}},i.trigger=function(e,t,n){var i,r,s,a,l=e.events;if(l&&o.keys(l).length>0){n||(n={}),i=t.split(" ");for(var c=0;c<i.length;c++)if(s=l[r=i[c]]){(a=o.clone(n,!1)).name=r,a.source=e;for(var u=0;u<s.length;u++)s[u].apply(e,[a])}}}},function(e,t,n){var i={};e.exports=i;var o=n(5),r=n(0),s=n(1),a=n(4);i.create=function(e){return r.extend({id:r.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{},cache:{allBodies:null,allConstraints:null,allComposites:null}},e)},i.setModified=function(e,t,n,o){if(e.isModified=t,t&&e.cache&&(e.cache.allBodies=null,e.cache.allConstraints=null,e.cache.allComposites=null),n&&e.parent&&i.setModified(e.parent,t,n,o),o)for(var r=0;r<e.composites.length;r++){var s=e.composites[r];i.setModified(s,t,n,o)}},i.add=function(e,t){var n=[].concat(t);o.trigger(e,"beforeAdd",{object:t});for(var s=0;s<n.length;s++){var a=n[s];switch(a.type){case"body":if(a.parent!==a){r.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}i.addBody(e,a);break;case"constraint":i.addConstraint(e,a);break;case"composite":i.addComposite(e,a);break;case"mouseConstraint":i.addConstraint(e,a.constraint)}}return o.trigger(e,"afterAdd",{object:t}),e},i.remove=function(e,t,n){var r=[].concat(t);o.trigger(e,"beforeRemove",{object:t});for(var s=0;s<r.length;s++){var a=r[s];switch(a.type){case"body":i.removeBody(e,a,n);break;case"constraint":i.removeConstraint(e,a,n);break;case"composite":i.removeComposite(e,a,n);break;case"mouseConstraint":i.removeConstraint(e,a.constraint)}}return o.trigger(e,"afterRemove",{object:t}),e},i.addComposite=function(e,t){return e.composites.push(t),t.parent=e,i.setModified(e,!0,!0,!1),e},i.removeComposite=function(e,t,n){var o=r.indexOf(e.composites,t);if(-1!==o){var s=i.allBodies(t);i.removeCompositeAt(e,o);for(var a=0;a<s.length;a++)s[a].sleepCounter=0}if(n)for(a=0;a<e.composites.length;a++)i.removeComposite(e.composites[a],t,!0);return e},i.removeCompositeAt=function(e,t){return e.composites.splice(t,1),i.setModified(e,!0,!0,!1),e},i.addBody=function(e,t){return e.bodies.push(t),i.setModified(e,!0,!0,!1),e},i.removeBody=function(e,t,n){var o=r.indexOf(e.bodies,t);if(-1!==o&&(i.removeBodyAt(e,o),t.sleepCounter=0),n)for(var s=0;s<e.composites.length;s++)i.removeBody(e.composites[s],t,!0);return e},i.removeBodyAt=function(e,t){return e.bodies.splice(t,1),i.setModified(e,!0,!0,!1),e},i.addConstraint=function(e,t){return e.constraints.push(t),i.setModified(e,!0,!0,!1),e},i.removeConstraint=function(e,t,n){var o=r.indexOf(e.constraints,t);if(-1!==o&&i.removeConstraintAt(e,o),n)for(var s=0;s<e.composites.length;s++)i.removeConstraint(e.composites[s],t,!0);return e},i.removeConstraintAt=function(e,t){return e.constraints.splice(t,1),i.setModified(e,!0,!0,!1),e},i.clear=function(e,t,n){if(n)for(var o=0;o<e.composites.length;o++)i.clear(e.composites[o],t,!0);return t?e.bodies=e.bodies.filter((function(e){return e.isStatic})):e.bodies.length=0,e.constraints.length=0,e.composites.length=0,i.setModified(e,!0,!0,!1),e},i.allBodies=function(e){if(e.cache&&e.cache.allBodies)return e.cache.allBodies;for(var t=[].concat(e.bodies),n=0;n<e.composites.length;n++)t=t.concat(i.allBodies(e.composites[n]));return e.cache&&(e.cache.allBodies=t),t},i.allConstraints=function(e){if(e.cache&&e.cache.allConstraints)return e.cache.allConstraints;for(var t=[].concat(e.constraints),n=0;n<e.composites.length;n++)t=t.concat(i.allConstraints(e.composites[n]));return e.cache&&(e.cache.allConstraints=t),t},i.allComposites=function(e){if(e.cache&&e.cache.allComposites)return e.cache.allComposites;for(var t=[].concat(e.composites),n=0;n<e.composites.length;n++)t=t.concat(i.allComposites(e.composites[n]));return e.cache&&(e.cache.allComposites=t),t},i.get=function(e,t,n){var o,r;switch(n){case"body":o=i.allBodies(e);break;case"constraint":o=i.allConstraints(e);break;case"composite":o=i.allComposites(e).concat(e)}return o?0===(r=o.filter((function(e){return e.id.toString()===t.toString()}))).length?null:r[0]:null},i.move=function(e,t,n){return i.remove(e,t),i.add(n,t),e},i.rebase=function(e){for(var t=i.allBodies(e).concat(i.allConstraints(e)).concat(i.allComposites(e)),n=0;n<t.length;n++)t[n].id=r.nextId();return e},i.translate=function(e,t,n){for(var o=n?i.allBodies(e):e.bodies,r=0;r<o.length;r++)a.translate(o[r],t);return e},i.rotate=function(e,t,n,o){for(var r=Math.cos(t),s=Math.sin(t),l=o?i.allBodies(e):e.bodies,c=0;c<l.length;c++){var u=l[c],p=u.position.x-n.x,d=u.position.y-n.y;a.setPosition(u,{x:n.x+(p*r-d*s),y:n.y+(p*s+d*r)}),a.rotate(u,t)}return e},i.scale=function(e,t,n,o,r){for(var s=r?i.allBodies(e):e.bodies,l=0;l<s.length;l++){var c=s[l],u=c.position.x-o.x,p=c.position.y-o.y;a.setPosition(c,{x:o.x+u*t,y:o.y+p*n}),a.scale(c,t,n)}return e},i.bounds=function(e){for(var t=i.allBodies(e),n=[],o=0;o<t.length;o+=1){var r=t[o];n.push(r.bounds.min,r.bounds.max)}return s.create(n)}},function(e,t,n){var i={};e.exports=i;var o=n(4),r=n(5),s=n(0);i._motionWakeThreshold=.18,i._motionSleepThreshold=.08,i._minBias=.9,i.update=function(e,t){for(var n=t/s._baseDelta,r=i._motionSleepThreshold,a=0;a<e.length;a++){var l=e[a],c=o.getSpeed(l),u=o.getAngularSpeed(l),p=c*c+u*u;if(0===l.force.x&&0===l.force.y){var d=Math.min(l.motion,p),f=Math.max(l.motion,p);l.motion=i._minBias*d+(1-i._minBias)*f,l.sleepThreshold>0&&l.motion<r?(l.sleepCounter+=1,l.sleepCounter>=l.sleepThreshold/n&&i.set(l,!0)):l.sleepCounter>0&&(l.sleepCounter-=1)}else i.set(l,!1)}},i.afterCollisions=function(e){for(var t=i._motionSleepThreshold,n=0;n<e.length;n++){var o=e[n];if(o.isActive){var r=o.collision,s=r.bodyA.parent,a=r.bodyB.parent;if(!(s.isSleeping&&a.isSleeping||s.isStatic||a.isStatic)&&(s.isSleeping||a.isSleeping)){var l=s.isSleeping&&!s.isStatic?s:a,c=l===s?a:s;!l.isStatic&&c.motion>t&&i.set(l,!1)}}}},i.set=function(e,t){var n=e.isSleeping;t?(e.isSleeping=!0,e.sleepCounter=e.sleepThreshold,e.positionImpulse.x=0,e.positionImpulse.y=0,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.anglePrev=e.angle,e.speed=0,e.angularSpeed=0,e.motion=0,n||r.trigger(e,"sleepStart")):(e.isSleeping=!1,e.sleepCounter=0,n&&r.trigger(e,"sleepEnd"))}},function(e,t,n){var i={};e.exports=i;var o,r,s,a=n(3),l=n(9);o=[],r={overlap:0,axis:null},s={overlap:0,axis:null},i.create=function(e,t){return{pair:null,collided:!1,bodyA:e,bodyB:t,parentA:e.parent,parentB:t.parent,depth:0,normal:{x:0,y:0},tangent:{x:0,y:0},penetration:{x:0,y:0},supports:[null,null],supportCount:0}},i.collides=function(e,t,n){if(i._overlapAxes(r,e.vertices,t.vertices,e.axes),r.overlap<=0)return null;if(i._overlapAxes(s,t.vertices,e.vertices,t.axes),s.overlap<=0)return null;var o,c,u=n&&n.table[l.id(e,t)];u?o=u.collision:((o=i.create(e,t)).collided=!0,o.bodyA=e.id<t.id?e:t,o.bodyB=e.id<t.id?t:e,o.parentA=o.bodyA.parent,o.parentB=o.bodyB.parent),e=o.bodyA,t=o.bodyB,c=r.overlap<s.overlap?r:s;var p=o.normal,d=o.tangent,f=o.penetration,m=o.supports,h=c.overlap,v=c.axis,y=v.x,g=v.y;y*(t.position.x-e.position.x)+g*(t.position.y-e.position.y)>=0&&(y=-y,g=-g),p.x=y,p.y=g,d.x=-g,d.y=y,f.x=y*h,f.y=g*h,o.depth=h;var x=i._findSupports(e,t,p,1),b=0;if(a.contains(e.vertices,x[0])&&(m[b++]=x[0]),a.contains(e.vertices,x[1])&&(m[b++]=x[1]),b<2){var S=i._findSupports(t,e,p,-1);a.contains(t.vertices,S[0])&&(m[b++]=S[0]),b<2&&a.contains(t.vertices,S[1])&&(m[b++]=S[1])}return 0===b&&(m[b++]=x[0]),o.supportCount=b,o},i._overlapAxes=function(e,t,n,i){var o,r,s,a,l,c,u=t.length,p=n.length,d=t[0].x,f=t[0].y,m=n[0].x,h=n[0].y,v=i.length,y=Number.MAX_VALUE,g=0;for(l=0;l<v;l++){var x=i[l],b=x.x,S=x.y,w=d*b+f*S,A=m*b+h*S,P=w,C=A;for(c=1;c<u;c+=1)(a=t[c].x*b+t[c].y*S)>P?P=a:a<w&&(w=a);for(c=1;c<p;c+=1)(a=n[c].x*b+n[c].y*S)>C?C=a:a<A&&(A=a);if((o=(r=P-A)<(s=C-w)?r:s)<y&&(y=o,g=l,o<=0))break}e.axis=i[g],e.overlap=y},i._findSupports=function(e,t,n,i){var r,s,a,l=t.vertices,c=l.length,u=e.position.x,p=e.position.y,d=n.x*i,f=n.y*i,m=l[0],h=m,v=d*(u-h.x)+f*(p-h.y);for(a=1;a<c;a+=1)(s=d*(u-(h=l[a]).x)+f*(p-h.y))<v&&(v=s,m=h);return v=d*(u-(r=l[(c+m.index-1)%c]).x)+f*(p-r.y),d*(u-(h=l[(m.index+1)%c]).x)+f*(p-h.y)<v?(o[0]=m,o[1]=h,o):(o[0]=m,o[1]=r,o)}},function(e,t,n){var i={};e.exports=i;var o=n(16);i.create=function(e,t){var n=e.bodyA,r=e.bodyB,s={id:i.id(n,r),bodyA:n,bodyB:r,collision:e,contacts:[o.create(),o.create()],contactCount:0,separation:0,isActive:!0,isSensor:n.isSensor||r.isSensor,timeCreated:t,timeUpdated:t,inverseMass:0,friction:0,frictionStatic:0,restitution:0,slop:0};return i.update(s,e,t),s},i.update=function(e,t,n){var i=t.supports,o=t.supportCount,r=e.contacts,s=t.parentA,a=t.parentB;e.isActive=!0,e.timeUpdated=n,e.collision=t,e.separation=t.depth,e.inverseMass=s.inverseMass+a.inverseMass,e.friction=s.friction<a.friction?s.friction:a.friction,e.frictionStatic=s.frictionStatic>a.frictionStatic?s.frictionStatic:a.frictionStatic,e.restitution=s.restitution>a.restitution?s.restitution:a.restitution,e.slop=s.slop>a.slop?s.slop:a.slop,e.contactCount=o,t.pair=e;var l=i[0],c=r[0],u=i[1],p=r[1];p.vertex!==l&&c.vertex!==u||(r[1]=c,r[0]=c=p,p=r[1]),c.vertex=l,p.vertex=u},i.setActive=function(e,t,n){t?(e.isActive=!0,e.timeUpdated=n):(e.isActive=!1,e.contactCount=0)},i.id=function(e,t){return e.id<t.id?e.id.toString(36)+":"+t.id.toString(36):t.id.toString(36)+":"+e.id.toString(36)}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(2),s=n(7),a=n(1),l=n(11),c=n(0);i._warming=.4,i._torqueDampen=1,i._minLength=1e-6,i.create=function(e){var t=e;t.bodyA&&!t.pointA&&(t.pointA={x:0,y:0}),t.bodyB&&!t.pointB&&(t.pointB={x:0,y:0});var n=t.bodyA?r.add(t.bodyA.position,t.pointA):t.pointA,i=t.bodyB?r.add(t.bodyB.position,t.pointB):t.pointB,o=r.magnitude(r.sub(n,i));t.length=void 0!==t.length?t.length:o,t.id=t.id||c.nextId(),t.label=t.label||"Constraint",t.type="constraint",t.stiffness=t.stiffness||(t.length>0?1:.7),t.damping=t.damping||0,t.angularStiffness=t.angularStiffness||0,t.angleA=t.bodyA?t.bodyA.angle:t.angleA,t.angleB=t.bodyB?t.bodyB.angle:t.angleB,t.plugin={};var s={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===t.length&&t.stiffness>.1?(s.type="pin",s.anchors=!1):t.stiffness<.9&&(s.type="spring"),t.render=c.extend(s,t.render),t},i.preSolveAll=function(e){for(var t=0;t<e.length;t+=1){var n=e[t],i=n.constraintImpulse;n.isStatic||0===i.x&&0===i.y&&0===i.angle||(n.position.x+=i.x,n.position.y+=i.y,n.angle+=i.angle)}},i.solveAll=function(e,t){for(var n=c.clamp(t/c._baseDelta,0,1),o=0;o<e.length;o+=1){var r=e[o],s=!r.bodyA||r.bodyA&&r.bodyA.isStatic,a=!r.bodyB||r.bodyB&&r.bodyB.isStatic;(s||a)&&i.solve(e[o],n)}for(o=0;o<e.length;o+=1)s=!(r=e[o]).bodyA||r.bodyA&&r.bodyA.isStatic,a=!r.bodyB||r.bodyB&&r.bodyB.isStatic,s||a||i.solve(e[o],n)},i.solve=function(e,t){var n=e.bodyA,o=e.bodyB,s=e.pointA,a=e.pointB;if(n||o){n&&!n.isStatic&&(r.rotate(s,n.angle-e.angleA,s),e.angleA=n.angle),o&&!o.isStatic&&(r.rotate(a,o.angle-e.angleB,a),e.angleB=o.angle);var l=s,c=a;if(n&&(l=r.add(n.position,s)),o&&(c=r.add(o.position,a)),l&&c){var u=r.sub(l,c),p=r.magnitude(u);p<i._minLength&&(p=i._minLength);var d,f,m,h,v,y=(p-e.length)/p,g=e.stiffness>=1||0===e.length?e.stiffness*t:e.stiffness*t*t,x=e.damping*t,b=r.mult(u,y*g),S=(n?n.inverseMass:0)+(o?o.inverseMass:0),w=S+((n?n.inverseInertia:0)+(o?o.inverseInertia:0));if(x>0){var A=r.create();m=r.div(u,p),v=r.sub(o&&r.sub(o.position,o.positionPrev)||A,n&&r.sub(n.position,n.positionPrev)||A),h=r.dot(m,v)}n&&!n.isStatic&&(f=n.inverseMass/S,n.constraintImpulse.x-=b.x*f,n.constraintImpulse.y-=b.y*f,n.position.x-=b.x*f,n.position.y-=b.y*f,x>0&&(n.positionPrev.x-=x*m.x*h*f,n.positionPrev.y-=x*m.y*h*f),d=r.cross(s,b)/w*i._torqueDampen*n.inverseInertia*(1-e.angularStiffness),n.constraintImpulse.angle-=d,n.angle-=d),o&&!o.isStatic&&(f=o.inverseMass/S,o.constraintImpulse.x+=b.x*f,o.constraintImpulse.y+=b.y*f,o.position.x+=b.x*f,o.position.y+=b.y*f,x>0&&(o.positionPrev.x+=x*m.x*h*f,o.positionPrev.y+=x*m.y*h*f),d=r.cross(a,b)/w*i._torqueDampen*o.inverseInertia*(1-e.angularStiffness),o.constraintImpulse.angle+=d,o.angle+=d)}}},i.postSolveAll=function(e){for(var t=0;t<e.length;t++){var n=e[t],c=n.constraintImpulse;if(!(n.isStatic||0===c.x&&0===c.y&&0===c.angle)){s.set(n,!1);for(var u=0;u<n.parts.length;u++){var p=n.parts[u];o.translate(p.vertices,c),u>0&&(p.position.x+=c.x,p.position.y+=c.y),0!==c.angle&&(o.rotate(p.vertices,c.angle,n.position),l.rotate(p.axes,c.angle),u>0&&r.rotateAbout(p.position,c.angle,n.position,p.position)),a.update(p.bounds,p.vertices,n.velocity)}c.angle*=i._warming,c.x*=i._warming,c.y*=i._warming}}},i.pointAWorld=function(e){return{x:(e.bodyA?e.bodyA.position.x:0)+(e.pointA?e.pointA.x:0),y:(e.bodyA?e.bodyA.position.y:0)+(e.pointA?e.pointA.y:0)}},i.pointBWorld=function(e){return{x:(e.bodyB?e.bodyB.position.x:0)+(e.pointB?e.pointB.x:0),y:(e.bodyB?e.bodyB.position.y:0)+(e.pointB?e.pointB.y:0)}},i.currentLength=function(e){var t=(e.bodyA?e.bodyA.position.x:0)+(e.pointA?e.pointA.x:0),n=(e.bodyA?e.bodyA.position.y:0)+(e.pointA?e.pointA.y:0),i=t-((e.bodyB?e.bodyB.position.x:0)+(e.pointB?e.pointB.x:0)),o=n-((e.bodyB?e.bodyB.position.y:0)+(e.pointB?e.pointB.y:0));return Math.sqrt(i*i+o*o)}},function(e,t,n){var i={};e.exports=i;var o=n(2),r=n(0);i.fromVertices=function(e){for(var t={},n=0;n<e.length;n++){var i=(n+1)%e.length,s=o.normalise({x:e[i].y-e[n].y,y:e[n].x-e[i].x}),a=0===s.y?1/0:s.x/s.y;t[a=a.toFixed(3).toString()]=s}return r.values(t)},i.rotate=function(e,t){if(0!==t)for(var n=Math.cos(t),i=Math.sin(t),o=0;o<e.length;o++){var r,s=e[o];r=s.x*n-s.y*i,s.y=s.x*i+s.y*n,s.x=r}}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(0),s=n(4),a=n(1),l=n(2);i.rectangle=function(e,t,n,i,a){a=a||{};var l={label:"Rectangle Body",position:{x:e,y:t},vertices:o.fromPath("L 0 0 L "+n+" 0 L "+n+" "+i+" L 0 "+i)};if(a.chamfer){var c=a.chamfer;l.vertices=o.chamfer(l.vertices,c.radius,c.quality,c.qualityMin,c.qualityMax),delete a.chamfer}return s.create(r.extend({},l,a))},i.trapezoid=function(e,t,n,i,a,l){l=l||{},a>=1&&r.warn("Bodies.trapezoid: slope parameter must be < 1.");var c,u=n*(a*=.5),p=u+(1-2*a)*n,d=p+u;c=a<.5?"L 0 0 L "+u+" "+-i+" L "+p+" "+-i+" L "+d+" 0":"L 0 0 L "+p+" "+-i+" L "+d+" 0";var f={label:"Trapezoid Body",position:{x:e,y:t},vertices:o.fromPath(c)};if(l.chamfer){var m=l.chamfer;f.vertices=o.chamfer(f.vertices,m.radius,m.quality,m.qualityMin,m.qualityMax),delete l.chamfer}return s.create(r.extend({},f,l))},i.circle=function(e,t,n,o,s){o=o||{};var a={label:"Circle Body",circleRadius:n};s=s||25;var l=Math.ceil(Math.max(10,Math.min(s,n)));return l%2==1&&(l+=1),i.polygon(e,t,l,n,r.extend({},a,o))},i.polygon=function(e,t,n,a,l){if(l=l||{},n<3)return i.circle(e,t,a,l);for(var c=2*Math.PI/n,u="",p=.5*c,d=0;d<n;d+=1){var f=p+d*c,m=Math.cos(f)*a,h=Math.sin(f)*a;u+="L "+m.toFixed(3)+" "+h.toFixed(3)+" "}var v={label:"Polygon Body",position:{x:e,y:t},vertices:o.fromPath(u)};if(l.chamfer){var y=l.chamfer;v.vertices=o.chamfer(v.vertices,y.radius,y.quality,y.qualityMin,y.qualityMax),delete l.chamfer}return s.create(r.extend({},v,l))},i.fromVertices=function(e,t,n,i,c,u,p,d){var f,m,h,v,y,g,x,b,S,w,A=r.getDecomp();for(f=Boolean(A&&A.quickDecomp),i=i||{},h=[],c=void 0!==c&&c,u=void 0!==u?u:.01,p=void 0!==p?p:10,d=void 0!==d?d:.01,r.isArray(n[0])||(n=[n]),S=0;S<n.length;S+=1)if(y=n[S],!(v=o.isConvex(y))&&!f&&r.warnOnce("Bodies.fromVertices: Install the 'poly-decomp' library and use Common.setDecomp or provide 'decomp' as a global to decompose concave vertices."),v||!f)y=v?o.clockwiseSort(y):o.hull(y),h.push({position:{x:e,y:t},vertices:y});else{var P=y.map((function(e){return[e.x,e.y]}));A.makeCCW(P),!1!==u&&A.removeCollinearPoints(P,u),!1!==d&&A.removeDuplicatePoints&&A.removeDuplicatePoints(P,d);var C=A.quickDecomp(P);for(g=0;g<C.length;g++){var B=C[g].map((function(e){return{x:e[0],y:e[1]}}));p>0&&o.area(B)<p||h.push({position:o.centre(B),vertices:B})}}for(g=0;g<h.length;g++)h[g]=s.create(r.extend(h[g],i));if(c)for(g=0;g<h.length;g++){var M=h[g];for(x=g+1;x<h.length;x++){var k=h[x];if(a.overlaps(M.bounds,k.bounds)){var _=M.vertices,I=k.vertices;for(b=0;b<M.vertices.length;b++)for(w=0;w<k.vertices.length;w++){var T=l.magnitudeSquared(l.sub(_[(b+1)%_.length],I[w])),R=l.magnitudeSquared(l.sub(_[b],I[(w+1)%I.length]));T<5&&R<5&&(_[b].isInternal=!0,I[w].isInternal=!0)}}}}return h.length>1?(m=s.create(r.extend({parts:h.slice(0)},i)),s.setPosition(m,{x:e,y:t}),m):h[0]}},function(e,t,n){var i={};e.exports=i;var o=n(0),r=n(8);i.create=function(e){return o.extend({bodies:[],collisions:[],pairs:null},e)},i.setBodies=function(e,t){e.bodies=t.slice(0)},i.clear=function(e){e.bodies=[],e.collisions=[]},i.collisions=function(e){var t,n,o=e.pairs,s=e.bodies,a=s.length,l=i.canCollide,c=r.collides,u=e.collisions,p=0;for(s.sort(i._compareBoundsX),t=0;t<a;t++){var d=s[t],f=d.bounds,m=d.bounds.max.x,h=d.bounds.max.y,v=d.bounds.min.y,y=d.isStatic||d.isSleeping,g=d.parts.length,x=1===g;for(n=t+1;n<a;n++){var b=s[n];if((k=b.bounds).min.x>m)break;if(!(h<k.min.y||v>k.max.y)&&(!y||!b.isStatic&&!b.isSleeping)&&l(d.collisionFilter,b.collisionFilter)){var S=b.parts.length;if(x&&1===S)(B=c(d,b,o))&&(u[p++]=B);else for(var w=S>1?1:0,A=g>1?1:0;A<g;A++)for(var P=d.parts[A],C=(f=P.bounds,w);C<S;C++){var B,M=b.parts[C],k=M.bounds;f.min.x>k.max.x||f.max.x<k.min.x||f.max.y<k.min.y||f.min.y>k.max.y||(B=c(P,M,o))&&(u[p++]=B)}}}}return u.length!==p&&(u.length=p),u},i.canCollide=function(e,t){return e.group===t.group&&0!==e.group?e.group>0:!!(e.mask&t.category)&&!!(t.mask&e.category)},i._compareBoundsX=function(e,t){return e.bounds.min.x-t.bounds.min.x}},function(e,t,n){var i={};e.exports=i;var o=n(0);i.create=function(e){var t={};return e||o.log("Mouse.create: element was undefined, defaulting to document.body","warn"),t.element=e||document.body,t.absolute={x:0,y:0},t.position={x:0,y:0},t.mousedownPosition={x:0,y:0},t.mouseupPosition={x:0,y:0},t.offset={x:0,y:0},t.scale={x:1,y:1},t.wheelDelta=0,t.button=-1,t.pixelRatio=parseInt(t.element.getAttribute("data-pixel-ratio"),10)||1,t.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},t.mousemove=function(e){var n=i._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&(t.button=0,e.preventDefault()),t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.sourceEvents.mousemove=e},t.mousedown=function(e){var n=i._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches?(t.button=0,e.preventDefault()):t.button=e.button,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mousedownPosition.x=t.position.x,t.mousedownPosition.y=t.position.y,t.sourceEvents.mousedown=e},t.mouseup=function(e){var n=i._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&e.preventDefault(),t.button=-1,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mouseupPosition.x=t.position.x,t.mouseupPosition.y=t.position.y,t.sourceEvents.mouseup=e},t.mousewheel=function(e){t.wheelDelta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail)),e.preventDefault(),t.sourceEvents.mousewheel=e},i.setElement(t,t.element),t},i.setElement=function(e,t){e.element=t,t.addEventListener("mousemove",e.mousemove,{passive:!0}),t.addEventListener("mousedown",e.mousedown,{passive:!0}),t.addEventListener("mouseup",e.mouseup,{passive:!0}),t.addEventListener("wheel",e.mousewheel,{passive:!1}),t.addEventListener("touchmove",e.mousemove,{passive:!1}),t.addEventListener("touchstart",e.mousedown,{passive:!1}),t.addEventListener("touchend",e.mouseup,{passive:!1})},i.clearSourceEvents=function(e){e.sourceEvents.mousemove=null,e.sourceEvents.mousedown=null,e.sourceEvents.mouseup=null,e.sourceEvents.mousewheel=null,e.wheelDelta=0},i.setOffset=function(e,t){e.offset.x=t.x,e.offset.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},i.setScale=function(e,t){e.scale.x=t.x,e.scale.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},i._getRelativeMousePosition=function(e,t,n){var i,o,r=t.getBoundingClientRect(),s=document.documentElement||document.body.parentNode||document.body,a=void 0!==window.pageXOffset?window.pageXOffset:s.scrollLeft,l=void 0!==window.pageYOffset?window.pageYOffset:s.scrollTop,c=e.changedTouches;return c?(i=c[0].pageX-r.left-a,o=c[0].pageY-r.top-l):(i=e.pageX-r.left-a,o=e.pageY-r.top-l),{x:i/(t.clientWidth/(t.width||t.clientWidth)*n),y:o/(t.clientHeight/(t.height||t.clientHeight)*n)}}},function(e,t,n){var i={};e.exports=i;var o=n(0);i._registry={},i.register=function(e){if(i.isPlugin(e)||o.warn("Plugin.register:",i.toString(e),"does not implement all required fields."),e.name in i._registry){var t=i._registry[e.name],n=i.versionParse(e.version).number,r=i.versionParse(t.version).number;n>r?(o.warn("Plugin.register:",i.toString(t),"was upgraded to",i.toString(e)),i._registry[e.name]=e):n<r?o.warn("Plugin.register:",i.toString(t),"can not be downgraded to",i.toString(e)):e!==t&&o.warn("Plugin.register:",i.toString(e),"is already registered to different plugin object")}else i._registry[e.name]=e;return e},i.resolve=function(e){return i._registry[i.dependencyParse(e).name]},i.toString=function(e){return"string"==typeof e?e:(e.name||"anonymous")+"@"+(e.version||e.range||"0.0.0")},i.isPlugin=function(e){return e&&e.name&&e.version&&e.install},i.isUsed=function(e,t){return e.used.indexOf(t)>-1},i.isFor=function(e,t){var n=e.for&&i.dependencyParse(e.for);return!e.for||t.name===n.name&&i.versionSatisfies(t.version,n.range)},i.use=function(e,t){if(e.uses=(e.uses||[]).concat(t||[]),0!==e.uses.length){for(var n=i.dependencies(e),r=o.topologicalSort(n),s=[],a=0;a<r.length;a+=1)if(r[a]!==e.name){var l=i.resolve(r[a]);l?i.isUsed(e,l.name)||(i.isFor(l,e)||(o.warn("Plugin.use:",i.toString(l),"is for",l.for,"but installed on",i.toString(e)+"."),l._warned=!0),l.install?l.install(e):(o.warn("Plugin.use:",i.toString(l),"does not specify an install function."),l._warned=!0),l._warned?(s.push("🔶 "+i.toString(l)),delete l._warned):s.push("✅ "+i.toString(l)),e.used.push(l.name)):s.push("❌ "+r[a])}s.length>0&&o.info(s.join("  "))}else o.warn("Plugin.use:",i.toString(e),"does not specify any dependencies to install.")},i.dependencies=function(e,t){var n=i.dependencyParse(e),r=n.name;if(!(r in(t=t||{}))){e=i.resolve(e)||e,t[r]=o.map(e.uses||[],(function(t){i.isPlugin(t)&&i.register(t);var r=i.dependencyParse(t),s=i.resolve(t);return s&&!i.versionSatisfies(s.version,r.range)?(o.warn("Plugin.dependencies:",i.toString(s),"does not satisfy",i.toString(r),"used by",i.toString(n)+"."),s._warned=!0,e._warned=!0):s||(o.warn("Plugin.dependencies:",i.toString(t),"used by",i.toString(n),"could not be resolved."),e._warned=!0),r.name}));for(var s=0;s<t[r].length;s+=1)i.dependencies(t[r][s],t);return t}},i.dependencyParse=function(e){return o.isString(e)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-+]+)?))?$/.test(e)||o.warn("Plugin.dependencyParse:",e,"is not a valid dependency string."),{name:e.split("@")[0],range:e.split("@")[1]||"*"}):{name:e.name,range:e.range||e.version}},i.versionParse=function(e){var t=/^(\*)|(\^|~|>=|>)?\s*((\d+)\.(\d+)\.(\d+))(-[0-9A-Za-z-+]+)?$/;t.test(e)||o.warn("Plugin.versionParse:",e,"is not a valid version or range.");var n=t.exec(e),i=Number(n[4]),r=Number(n[5]),s=Number(n[6]);return{isRange:Boolean(n[1]||n[2]),version:n[3],range:e,operator:n[1]||n[2]||"",major:i,minor:r,patch:s,parts:[i,r,s],prerelease:n[7],number:1e8*i+1e4*r+s}},i.versionSatisfies=function(e,t){t=t||"*";var n=i.versionParse(t),o=i.versionParse(e);if(n.isRange){if("*"===n.operator||"*"===e)return!0;if(">"===n.operator)return o.number>n.number;if(">="===n.operator)return o.number>=n.number;if("~"===n.operator)return o.major===n.major&&o.minor===n.minor&&o.patch>=n.patch;if("^"===n.operator)return n.major>0?o.major===n.major&&o.number>=n.number:n.minor>0?o.minor===n.minor&&o.patch>=n.patch:o.patch===n.patch}return e===t||"*"===e}},function(e,t){var n={};e.exports=n,n.create=function(e){return{vertex:e,normalImpulse:0,tangentImpulse:0}}},function(e,t,n){var i={};e.exports=i;var o=n(7),r=n(18),s=n(13),a=n(19),l=n(5),c=n(6),u=n(10),p=n(0),d=n(4);i._deltaMax=1e3/60,i.create=function(e){e=e||{};var t=p.extend({positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},gravity:{x:0,y:1,scale:.001},timing:{timestamp:0,timeScale:1,lastDelta:0,lastElapsed:0,lastUpdatesPerFrame:0}},e);return t.world=e.world||c.create({label:"World"}),t.pairs=e.pairs||a.create(),t.detector=e.detector||s.create(),t.detector.pairs=t.pairs,t.grid={buckets:[]},t.world.gravity=t.gravity,t.broadphase=t.grid,t.metrics={},t},i.update=function(e,t){var n,d=p.now(),f=e.world,m=e.detector,h=e.pairs,v=e.timing,y=v.timestamp;t>i._deltaMax&&p.warnOnce("Matter.Engine.update: delta argument is recommended to be less than or equal to",i._deltaMax.toFixed(3),"ms."),t=void 0!==t?t:p._baseDelta,t*=v.timeScale,v.timestamp+=t,v.lastDelta=t;var g={timestamp:v.timestamp,delta:t};l.trigger(e,"beforeUpdate",g);var x=c.allBodies(f),b=c.allConstraints(f);for(f.isModified&&(s.setBodies(m,x),c.setModified(f,!1,!1,!0)),e.enableSleeping&&o.update(x,t),i._bodiesApplyGravity(x,e.gravity),t>0&&i._bodiesUpdate(x,t),l.trigger(e,"beforeSolve",g),u.preSolveAll(x),n=0;n<e.constraintIterations;n++)u.solveAll(b,t);u.postSolveAll(x);var S=s.collisions(m);a.update(h,S,y),e.enableSleeping&&o.afterCollisions(h.list),h.collisionStart.length>0&&l.trigger(e,"collisionStart",{pairs:h.collisionStart,timestamp:v.timestamp,delta:t});var w=p.clamp(20/e.positionIterations,0,1);for(r.preSolvePosition(h.list),n=0;n<e.positionIterations;n++)r.solvePosition(h.list,t,w);for(r.postSolvePosition(x),u.preSolveAll(x),n=0;n<e.constraintIterations;n++)u.solveAll(b,t);for(u.postSolveAll(x),r.preSolveVelocity(h.list),n=0;n<e.velocityIterations;n++)r.solveVelocity(h.list,t);return i._bodiesUpdateVelocities(x),h.collisionActive.length>0&&l.trigger(e,"collisionActive",{pairs:h.collisionActive,timestamp:v.timestamp,delta:t}),h.collisionEnd.length>0&&l.trigger(e,"collisionEnd",{pairs:h.collisionEnd,timestamp:v.timestamp,delta:t}),i._bodiesClearForces(x),l.trigger(e,"afterUpdate",g),e.timing.lastElapsed=p.now()-d,e},i.merge=function(e,t){if(p.extend(e,t),t.world){e.world=t.world,i.clear(e);for(var n=c.allBodies(e.world),r=0;r<n.length;r++){var s=n[r];o.set(s,!1),s.id=p.nextId()}}},i.clear=function(e){a.clear(e.pairs),s.clear(e.detector)},i._bodiesClearForces=function(e){for(var t=e.length,n=0;n<t;n++){var i=e[n];i.force.x=0,i.force.y=0,i.torque=0}},i._bodiesApplyGravity=function(e,t){var n=void 0!==t.scale?t.scale:.001,i=e.length;if((0!==t.x||0!==t.y)&&0!==n)for(var o=0;o<i;o++){var r=e[o];r.isStatic||r.isSleeping||(r.force.y+=r.mass*t.y*n,r.force.x+=r.mass*t.x*n)}},i._bodiesUpdate=function(e,t){for(var n=e.length,i=0;i<n;i++){var o=e[i];o.isStatic||o.isSleeping||d.update(o,t)}},i._bodiesUpdateVelocities=function(e){for(var t=e.length,n=0;n<t;n++)d.updateVelocities(e[n])}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(0),s=n(1);i._restingThresh=2,i._restingThreshTangent=Math.sqrt(6),i._positionDampen=.9,i._positionWarming=.8,i._frictionNormalMultiplier=5,i._frictionMaxStatic=Number.MAX_VALUE,i.preSolvePosition=function(e){var t,n,i,o=e.length;for(t=0;t<o;t++)(n=e[t]).isActive&&(i=n.contactCount,n.collision.parentA.totalContacts+=i,n.collision.parentB.totalContacts+=i)},i.solvePosition=function(e,t,n){var o,s,a,l,c,u,p,d,f=i._positionDampen*(n||1),m=r.clamp(t/r._baseDelta,0,1),h=e.length;for(o=0;o<h;o++)(s=e[o]).isActive&&!s.isSensor&&(l=(a=s.collision).parentA,c=a.parentB,u=a.normal,s.separation=a.depth+u.x*(c.positionImpulse.x-l.positionImpulse.x)+u.y*(c.positionImpulse.y-l.positionImpulse.y));for(o=0;o<h;o++)(s=e[o]).isActive&&!s.isSensor&&(l=(a=s.collision).parentA,c=a.parentB,u=a.normal,d=s.separation-s.slop*m,(l.isStatic||c.isStatic)&&(d*=2),l.isStatic||l.isSleeping||(p=f/l.totalContacts,l.positionImpulse.x+=u.x*d*p,l.positionImpulse.y+=u.y*d*p),c.isStatic||c.isSleeping||(p=f/c.totalContacts,c.positionImpulse.x-=u.x*d*p,c.positionImpulse.y-=u.y*d*p))},i.postSolvePosition=function(e){for(var t=i._positionWarming,n=e.length,r=o.translate,a=s.update,l=0;l<n;l++){var c=e[l],u=c.positionImpulse,p=u.x,d=u.y,f=c.velocity;if(c.totalContacts=0,0!==p||0!==d){for(var m=0;m<c.parts.length;m++){var h=c.parts[m];r(h.vertices,u),a(h.bounds,h.vertices,f),h.position.x+=p,h.position.y+=d}c.positionPrev.x+=p,c.positionPrev.y+=d,p*f.x+d*f.y<0?(u.x=0,u.y=0):(u.x*=t,u.y*=t)}}},i.preSolveVelocity=function(e){var t,n,i=e.length;for(t=0;t<i;t++){var o=e[t];if(o.isActive&&!o.isSensor){var r=o.contacts,s=o.contactCount,a=o.collision,l=a.parentA,c=a.parentB,u=a.normal,p=a.tangent;for(n=0;n<s;n++){var d=r[n],f=d.vertex,m=d.normalImpulse,h=d.tangentImpulse;if(0!==m||0!==h){var v=u.x*m+p.x*h,y=u.y*m+p.y*h;l.isStatic||l.isSleeping||(l.positionPrev.x+=v*l.inverseMass,l.positionPrev.y+=y*l.inverseMass,l.anglePrev+=l.inverseInertia*((f.x-l.position.x)*y-(f.y-l.position.y)*v)),c.isStatic||c.isSleeping||(c.positionPrev.x-=v*c.inverseMass,c.positionPrev.y-=y*c.inverseMass,c.anglePrev-=c.inverseInertia*((f.x-c.position.x)*y-(f.y-c.position.y)*v))}}}}},i.solveVelocity=function(e,t){var n,o,s,a,l=t/r._baseDelta,c=l*l*l,u=-i._restingThresh*l,p=i._restingThreshTangent,d=i._frictionNormalMultiplier*l,f=i._frictionMaxStatic,m=e.length;for(s=0;s<m;s++){var h=e[s];if(h.isActive&&!h.isSensor){var v=h.collision,y=v.parentA,g=v.parentB,x=v.normal.x,b=v.normal.y,S=v.tangent.x,w=v.tangent.y,A=h.inverseMass,P=h.friction*h.frictionStatic*d,C=h.contacts,B=h.contactCount,M=1/B,k=y.position.x-y.positionPrev.x,_=y.position.y-y.positionPrev.y,I=y.angle-y.anglePrev,T=g.position.x-g.positionPrev.x,R=g.position.y-g.positionPrev.y,E=g.angle-g.anglePrev;for(a=0;a<B;a++){var D=C[a],V=D.vertex,H=V.x-y.position.x,L=V.y-y.position.y,F=V.x-g.position.x,O=V.y-g.position.y,U=k-L*I-(T-O*E),q=_+H*I-(R+F*E),W=x*U+b*q,j=S*U+w*q,z=h.separation+W,N=Math.min(z,1),G=(N=z<0?0:N)*P;j<-G||j>G?(o=j>0?j:-j,(n=h.friction*(j>0?1:-1)*c)<-o?n=-o:n>o&&(n=o)):(n=j,o=f);var X=H*b-L*x,Q=F*b-O*x,$=M/(A+y.inverseInertia*X*X+g.inverseInertia*Q*Q),Y=(1+h.restitution)*W*$;if(n*=$,W<u)D.normalImpulse=0;else{var Z=D.normalImpulse;D.normalImpulse+=Y,D.normalImpulse>0&&(D.normalImpulse=0),Y=D.normalImpulse-Z}if(j<-p||j>p)D.tangentImpulse=0;else{var J=D.tangentImpulse;D.tangentImpulse+=n,D.tangentImpulse<-o&&(D.tangentImpulse=-o),D.tangentImpulse>o&&(D.tangentImpulse=o),n=D.tangentImpulse-J}var K=x*Y+S*n,ee=b*Y+w*n;y.isStatic||y.isSleeping||(y.positionPrev.x+=K*y.inverseMass,y.positionPrev.y+=ee*y.inverseMass,y.anglePrev+=(H*ee-L*K)*y.inverseInertia),g.isStatic||g.isSleeping||(g.positionPrev.x-=K*g.inverseMass,g.positionPrev.y-=ee*g.inverseMass,g.anglePrev-=(F*ee-O*K)*g.inverseInertia)}}}}},function(e,t,n){var i={};e.exports=i;var o=n(9),r=n(0);i.create=function(e){return r.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},e)},i.update=function(e,t,n){var i,r,s,a=o.update,l=o.create,c=o.setActive,u=e.table,p=e.list,d=p.length,f=d,m=e.collisionStart,h=e.collisionEnd,v=e.collisionActive,y=t.length,g=0,x=0,b=0;for(s=0;s<y;s++)(r=(i=t[s]).pair)?(r.isActive&&(v[b++]=r),a(r,i,n)):(u[(r=l(i,n)).id]=r,m[g++]=r,p[f++]=r);for(f=0,d=p.length,s=0;s<d;s++)(r=p[s]).timeUpdated>=n?p[f++]=r:(c(r,!1,n),r.collision.bodyA.sleepCounter>0&&r.collision.bodyB.sleepCounter>0?p[f++]=r:(h[x++]=r,delete u[r.id]));p.length!==f&&(p.length=f),m.length!==g&&(m.length=g),h.length!==x&&(h.length=x),v.length!==b&&(v.length=b)},i.clear=function(e){return e.table={},e.list.length=0,e.collisionStart.length=0,e.collisionActive.length=0,e.collisionEnd.length=0,e}},function(e,t,n){var i=e.exports=n(21);i.Axes=n(11),i.Bodies=n(12),i.Body=n(4),i.Bounds=n(1),i.Collision=n(8),i.Common=n(0),i.Composite=n(6),i.Composites=n(22),i.Constraint=n(10),i.Contact=n(16),i.Detector=n(13),i.Engine=n(17),i.Events=n(5),i.Grid=n(23),i.Mouse=n(14),i.MouseConstraint=n(24),i.Pair=n(9),i.Pairs=n(19),i.Plugin=n(15),i.Query=n(25),i.Render=n(26),i.Resolver=n(18),i.Runner=n(27),i.SAT=n(28),i.Sleeping=n(7),i.Svg=n(29),i.Vector=n(2),i.Vertices=n(3),i.World=n(30),i.Engine.run=i.Runner.run,i.Common.deprecated(i.Engine,"run","Engine.run ➤ use Matter.Runner.run(engine) instead")},function(e,t,n){var i={};e.exports=i;var o=n(15),r=n(0);i.name="matter-js",i.version="0.20.0",i.uses=[],i.used=[],i.use=function(){o.use(i,Array.prototype.slice.call(arguments))},i.before=function(e,t){return e=e.replace(/^Matter./,""),r.chainPathBefore(i,e,t)},i.after=function(e,t){return e=e.replace(/^Matter./,""),r.chainPathAfter(i,e,t)}},function(e,t,n){var i={};e.exports=i;var o=n(6),r=n(10),s=n(0),a=n(4),l=n(12),c=s.deprecated;i.stack=function(e,t,n,i,r,s,l){for(var c,u=o.create({label:"Stack"}),p=e,d=t,f=0,m=0;m<i;m++){for(var h=0,v=0;v<n;v++){var y=l(p,d,v,m,c,f);if(y){var g=y.bounds.max.y-y.bounds.min.y,x=y.bounds.max.x-y.bounds.min.x;g>h&&(h=g),a.translate(y,{x:.5*x,y:.5*g}),p=y.bounds.max.x+r,o.addBody(u,y),c=y,f+=1}else p+=r}d+=h+s,p=e}return u},i.chain=function(e,t,n,i,a,l){for(var c=e.bodies,u=1;u<c.length;u++){var p=c[u-1],d=c[u],f=p.bounds.max.y-p.bounds.min.y,m=p.bounds.max.x-p.bounds.min.x,h=d.bounds.max.y-d.bounds.min.y,v={bodyA:p,pointA:{x:m*t,y:f*n},bodyB:d,pointB:{x:(d.bounds.max.x-d.bounds.min.x)*i,y:h*a}},y=s.extend(v,l);o.addConstraint(e,r.create(y))}return e.label+=" Chain",e},i.mesh=function(e,t,n,i,a){var l,c,u,p,d,f=e.bodies;for(l=0;l<n;l++){for(c=1;c<t;c++)u=f[c-1+l*t],p=f[c+l*t],o.addConstraint(e,r.create(s.extend({bodyA:u,bodyB:p},a)));if(l>0)for(c=0;c<t;c++)u=f[c+(l-1)*t],p=f[c+l*t],o.addConstraint(e,r.create(s.extend({bodyA:u,bodyB:p},a))),i&&c>0&&(d=f[c-1+(l-1)*t],o.addConstraint(e,r.create(s.extend({bodyA:d,bodyB:p},a)))),i&&c<t-1&&(d=f[c+1+(l-1)*t],o.addConstraint(e,r.create(s.extend({bodyA:d,bodyB:p},a))))}return e.label+=" Mesh",e},i.pyramid=function(e,t,n,o,r,s,l){return i.stack(e,t,n,o,r,s,(function(t,i,s,c,u,p){var d=Math.min(o,Math.ceil(n/2)),f=u?u.bounds.max.x-u.bounds.min.x:0;if(!(c>d||s<(c=d-c)||s>n-1-c))return 1===p&&a.translate(u,{x:(s+(n%2==1?1:-1))*f,y:0}),l(e+(u?s*f:0)+s*r,i,s,c,u,p)}))},i.newtonsCradle=function(e,t,n,i,s){for(var a=o.create({label:"Newtons Cradle"}),c=0;c<n;c++){var u=l.circle(e+c*(1.9*i),t+s,i,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),p=r.create({pointA:{x:e+c*(1.9*i),y:t},bodyB:u});o.addBody(a,u),o.addConstraint(a,p)}return a},c(i,"newtonsCradle","Composites.newtonsCradle ➤ moved to newtonsCradle example"),i.car=function(e,t,n,i,s){var c=a.nextGroup(!0),u=.5*-n+20,p=.5*n-20,d=o.create({label:"Car"}),f=l.rectangle(e,t,n,i,{collisionFilter:{group:c},chamfer:{radius:.5*i},density:2e-4}),m=l.circle(e+u,t+0,s,{collisionFilter:{group:c},friction:.8}),h=l.circle(e+p,t+0,s,{collisionFilter:{group:c},friction:.8}),v=r.create({bodyB:f,pointB:{x:u,y:0},bodyA:m,stiffness:1,length:0}),y=r.create({bodyB:f,pointB:{x:p,y:0},bodyA:h,stiffness:1,length:0});return o.addBody(d,f),o.addBody(d,m),o.addBody(d,h),o.addConstraint(d,v),o.addConstraint(d,y),d},c(i,"car","Composites.car ➤ moved to car example"),i.softBody=function(e,t,n,o,r,a,c,u,p,d){p=s.extend({inertia:1/0},p),d=s.extend({stiffness:.2,render:{type:"line",anchors:!1}},d);var f=i.stack(e,t,n,o,r,a,(function(e,t){return l.circle(e,t,u,p)}));return i.mesh(f,n,o,c,d),f.label="Soft Body",f},c(i,"softBody","Composites.softBody ➤ moved to softBody and cloth examples")},function(e,t,n){var i={};e.exports=i;var o=n(9),r=n(0),s=r.deprecated;i.create=function(e){return r.extend({buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48},e)},i.update=function(e,t,n,o){var r,s,a,l,c,u=n.world,p=e.buckets,d=!1;for(r=0;r<t.length;r++){var f=t[r];if((!f.isSleeping||o)&&(!u.bounds||!(f.bounds.max.x<u.bounds.min.x||f.bounds.min.x>u.bounds.max.x||f.bounds.max.y<u.bounds.min.y||f.bounds.min.y>u.bounds.max.y))){var m=i._getRegion(e,f);if(!f.region||m.id!==f.region.id||o){f.region&&!o||(f.region=m);var h=i._regionUnion(m,f.region);for(s=h.startCol;s<=h.endCol;s++)for(a=h.startRow;a<=h.endRow;a++){l=p[c=i._getBucketId(s,a)];var v=s>=m.startCol&&s<=m.endCol&&a>=m.startRow&&a<=m.endRow,y=s>=f.region.startCol&&s<=f.region.endCol&&a>=f.region.startRow&&a<=f.region.endRow;!v&&y&&y&&l&&i._bucketRemoveBody(e,l,f),(f.region===m||v&&!y||o)&&(l||(l=i._createBucket(p,c)),i._bucketAddBody(e,l,f))}f.region=m,d=!0}}}d&&(e.pairsList=i._createActivePairsList(e))},s(i,"update","Grid.update ➤ replaced by Matter.Detector"),i.clear=function(e){e.buckets={},e.pairs={},e.pairsList=[]},s(i,"clear","Grid.clear ➤ replaced by Matter.Detector"),i._regionUnion=function(e,t){var n=Math.min(e.startCol,t.startCol),o=Math.max(e.endCol,t.endCol),r=Math.min(e.startRow,t.startRow),s=Math.max(e.endRow,t.endRow);return i._createRegion(n,o,r,s)},i._getRegion=function(e,t){var n=t.bounds,o=Math.floor(n.min.x/e.bucketWidth),r=Math.floor(n.max.x/e.bucketWidth),s=Math.floor(n.min.y/e.bucketHeight),a=Math.floor(n.max.y/e.bucketHeight);return i._createRegion(o,r,s,a)},i._createRegion=function(e,t,n,i){return{id:e+","+t+","+n+","+i,startCol:e,endCol:t,startRow:n,endRow:i}},i._getBucketId=function(e,t){return"C"+e+"R"+t},i._createBucket=function(e,t){return e[t]=[]},i._bucketAddBody=function(e,t,n){var i,r=e.pairs,s=o.id,a=t.length;for(i=0;i<a;i++){var l=t[i];if(!(n.id===l.id||n.isStatic&&l.isStatic)){var c=s(n,l),u=r[c];u?u[2]+=1:r[c]=[n,l,1]}}t.push(n)},i._bucketRemoveBody=function(e,t,n){var i,s=e.pairs,a=o.id;t.splice(r.indexOf(t,n),1);var l=t.length;for(i=0;i<l;i++){var c=s[a(n,t[i])];c&&(c[2]-=1)}},i._createActivePairsList=function(e){var t,n,i=e.pairs,o=r.keys(i),s=o.length,a=[];for(n=0;n<s;n++)(t=i[o[n]])[2]>0?a.push(t):delete i[o[n]];return a}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(7),s=n(14),a=n(5),l=n(13),c=n(10),u=n(6),p=n(0),d=n(1);i.create=function(e,t){var n=(e?e.mouse:null)||(t?t.mouse:null);n||(e&&e.render&&e.render.canvas?n=s.create(e.render.canvas):t&&t.element?n=s.create(t.element):(n=s.create(),p.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var o={type:"mouseConstraint",mouse:n,element:null,body:null,constraint:c.create({label:"Mouse Constraint",pointA:n.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},r=p.extend(o,t);return a.on(e,"beforeUpdate",(function(){var t=u.allBodies(e.world);i.update(r,t),i._triggerEvents(r)})),r},i.update=function(e,t){var n=e.mouse,i=e.constraint,s=e.body;if(0===n.button){if(i.bodyB)r.set(i.bodyB,!1),i.pointA=n.position;else for(var c=0;c<t.length;c++)if(s=t[c],d.contains(s.bounds,n.position)&&l.canCollide(s.collisionFilter,e.collisionFilter))for(var u=s.parts.length>1?1:0;u<s.parts.length;u++){var p=s.parts[u];if(o.contains(p.vertices,n.position)){i.pointA=n.position,i.bodyB=e.body=s,i.pointB={x:n.position.x-s.position.x,y:n.position.y-s.position.y},i.angleB=s.angle,r.set(s,!1),a.trigger(e,"startdrag",{mouse:n,body:s});break}}}else i.bodyB=e.body=null,i.pointB=null,s&&a.trigger(e,"enddrag",{mouse:n,body:s})},i._triggerEvents=function(e){var t=e.mouse,n=t.sourceEvents;n.mousemove&&a.trigger(e,"mousemove",{mouse:t}),n.mousedown&&a.trigger(e,"mousedown",{mouse:t}),n.mouseup&&a.trigger(e,"mouseup",{mouse:t}),s.clearSourceEvents(t)}},function(e,t,n){var i={};e.exports=i;var o=n(2),r=n(8),s=n(1),a=n(12),l=n(3);i.collides=function(e,t){for(var n=[],i=t.length,o=e.bounds,a=r.collides,l=s.overlaps,c=0;c<i;c++){var u=t[c],p=u.parts.length,d=1===p?0:1;if(l(u.bounds,o))for(var f=d;f<p;f++){var m=u.parts[f];if(l(m.bounds,o)){var h=a(m,e);if(h){n.push(h);break}}}}return n},i.ray=function(e,t,n,r){r=r||1e-100;for(var s=o.angle(t,n),l=o.magnitude(o.sub(t,n)),c=.5*(n.x+t.x),u=.5*(n.y+t.y),p=a.rectangle(c,u,l,r,{angle:s}),d=i.collides(p,e),f=0;f<d.length;f+=1){var m=d[f];m.body=m.bodyB=m.bodyA}return d},i.region=function(e,t,n){for(var i=[],o=0;o<e.length;o++){var r=e[o],a=s.overlaps(r.bounds,t);(a&&!n||!a&&n)&&i.push(r)}return i},i.point=function(e,t){for(var n=[],i=0;i<e.length;i++){var o=e[i];if(s.contains(o.bounds,t))for(var r=1===o.parts.length?0:1;r<o.parts.length;r++){var a=o.parts[r];if(s.contains(a.bounds,t)&&l.contains(a.vertices,t)){n.push(o);break}}}return n}},function(e,t,n){var i={};e.exports=i;var o=n(4),r=n(0),s=n(6),a=n(1),l=n(5),c=n(2),u=n(14);!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(r.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),i._goodFps=30,i._goodDelta=1e3/60,i.create=function(e){var t={engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,timing:{historySize:60,delta:0,deltaHistory:[],lastTime:0,lastTimestamp:0,lastElapsed:0,timestampElapsed:0,timestampElapsedHistory:[],engineDeltaHistory:[],engineElapsedHistory:[],engineUpdatesHistory:[],elapsedHistory:[]},options:{width:800,height:600,pixelRatio:1,background:"#14151f",wireframeBackground:"#14151f",wireframeStrokeStyle:"#bbb",hasBounds:!!e.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showStats:!1,showPerformance:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},n=r.extend(t,e);return n.canvas&&(n.canvas.width=n.options.width||n.canvas.width,n.canvas.height=n.options.height||n.canvas.height),n.mouse=e.mouse,n.engine=e.engine,n.canvas=n.canvas||d(n.options.width,n.options.height),n.context=n.canvas.getContext("2d"),n.textures={},n.bounds=n.bounds||{min:{x:0,y:0},max:{x:n.canvas.width,y:n.canvas.height}},n.controller=i,n.options.showBroadphase=!1,1!==n.options.pixelRatio&&i.setPixelRatio(n,n.options.pixelRatio),r.isElement(n.element)&&n.element.appendChild(n.canvas),n},i.run=function(t){!function o(r){t.frameRequestId=e(o),n(t,r),i.world(t,r),t.context.setTransform(t.options.pixelRatio,0,0,t.options.pixelRatio,0,0),(t.options.showStats||t.options.showDebug)&&i.stats(t,t.context,r),(t.options.showPerformance||t.options.showDebug)&&i.performance(t,t.context,r),t.context.setTransform(1,0,0,1,0,0)}()},i.stop=function(e){t(e.frameRequestId)},i.setPixelRatio=function(e,t){var n=e.options,i=e.canvas;"auto"===t&&(t=f(i)),n.pixelRatio=t,i.setAttribute("data-pixel-ratio",t),i.width=n.width*t,i.height=n.height*t,i.style.width=n.width+"px",i.style.height=n.height+"px"},i.setSize=function(e,t,n){e.options.width=t,e.options.height=n,e.bounds.max.x=e.bounds.min.x+t,e.bounds.max.y=e.bounds.min.y+n,1!==e.options.pixelRatio?i.setPixelRatio(e,e.options.pixelRatio):(e.canvas.width=t,e.canvas.height=n)},i.lookAt=function(e,t,n,i){i=void 0===i||i,t=r.isArray(t)?t:[t],n=n||{x:0,y:0};for(var o={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},s=0;s<t.length;s+=1){var a=t[s],l=a.bounds?a.bounds.min:a.min||a.position||a,c=a.bounds?a.bounds.max:a.max||a.position||a;l&&c&&(l.x<o.min.x&&(o.min.x=l.x),c.x>o.max.x&&(o.max.x=c.x),l.y<o.min.y&&(o.min.y=l.y),c.y>o.max.y&&(o.max.y=c.y))}var p=o.max.x-o.min.x+2*n.x,d=o.max.y-o.min.y+2*n.y,f=e.canvas.height,m=e.canvas.width/f,h=p/d,v=1,y=1;h>m?y=h/m:v=m/h,e.options.hasBounds=!0,e.bounds.min.x=o.min.x,e.bounds.max.x=o.min.x+p*v,e.bounds.min.y=o.min.y,e.bounds.max.y=o.min.y+d*y,i&&(e.bounds.min.x+=.5*p-p*v*.5,e.bounds.max.x+=.5*p-p*v*.5,e.bounds.min.y+=.5*d-d*y*.5,e.bounds.max.y+=.5*d-d*y*.5),e.bounds.min.x-=n.x,e.bounds.max.x-=n.x,e.bounds.min.y-=n.y,e.bounds.max.y-=n.y,e.mouse&&(u.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),u.setOffset(e.mouse,e.bounds.min))},i.startViewTransform=function(e){var t=e.bounds.max.x-e.bounds.min.x,n=e.bounds.max.y-e.bounds.min.y,i=t/e.options.width,o=n/e.options.height;e.context.setTransform(e.options.pixelRatio/i,0,0,e.options.pixelRatio/o,0,0),e.context.translate(-e.bounds.min.x,-e.bounds.min.y)},i.endViewTransform=function(e){e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0)},i.world=function(e,t){var n,o=r.now(),p=e.engine,d=p.world,f=e.canvas,m=e.context,v=e.options,y=e.timing,g=s.allBodies(d),x=s.allConstraints(d),b=v.wireframes?v.wireframeBackground:v.background,S=[],w=[],A={timestamp:p.timing.timestamp};if(l.trigger(e,"beforeRender",A),e.currentBackground!==b&&h(e,b),m.globalCompositeOperation="source-in",m.fillStyle="transparent",m.fillRect(0,0,f.width,f.height),m.globalCompositeOperation="source-over",v.hasBounds){for(n=0;n<g.length;n++){var P=g[n];a.overlaps(P.bounds,e.bounds)&&S.push(P)}for(n=0;n<x.length;n++){var C=x[n],B=C.bodyA,M=C.bodyB,k=C.pointA,_=C.pointB;B&&(k=c.add(B.position,C.pointA)),M&&(_=c.add(M.position,C.pointB)),k&&_&&(a.contains(e.bounds,k)||a.contains(e.bounds,_))&&w.push(C)}i.startViewTransform(e),e.mouse&&(u.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.options.width,y:(e.bounds.max.y-e.bounds.min.y)/e.options.height}),u.setOffset(e.mouse,e.bounds.min))}else w=x,S=g,1!==e.options.pixelRatio&&e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0);!v.wireframes||p.enableSleeping&&v.showSleeping?i.bodies(e,S,m):(v.showConvexHulls&&i.bodyConvexHulls(e,S,m),i.bodyWireframes(e,S,m)),v.showBounds&&i.bodyBounds(e,S,m),(v.showAxes||v.showAngleIndicator)&&i.bodyAxes(e,S,m),v.showPositions&&i.bodyPositions(e,S,m),v.showVelocity&&i.bodyVelocity(e,S,m),v.showIds&&i.bodyIds(e,S,m),v.showSeparations&&i.separations(e,p.pairs.list,m),v.showCollisions&&i.collisions(e,p.pairs.list,m),v.showVertexNumbers&&i.vertexNumbers(e,S,m),v.showMousePosition&&i.mousePosition(e,e.mouse,m),i.constraints(w,m),v.hasBounds&&i.endViewTransform(e),l.trigger(e,"afterRender",A),y.lastElapsed=r.now()-o},i.stats=function(e,t,n){for(var i=e.engine,o=i.world,r=s.allBodies(o),a=0,l=0,c=0;c<r.length;c+=1)a+=r[c].parts.length;var u={Part:a,Body:r.length,Cons:s.allConstraints(o).length,Comp:s.allComposites(o).length,Pair:i.pairs.list.length};for(var p in t.fillStyle="#0e0f19",t.fillRect(l,0,302.5,44),t.font="12px Arial",t.textBaseline="top",t.textAlign="right",u){var d=u[p];t.fillStyle="#aaa",t.fillText(p,l+55,8),t.fillStyle="#eee",t.fillText(d,l+55,26),l+=55}},i.performance=function(e,t){var n=e.engine,o=e.timing,s=o.deltaHistory,a=o.elapsedHistory,l=o.timestampElapsedHistory,c=o.engineDeltaHistory,u=o.engineUpdatesHistory,d=o.engineElapsedHistory,f=n.timing.lastUpdatesPerFrame,m=n.timing.lastDelta,h=p(s),v=p(a),y=p(c),g=p(u),x=p(d),b=p(l)/h||0,S=Math.round(h/m),w=1e3/h||0,A=60,P=69;t.fillStyle="#0e0f19",t.fillRect(0,50,442,34),i.status(t,10,P,A,4,s.length,Math.round(w)+" fps",w/i._goodFps,(function(e){return s[e]/h-1})),i.status(t,82,P,A,4,c.length,m.toFixed(2)+" dt",i._goodDelta/m,(function(e){return c[e]/y-1})),i.status(t,154,P,A,4,u.length,f+" upf",Math.pow(r.clamp(g/S||1,0,1),4),(function(e){return u[e]/g-1})),i.status(t,226,P,A,4,d.length,x.toFixed(2)+" ut",1-f*x/i._goodFps,(function(e){return d[e]/x-1})),i.status(t,298,P,A,4,a.length,v.toFixed(2)+" rt",1-v/i._goodFps,(function(e){return a[e]/v-1})),i.status(t,370,P,A,4,l.length,b.toFixed(2)+" x",b*b*b,(function(e){return(l[e]/s[e]/b||0)-1}))},i.status=function(e,t,n,i,o,s,a,l,c){e.strokeStyle="#888",e.fillStyle="#444",e.lineWidth=1,e.fillRect(t,n+7,i,1),e.beginPath(),e.moveTo(t,n+7-o*r.clamp(.4*c(0),-2,2));for(var u=0;u<i;u+=1)e.lineTo(t+u,n+7-(u<s?o*r.clamp(.4*c(u),-2,2):0));e.stroke(),e.fillStyle="hsl("+r.clamp(25+95*l,0,120)+",100%,60%)",e.fillRect(t,n-7,4,4),e.font="12px Arial",e.textBaseline="middle",e.textAlign="right",e.fillStyle="#eee",e.fillText(a,t+i,n-5)},i.constraints=function(e,t){for(var n=t,i=0;i<e.length;i++){var o=e[i];if(o.render.visible&&o.pointA&&o.pointB){var s,a,l=o.bodyA,u=o.bodyB;if(s=l?c.add(l.position,o.pointA):o.pointA,"pin"===o.render.type)n.beginPath(),n.arc(s.x,s.y,3,0,2*Math.PI),n.closePath();else{if(a=u?c.add(u.position,o.pointB):o.pointB,n.beginPath(),n.moveTo(s.x,s.y),"spring"===o.render.type)for(var p,d=c.sub(a,s),f=c.perp(c.normalise(d)),m=Math.ceil(r.clamp(o.length/5,12,20)),h=1;h<m;h+=1)p=h%2==0?1:-1,n.lineTo(s.x+d.x*(h/m)+f.x*p*4,s.y+d.y*(h/m)+f.y*p*4);n.lineTo(a.x,a.y)}o.render.lineWidth&&(n.lineWidth=o.render.lineWidth,n.strokeStyle=o.render.strokeStyle,n.stroke()),o.render.anchors&&(n.fillStyle=o.render.strokeStyle,n.beginPath(),n.arc(s.x,s.y,3,0,2*Math.PI),n.arc(a.x,a.y,3,0,2*Math.PI),n.closePath(),n.fill())}}},i.bodies=function(e,t,n){var i,o,r,s,a=n,l=(e.engine,e.options),c=l.showInternalEdges||!l.wireframes;for(r=0;r<t.length;r++)if((i=t[r]).render.visible)for(s=i.parts.length>1?1:0;s<i.parts.length;s++)if((o=i.parts[s]).render.visible){if(l.showSleeping&&i.isSleeping?a.globalAlpha=.5*o.render.opacity:1!==o.render.opacity&&(a.globalAlpha=o.render.opacity),o.render.sprite&&o.render.sprite.texture&&!l.wireframes){var u=o.render.sprite,p=m(e,u.texture);a.translate(o.position.x,o.position.y),a.rotate(o.angle),a.drawImage(p,p.width*-u.xOffset*u.xScale,p.height*-u.yOffset*u.yScale,p.width*u.xScale,p.height*u.yScale),a.rotate(-o.angle),a.translate(-o.position.x,-o.position.y)}else{if(o.circleRadius)a.beginPath(),a.arc(o.position.x,o.position.y,o.circleRadius,0,2*Math.PI);else{a.beginPath(),a.moveTo(o.vertices[0].x,o.vertices[0].y);for(var d=1;d<o.vertices.length;d++)!o.vertices[d-1].isInternal||c?a.lineTo(o.vertices[d].x,o.vertices[d].y):a.moveTo(o.vertices[d].x,o.vertices[d].y),o.vertices[d].isInternal&&!c&&a.moveTo(o.vertices[(d+1)%o.vertices.length].x,o.vertices[(d+1)%o.vertices.length].y);a.lineTo(o.vertices[0].x,o.vertices[0].y),a.closePath()}l.wireframes?(a.lineWidth=1,a.strokeStyle=e.options.wireframeStrokeStyle,a.stroke()):(a.fillStyle=o.render.fillStyle,o.render.lineWidth&&(a.lineWidth=o.render.lineWidth,a.strokeStyle=o.render.strokeStyle,a.stroke()),a.fill())}a.globalAlpha=1}},i.bodyWireframes=function(e,t,n){var i,o,r,s,a,l=n,c=e.options.showInternalEdges;for(l.beginPath(),r=0;r<t.length;r++)if((i=t[r]).render.visible)for(a=i.parts.length>1?1:0;a<i.parts.length;a++){for(o=i.parts[a],l.moveTo(o.vertices[0].x,o.vertices[0].y),s=1;s<o.vertices.length;s++)!o.vertices[s-1].isInternal||c?l.lineTo(o.vertices[s].x,o.vertices[s].y):l.moveTo(o.vertices[s].x,o.vertices[s].y),o.vertices[s].isInternal&&!c&&l.moveTo(o.vertices[(s+1)%o.vertices.length].x,o.vertices[(s+1)%o.vertices.length].y);l.lineTo(o.vertices[0].x,o.vertices[0].y)}l.lineWidth=1,l.strokeStyle=e.options.wireframeStrokeStyle,l.stroke()},i.bodyConvexHulls=function(e,t,n){var i,o,r,s=n;for(s.beginPath(),o=0;o<t.length;o++)if((i=t[o]).render.visible&&1!==i.parts.length){for(s.moveTo(i.vertices[0].x,i.vertices[0].y),r=1;r<i.vertices.length;r++)s.lineTo(i.vertices[r].x,i.vertices[r].y);s.lineTo(i.vertices[0].x,i.vertices[0].y)}s.lineWidth=1,s.strokeStyle="rgba(255,255,255,0.2)",s.stroke()},i.vertexNumbers=function(e,t,n){var i,o,r,s=n;for(i=0;i<t.length;i++){var a=t[i].parts;for(r=a.length>1?1:0;r<a.length;r++){var l=a[r];for(o=0;o<l.vertices.length;o++)s.fillStyle="rgba(255,255,255,0.2)",s.fillText(i+"_"+o,l.position.x+.8*(l.vertices[o].x-l.position.x),l.position.y+.8*(l.vertices[o].y-l.position.y))}}},i.mousePosition=function(e,t,n){var i=n;i.fillStyle="rgba(255,255,255,0.8)",i.fillText(t.position.x+"  "+t.position.y,t.position.x+5,t.position.y-5)},i.bodyBounds=function(e,t,n){var i=n,o=(e.engine,e.options);i.beginPath();for(var r=0;r<t.length;r++)if(t[r].render.visible)for(var s=t[r].parts,a=s.length>1?1:0;a<s.length;a++){var l=s[a];i.rect(l.bounds.min.x,l.bounds.min.y,l.bounds.max.x-l.bounds.min.x,l.bounds.max.y-l.bounds.min.y)}o.wireframes?i.strokeStyle="rgba(255,255,255,0.08)":i.strokeStyle="rgba(0,0,0,0.1)",i.lineWidth=1,i.stroke()},i.bodyAxes=function(e,t,n){var i,o,r,s,a=n,l=(e.engine,e.options);for(a.beginPath(),o=0;o<t.length;o++){var c=t[o],u=c.parts;if(c.render.visible)if(l.showAxes)for(r=u.length>1?1:0;r<u.length;r++)for(i=u[r],s=0;s<i.axes.length;s++){var p=i.axes[s];a.moveTo(i.position.x,i.position.y),a.lineTo(i.position.x+20*p.x,i.position.y+20*p.y)}else for(r=u.length>1?1:0;r<u.length;r++)for(i=u[r],s=0;s<i.axes.length;s++)a.moveTo(i.position.x,i.position.y),a.lineTo((i.vertices[0].x+i.vertices[i.vertices.length-1].x)/2,(i.vertices[0].y+i.vertices[i.vertices.length-1].y)/2)}l.wireframes?(a.strokeStyle="indianred",a.lineWidth=1):(a.strokeStyle="rgba(255, 255, 255, 0.4)",a.globalCompositeOperation="overlay",a.lineWidth=2),a.stroke(),a.globalCompositeOperation="source-over"},i.bodyPositions=function(e,t,n){var i,o,r,s,a=n,l=(e.engine,e.options);for(a.beginPath(),r=0;r<t.length;r++)if((i=t[r]).render.visible)for(s=0;s<i.parts.length;s++)o=i.parts[s],a.arc(o.position.x,o.position.y,3,0,2*Math.PI,!1),a.closePath();for(l.wireframes?a.fillStyle="indianred":a.fillStyle="rgba(0,0,0,0.5)",a.fill(),a.beginPath(),r=0;r<t.length;r++)(i=t[r]).render.visible&&(a.arc(i.positionPrev.x,i.positionPrev.y,2,0,2*Math.PI,!1),a.closePath());a.fillStyle="rgba(255,165,0,0.8)",a.fill()},i.bodyVelocity=function(e,t,n){var i=n;i.beginPath();for(var r=0;r<t.length;r++){var s=t[r];if(s.render.visible){var a=o.getVelocity(s);i.moveTo(s.position.x,s.position.y),i.lineTo(s.position.x+a.x,s.position.y+a.y)}}i.lineWidth=3,i.strokeStyle="cornflowerblue",i.stroke()},i.bodyIds=function(e,t,n){var i,o,r=n;for(i=0;i<t.length;i++)if(t[i].render.visible){var s=t[i].parts;for(o=s.length>1?1:0;o<s.length;o++){var a=s[o];r.font="12px Arial",r.fillStyle="rgba(255,255,255,0.5)",r.fillText(a.id,a.position.x+10,a.position.y-10)}}},i.collisions=function(e,t,n){var i,o,r,s,a=n,l=e.options;for(a.beginPath(),r=0;r<t.length;r++)if((i=t[r]).isActive)for(o=i.collision,s=0;s<i.contactCount;s++){var c=i.contacts[s].vertex;a.rect(c.x-1.5,c.y-1.5,3.5,3.5)}for(l.wireframes?a.fillStyle="rgba(255,255,255,0.7)":a.fillStyle="orange",a.fill(),a.beginPath(),r=0;r<t.length;r++)if((i=t[r]).isActive&&(o=i.collision,i.contactCount>0)){var u=i.contacts[0].vertex.x,p=i.contacts[0].vertex.y;2===i.contactCount&&(u=(i.contacts[0].vertex.x+i.contacts[1].vertex.x)/2,p=(i.contacts[0].vertex.y+i.contacts[1].vertex.y)/2),o.bodyB===o.supports[0].body||!0===o.bodyA.isStatic?a.moveTo(u-8*o.normal.x,p-8*o.normal.y):a.moveTo(u+8*o.normal.x,p+8*o.normal.y),a.lineTo(u,p)}l.wireframes?a.strokeStyle="rgba(255,165,0,0.7)":a.strokeStyle="orange",a.lineWidth=1,a.stroke()},i.separations=function(e,t,n){var i,o,r,s,a,l=n,c=e.options;for(l.beginPath(),a=0;a<t.length;a++)if((i=t[a]).isActive){r=(o=i.collision).bodyA;var u=1;(s=o.bodyB).isStatic||r.isStatic||(u=.5),s.isStatic&&(u=0),l.moveTo(s.position.x,s.position.y),l.lineTo(s.position.x-o.penetration.x*u,s.position.y-o.penetration.y*u),u=1,s.isStatic||r.isStatic||(u=.5),r.isStatic&&(u=0),l.moveTo(r.position.x,r.position.y),l.lineTo(r.position.x+o.penetration.x*u,r.position.y+o.penetration.y*u)}c.wireframes?l.strokeStyle="rgba(255,165,0,0.5)":l.strokeStyle="orange",l.stroke()},i.inspector=function(e,t){e.engine;var n,i=e.selected,o=e.render,r=o.options;if(r.hasBounds){var s=o.bounds.max.x-o.bounds.min.x,a=o.bounds.max.y-o.bounds.min.y,l=s/o.options.width,c=a/o.options.height;t.scale(1/l,1/c),t.translate(-o.bounds.min.x,-o.bounds.min.y)}for(var u=0;u<i.length;u++){var p=i[u].data;switch(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.9)",t.setLineDash([1,2]),p.type){case"body":n=p.bounds,t.beginPath(),t.rect(Math.floor(n.min.x-3),Math.floor(n.min.y-3),Math.floor(n.max.x-n.min.x+6),Math.floor(n.max.y-n.min.y+6)),t.closePath(),t.stroke();break;case"constraint":var d=p.pointA;p.bodyA&&(d=p.pointB),t.beginPath(),t.arc(d.x,d.y,10,0,2*Math.PI),t.closePath(),t.stroke()}t.setLineDash([]),t.translate(-.5,-.5)}null!==e.selectStart&&(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.6)",t.fillStyle="rgba(255,165,0,0.1)",n=e.selectBounds,t.beginPath(),t.rect(Math.floor(n.min.x),Math.floor(n.min.y),Math.floor(n.max.x-n.min.x),Math.floor(n.max.y-n.min.y)),t.closePath(),t.stroke(),t.fill(),t.translate(-.5,-.5)),r.hasBounds&&t.setTransform(1,0,0,1,0,0)};var n=function(e,t){var n=e.engine,o=e.timing,r=o.historySize,s=n.timing.timestamp;o.delta=t-o.lastTime||i._goodDelta,o.lastTime=t,o.timestampElapsed=s-o.lastTimestamp||0,o.lastTimestamp=s,o.deltaHistory.unshift(o.delta),o.deltaHistory.length=Math.min(o.deltaHistory.length,r),o.engineDeltaHistory.unshift(n.timing.lastDelta),o.engineDeltaHistory.length=Math.min(o.engineDeltaHistory.length,r),o.timestampElapsedHistory.unshift(o.timestampElapsed),o.timestampElapsedHistory.length=Math.min(o.timestampElapsedHistory.length,r),o.engineUpdatesHistory.unshift(n.timing.lastUpdatesPerFrame),o.engineUpdatesHistory.length=Math.min(o.engineUpdatesHistory.length,r),o.engineElapsedHistory.unshift(n.timing.lastElapsed),o.engineElapsedHistory.length=Math.min(o.engineElapsedHistory.length,r),o.elapsedHistory.unshift(o.lastElapsed),o.elapsedHistory.length=Math.min(o.elapsedHistory.length,r)},p=function(e){for(var t=0,n=0;n<e.length;n+=1)t+=e[n];return t/e.length||0},d=function(e,t){var n=document.createElement("canvas");return n.width=e,n.height=t,n.oncontextmenu=function(){return!1},n.onselectstart=function(){return!1},n},f=function(e){var t=e.getContext("2d");return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)},m=function(e,t){var n=e.textures[t];return n||((n=e.textures[t]=new Image).src=t,n)},h=function(e,t){var n=t;/(jpg|gif|png)$/.test(t)&&(n="url("+t+")"),e.canvas.style.background=n,e.canvas.style.backgroundSize="contain",e.currentBackground=t}}()},function(e,t,n){var i={};e.exports=i;var o=n(5),r=n(17),s=n(0);!function(){i._maxFrameDelta=1e3/15,i._frameDeltaFallback=1e3/60,i._timeBufferMargin=1.5,i._elapsedNextEstimate=1,i._smoothingLowerBound=.1,i._smoothingUpperBound=.9,i.create=function(e){var t=s.extend({delta:1e3/60,frameDelta:null,frameDeltaSmoothing:!0,frameDeltaSnapping:!0,frameDeltaHistory:[],frameDeltaHistorySize:100,frameRequestId:null,timeBuffer:0,timeLastTick:null,maxUpdates:null,maxFrameTime:1e3/30,lastUpdatesDeferred:0,enabled:!0},e);return t.fps=0,t},i.run=function(e,t){return e.timeBuffer=i._frameDeltaFallback,function n(o){e.frameRequestId=i._onNextFrame(e,n),o&&e.enabled&&i.tick(e,t,o)}(),e},i.tick=function(t,n,a){var l=s.now(),c=t.delta,u=0,p=a-t.timeLastTick;if((!p||!t.timeLastTick||p>Math.max(i._maxFrameDelta,t.maxFrameTime))&&(p=t.frameDelta||i._frameDeltaFallback),t.frameDeltaSmoothing){t.frameDeltaHistory.push(p),t.frameDeltaHistory=t.frameDeltaHistory.slice(-t.frameDeltaHistorySize);var d=t.frameDeltaHistory.slice(0).sort(),f=t.frameDeltaHistory.slice(d.length*i._smoothingLowerBound,d.length*i._smoothingUpperBound);p=e(f)||p}t.frameDeltaSnapping&&(p=1e3/Math.round(1e3/p)),t.frameDelta=p,t.timeLastTick=a,t.timeBuffer+=t.frameDelta,t.timeBuffer=s.clamp(t.timeBuffer,0,t.frameDelta+c*i._timeBufferMargin),t.lastUpdatesDeferred=0;var m=t.maxUpdates||Math.ceil(t.maxFrameTime/c),h={timestamp:n.timing.timestamp};o.trigger(t,"beforeTick",h),o.trigger(t,"tick",h);for(var v=s.now();c>0&&t.timeBuffer>=c*i._timeBufferMargin;){o.trigger(t,"beforeUpdate",h),r.update(n,c),o.trigger(t,"afterUpdate",h),t.timeBuffer-=c,u+=1;var y=s.now()-l,g=s.now()-v,x=y+i._elapsedNextEstimate*g/u;if(u>=m||x>t.maxFrameTime){t.lastUpdatesDeferred=Math.round(Math.max(0,t.timeBuffer/c-i._timeBufferMargin));break}}n.timing.lastUpdatesPerFrame=u,o.trigger(t,"afterTick",h),t.frameDeltaHistory.length>=100&&(t.lastUpdatesDeferred&&Math.round(t.frameDelta/c)>m?s.warnOnce("Matter.Runner: runner reached runner.maxUpdates, see docs."):t.lastUpdatesDeferred&&s.warnOnce("Matter.Runner: runner reached runner.maxFrameTime, see docs."),void 0!==t.isFixed&&s.warnOnce("Matter.Runner: runner.isFixed is now redundant, see docs."),(t.deltaMin||t.deltaMax)&&s.warnOnce("Matter.Runner: runner.deltaMin and runner.deltaMax were removed, see docs."),0!==t.fps&&s.warnOnce("Matter.Runner: runner.fps was replaced by runner.delta, see docs."))},i.stop=function(e){i._cancelNextFrame(e)},i._onNextFrame=function(e,t){if("undefined"==typeof window||!window.requestAnimationFrame)throw new Error("Matter.Runner: missing required global window.requestAnimationFrame.");return e.frameRequestId=window.requestAnimationFrame(t),e.frameRequestId},i._cancelNextFrame=function(e){if("undefined"==typeof window||!window.cancelAnimationFrame)throw new Error("Matter.Runner: missing required global window.cancelAnimationFrame.");window.cancelAnimationFrame(e.frameRequestId)};var e=function(e){for(var t=0,n=e.length,i=0;i<n;i+=1)t+=e[i];return t/n||0}}()},function(e,t,n){var i={};e.exports=i;var o=n(8),r=n(0).deprecated;i.collides=function(e,t){return o.collides(e,t)},r(i,"collides","SAT.collides ➤ replaced by Collision.collides")},function(e,t,n){var i={};e.exports=i,n(1);var o=n(0);i.pathToVertices=function(e,t){"undefined"==typeof window||"SVGPathSeg"in window||o.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var n,r,s,a,l,c,u,p,d,f,m,h=[],v=0,y=0,g=0;t=t||15;var x=function(e,t,n){var i=n%2==1&&n>1;if(!d||e!=d.x||t!=d.y){d&&i?(f=d.x,m=d.y):(f=0,m=0);var o={x:f+e,y:m+t};!i&&d||(d=o),h.push(o),y=f+e,g=m+t}},b=function(e){var t=e.pathSegTypeAsLetter.toUpperCase();if("Z"!==t){switch(t){case"M":case"L":case"T":case"C":case"S":case"Q":y=e.x,g=e.y;break;case"H":y=e.x;break;case"V":g=e.y}x(y,g,e.pathSegType)}};for(i._svgPathToAbsolute(e),s=e.getTotalLength(),c=[],n=0;n<e.pathSegList.numberOfItems;n+=1)c.push(e.pathSegList.getItem(n));for(u=c.concat();v<s;){if((l=c[e.getPathSegAtLength(v)])!=p){for(;u.length&&u[0]!=l;)b(u.shift());p=l}switch(l.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":a=e.getPointAtLength(v),x(a.x,a.y,0)}v+=t}for(n=0,r=u.length;n<r;++n)b(u[n]);return h},i._svgPathToAbsolute=function(e){for(var t,n,i,o,r,s,a=e.pathSegList,l=0,c=0,u=a.numberOfItems,p=0;p<u;++p){var d=a.getItem(p),f=d.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(f))"x"in d&&(l=d.x),"y"in d&&(c=d.y);else switch("x1"in d&&(i=l+d.x1),"x2"in d&&(r=l+d.x2),"y1"in d&&(o=c+d.y1),"y2"in d&&(s=c+d.y2),"x"in d&&(l+=d.x),"y"in d&&(c+=d.y),f){case"m":a.replaceItem(e.createSVGPathSegMovetoAbs(l,c),p);break;case"l":a.replaceItem(e.createSVGPathSegLinetoAbs(l,c),p);break;case"h":a.replaceItem(e.createSVGPathSegLinetoHorizontalAbs(l),p);break;case"v":a.replaceItem(e.createSVGPathSegLinetoVerticalAbs(c),p);break;case"c":a.replaceItem(e.createSVGPathSegCurvetoCubicAbs(l,c,i,o,r,s),p);break;case"s":a.replaceItem(e.createSVGPathSegCurvetoCubicSmoothAbs(l,c,r,s),p);break;case"q":a.replaceItem(e.createSVGPathSegCurvetoQuadraticAbs(l,c,i,o),p);break;case"t":a.replaceItem(e.createSVGPathSegCurvetoQuadraticSmoothAbs(l,c),p);break;case"a":a.replaceItem(e.createSVGPathSegArcAbs(l,c,d.r1,d.r2,d.angle,d.largeArcFlag,d.sweepFlag),p);break;case"z":case"Z":l=t,c=n}"M"!=f&&"m"!=f||(t=l,n=c)}}},function(e,t,n){var i={};e.exports=i;var o=n(6);n(0),i.create=o.create,i.add=o.add,i.remove=o.remove,i.clear=o.clear,i.addComposite=o.addComposite,i.addBody=o.addBody,i.addConstraint=o.addConstraint}])},e.exports=i()},307:(e,t,n)=>{const{AbstractWallet:i,HumanResourcesHandler:o,AbstractAdminService:r,AbstractEntity:s,AbsractSimulation:a}=n(663);class l extends i{constructor(e){super(e),this.total=0,this.invested=0}canInvest(){return this.invested<this.level()}pay(e,t){return this.canAffordIt(t)?(this.cash-=t,e.income(t),this.updateSize(-t),t):0}income(e){this.total+=e}invest(e){this.invested>=this.level()||(this.invested+=1,e.addInvestor(this.owner))}freeInvestment(){this.invested-=1}level(){return Math.floor(Math.cbrt(this.total))+1}createDailyMoney(){const e=this.level();let t;this.cash>=4*e?(t=5*e-this.cash,this.income(t)):t=e,this.cash+=t,this.updateSize(t)}}class c extends i{constructor(e){super(e),this.investors=[],this.actors=[],this.index=0}incomeDailyInvests(){let e;e=this.investors.length-this.cash,console.log(this.cash,e),this.cash+=e,this.updateSize(e)}income(e){if(0!==this.actors.length)for(;e>0;)this.actors[this.index].income(1),this.index+=1,this.index>=this.actors.length&&(this.index=0),e-=1}addActor(e){this.actors.push(e)}addInvestor(e){this.investors.push(e)}}class u extends s{constructor(e){super(e),this.wallet=new l(this)}canInvest(){return this.wallet.canInvest()}isPerson(){return!0}createDailyMoney(){this.wallet.createDailyMoney()}invest(e){this.wallet.invest(e)}freeInvestment(){this.wallet.freeInvestment()}level(){return this.wallet.level()}}class p extends s{constructor(e,t){super(e),this.wallet=new c(this),this.humanResourcesHandler=t,this.adminService=new d(this,t);for(let e=0;e<3;e++){let e=this.adminService.recruitAnEmployee();e&&this.wallet.addActor(e)}}addInvestor(e){this.wallet.addInvestor(e)}incomeDailyInvests(){this.wallet.incomeDailyInvests()}isCompany(){return!0}setColor(e){this.shape.render.fillStyle=e,this.adminService.updateColor(e)}}class d extends r{}e.exports={OrganicSimulation:class extends a{logTotalCashInSimulation(){console.group("counting cash");for(var e=0,t=0,n=0;n<this.people.length;n++)e+=this.people[n].wallet.getCashAmount(),t+=this.people[n].wallet.level();var i=0;if(this.companies)for(console.log(this.companies.length,"companies"),n=0;n<this.companies.length;n++)i+=this.companies[n].wallet.investors.length,e+=this.companies[n].wallet.getCashAmount();return console.log(e,"€ total"),console.log(t,"€ investible"),console.log(i,"€ invested"),console.groupEnd(),e}makeaPeople(e){return new u(e)}addPeople(e,t){super.addPeople(e,t);var n=this.lastTime,i=this.people,o=this.Common;return this.Events.on(this.engine,"beforeUpdate",(function(e){if(o.now()-n>=1e3){for(var t=0;t<i.length;t++)i[t].createDailyMoney();n=o.now()}})),this}makeaCompany(e,t){return new p(e,t)}setCompaniesTransactionOn(e,t){var n=this.Common;return this.Events.on(this.engine,"collisionStart",(function(i){for(var o=i.pairs,r=0;r<o.length;r++){var s=o[r],a=s.bodyA.owner,l=s.bodyB.owner;if(a&&l)if(a.isCompany()&&l.isCompany()){const t=n.choose([a,l]),i=t===a?l:a;t.pay(i,e)}else a.isCompany()&&l.isPerson()?(l.pay(a,t),l.canInvest()&&l.invest(a)):l.isCompany()&&a.isPerson()&&(a.pay(l,t),a.canInvest()&&a.invest(l))}})),this}setCompaniesInvestsOn(){var e=this.companies,t=this.lastTime,n=this.Common;return this.Events.on(this.engine,"beforeUpdate",(function(i){if(n.now()-t>=1e3){for(var o=0;o<e.length;o++)e[o].incomeDailyInvests();t=n.now()}})),this}},EcosystemWallet:c,OrganicWallet:l,Ecosystem:p,Citizen:u}},418:(e,t,n)=>{const i=n(46),{AbstractWallet:o,HumanResourcesHandler:r,AbstractAdminService:s,AbstractEntity:a,AbsractSimulation:l}=n(663);i.Engine,i.Render,i.Runner,i.Body;var c=i.Events,u=i.Composite,p=i.Composites,d=(i.World,i.Bodies);function f(){for(var e="#",t=0;t<6;t++)e+="0123456789ABCDEF"[Math.floor(16*Math.random())];return e}class m extends o{destroyMoney(e){this.canAffordIt(e)&&(this.cash-=e)}}class h extends s{constructor(e,t,n=7){super(e,t),this.maxEmployees=n}payEmployees(e){for(var t=0,n=0;n<this.employees.length;n++)0===this.company.pay(this.employees[n],e)&&(t+=1);for(n=0;n<t;n++)this.fireAnEmployee();this.company.wallet.canAffordIt(e+2*this.employees.length)&&this.employees.length<this.maxEmployees&&this.recruitAnEmployee()}}class v extends a{constructor(e){super(e),this.wallet=new m(this)}isPerson(){return!0}}class y extends a{constructor(e,t){super(e),this.wallet=new m(this),this.humanResourcesHandler=t,this.adminService=new h(this,t)}isCompany(){return!0}payEmployees(e){this.adminService.payEmployees(e)}}class g extends y{isBank(){return!0}}e.exports={Person:v,Company:y,Bank:g,Wallet:m,CapitalistAdminService:h,CapitalistSimulation:class extends l{makeaPeople(e){return new v(e)}makeaCompany(e,t){return new y(e,t)}setCompaniesCapital(e,t=!1){for(var n=0;n<this.companies.length;n++){let i=t?this.Common.random():1;this.companies[n].income(Math.round(i*e))}return this}setCompaniesSalariesOn(e){var t=this.companies,n=this.lastTime,i=this.Common;return c.on(this.engine,"beforeUpdate",(function(o){if(i.now()-n>=5e3){for(var r=0;r<t.length;r++)t[r].payEmployees(e);n=i.now()}})),this}addBanks(e){const t=p.stack(500,200,2,Math.round(e/2),50,50,(function(e,t){return d.polygon(e,t,3,15,{restitution:1,render:{fillStyle:"#666666"}})}));u.add(this.world,t),this.banks=[];for(var n=0;n<t.bodies.length;n++)this.banks.push(new g(t.bodies[n],this.humanResourcesHandler));return this}setBanksLoanOn(e){let t=this.counter;const n=this.engine,i=this;var o=this.Common;return c.on(n,"collisionStart",(function(r){var s=r.pairs;let a=o.now();for(var l=0;l<s.length;l++){var u=s[l],p=u.bodyA.owner,d=u.bodyB.owner;if(p&&d&&((p.isBank()||d.isBank())&&(t+=1),(p.isBank()||d.isBank())&&t>=e)){const e=p.isBank()?p:d,r=p.isBank()?d:p;if(r.loan&&r.loan>0)continue;t=0,r.wallet.income(10),r.loan=11,i.logTotalCashInSimulation(),c.on(n,"beforeUpdate",(function(t){o.now()-a>=2e3&&(r.loan>0&&(11===r.loan&&r.wallet.pay(e,1),r.loan-=1,r.wallet.destroyMoney(1)),a=o.now())}))}}})),this}setBanksColor(e=null){for(var t=0;t<this.banks.length;t++){var n=e||f();this.banks[t].setColor(n)}return this}setBanksSpeed(e,t=!1){for(var n=0;n<this.banks.length;n++){var i=t?this.Common.random():1;this.banks[n].setSpeed(i*e)}this.engine;var o=this.banks;return c.on(this.engine,"beforeUpdate",(function(e){for(var t=0;t<o.length;t++)o[t].updateSpeed()})),this}setBanksCapital(e,t=!1){for(var n=0;n<this.banks.length;n++){let i=t?this.Common.random():1;this.banks[n].income(Math.round(i*e))}return this}setBanksSalariesOn(e){var t=this.banks,n=this.lastTime;const i=this.Common;return c.on(this.engine,"beforeUpdate",(function(o){if(i.now()-n>=5e3){for(var r=0;r<t.length;r++)t[r].payEmployees(e);n=i.now()}})),this}}}},663:(e,t,n)=>{const i=n(46),o="#4d8b31";function r(){for(var e="#",t=0;t<6;t++)e+="0123456789ABCDEF"[Math.floor(16*Math.random())];return e}var s=i.Engine,a=i.Render,l=i.Runner,c=i.Body,u=i.Events,p=i.Composite,d=i.Composites,f=i.Common,m=(i.World,i.Bodies);class h{constructor(e){this.availablePeople=e.slice(),this.busyPeople=[]}getRecruit(){if(0===this.availablePeople.length)return null;const e=this.availablePeople.pop();return this.busyPeople.push(e),e}freeRecruit(e){const t=this.busyPeople.indexOf(e);t>-1&&(this.busyPeople.splice(t,1),this.availablePeople.unshift(e))}}e.exports={AbstractWallet:class{constructor(e){this.owner=e,this.cash=0}getCashAmount(){return this.cash}canAffordIt(e){return this.cash>=e}getSizingRatio(e){return(1.2*this.cash+6)/(1.2*(this.cash-e)+6)}pay(e,t){return this.canAffordIt(t)?(this.cash-=t,e.income(t),this.updateSize(-t),t):0}updateSize(e){let t=this.getSizingRatio(e);this.owner.updateSize(t)}income(e){this.cash+=e,this.updateSize(e)}},HumanResourcesHandler:h,AbstractAdminService:class{constructor(e,t){this.company=e,this.humanResourcesHandler=t,this.employees=[]}recruitAnEmployee(){const e=this.humanResourcesHandler.getRecruit();return e&&(this.employees.push(e),e.setColor(this.company.getColor())),e}fireAnEmployee(){this.humanResourcesHandler.freeRecruit(this.employees.pop())}updateColor(e){for(let t=0;t<this.employees.length;t++)this.employees[t].setColor(e)}},AbstractEntity:class{constructor(e){this.shape=e,this.wallet=null,this.shape.owner=this,this.speed=0}getColor(){return this.shape.render.fillStyle}getShape(){return this.shape}getSpeed(){return this.speed}income(e){this.wallet.income(e)}isBank(){return!1}isCompany(){return!1}isPerson(){return!1}pay(e,t){this.wallet.pay(e,t)}setColor(e){this.shape.render.fillStyle=e}setSpeed(e){this.speed=e}updateSpeed(){c.setSpeed(this.shape,this.speed)}updateSize(e){i.Body.scale(this.shape,e,e)}},AbsractSimulation:class{constructor(e){this.lastTime=f.now(),this.Events=u,this.Common=f,this.elementId=e,this.started=!1,this.paused=!0,this.speeds=[],this.CtoCTransactionAmount=1,this.humanResourcesHandler=null,this.counter=0,this.engine=s.create(),this.engine.gravity.scale=0,this.world=this.engine.world;var t=document.getElementById(this.elementId);this.renderer=a.create({element:t,engine:this.engine,options:{wireframes:!1,background:"transaparent"}});let n=this.renderer;this.engine;var i=function(){var e=t.clientWidth;t.clientHeight,n.canvas.style.width=`${e}px`,n.canvas.style.height=2*e/3+"px"};i(),window.addEventListener("resize",i)}render(){return a.run(this.renderer),this}run(){this.runner=this.runner||l.create(),l.run(this.runner,this.engine)}init(){return this.render(),this.run(),a.stop(this.renderer),l.stop(this.runner),this}start(){this.started||(this.shakeScene(),this.started=!0),this.paused&&(this.paused=!1,this.logTotalCashInSimulation(),this.render(),this.run())}stop(){this.started&&(a.stop(this.renderer),l.stop(this.runner),this.paused=!0)}logTotalCashInSimulation(){console.group("counting cash"),console.log(this.people.length,"people");for(var e=0,t=0;t<this.people.length;t++)e+=this.people[t].wallet.getCashAmount();if(this.companies)for(console.log(this.companies.length,"companies"),t=0;t<this.companies.length;t++)e+=this.companies[t].wallet.getCashAmount();return console.log(e,"€ total"),console.groupEnd(),e}addBorders(){var e={fillStyle:o};return p.add(this.world,[m.rectangle(400,0,800,10,{isStatic:!0,render:e}),m.rectangle(400,600,800,10,{isStatic:!0,render:e}),m.rectangle(800,300,10,600,{isStatic:!0,render:e}),m.rectangle(0,300,10,600,{isStatic:!0,render:e})]),this}addSplit(){var e={fillStyle:o};return p.add(this.world,[m.rectangle(400,300,20,600,{isStatic:!0,render:e})]),this}shakeScene(){for(var e=p.allBodies(this.engine.world),t=0;t<e.length;t++){var n=e[t],i=.03*n.mass;c.applyForce(n,n.position,{x:(i+f.random()*i)*f.choose([1,-1]),y:-i+f.random()*-i})}}makeaPeople(e){return null}addPeople(e,t){const n=d.stack(70,100,e,t,50,50,(function(e,t){return m.circle(e,t,3,{restitution:1,render:{fillStyle:"#4d8b31"}})}));p.add(this.world,n),this.people=[];for(var i=0;i<n.bodies.length;i++)this.people.push(this.makeaPeople(n.bodies[i]));return this.humanResourcesHandler=new h(this.people),this}setPeopleCapital(e,t=!1){for(var n=0;n<this.people.length;n++){var i=t?this.Common.random():1;this.people[n].income(Math.round(i*e))}return this}setPeopleColor(e=null){for(var t=0;t<this.people.length;t++){var n=e||r();this.people[t].setColor(n)}return this}setPeopleSpeed(e,t=!1){for(var n=0;n<this.people.length;n++){let i=t?f.random():1;this.people[n].setSpeed(i*e)}this.engine;var i=this.people;return u.on(this.engine,"beforeUpdate",(function(e){for(var t=0;t<i.length;t++)i[t].updateSpeed()})),this}setPeopleTransactionsOn(e){return u.on(this.engine,"collisionStart",(function(t){for(var n=t.pairs,i=0;i<n.length;i++){var o=n[i],r=o.bodyA.owner,s=o.bodyB.owner;if(r&&s&&r.isPerson()&&s.isPerson()){var a=f.choose([r,s]),l=a===r?s:r;a.pay(l,e)}}})),this}makeaCompany(e,t){return null}addCompanies(e){const t=d.stack(500,100,2,Math.round(e/2),50,50,(function(e,t){return m.rectangle(e,t,15,15,{restitution:1,render:{fillStyle:"#424242"}})}));p.add(this.world,t),this.companies=[];for(var n=0;n<t.bodies.length;n++)this.companies.push(this.makeaCompany(t.bodies[n],this.humanResourcesHandler));return this}setCompaniesTransactionOn(e,t){var n=this.Common;return u.on(this.engine,"collisionStart",(function(i){for(var o=i.pairs,r=0;r<o.length;r++){var s=o[r],a=s.bodyA.owner,l=s.bodyB.owner;if(a&&l)if(a.isCompany()&&l.isCompany()){const t=n.choose([a,l]),i=t===a?l:a;t.pay(i,e)}else a.isCompany()&&l.isPerson()?l.pay(a,t):l.isCompany()&&a.isPerson()&&a.pay(l,t)}})),this}setCompaniesColor(e=null){for(var t=0;t<this.companies.length;t++){var n=e||r();this.companies[t].setColor(n)}return this}setCompaniesSpeed(e,t=!1){for(var n=0;n<this.companies.length;n++){var i=t?this.Common.random():1;this.companies[n].setSpeed(i*e)}this.engine;var o=this.companies;return u.on(this.engine,"beforeUpdate",(function(e){for(var t=0;t<o.length;t++)o[t].updateSpeed()})),this}}}},818:e=>{e.exports={SimulationHandler:class{constructor(){this.simulations=[]}add(e,t){this.bindSimulationToButtons(t,e),this.simulations.push(t)}bindSimulationToButtons(e,t){var n=this.simulations;document.getElementById(`${t}Start`).addEventListener("click",(function(t){for(var i=0;i<n.length;i++)n[i]!==e&&n[i].stop();e.start()})),document.getElementById(`${t}Pause`).addEventListener("click",(function(t){t.preventDefault(),e.stop()}))}}}}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();var i=n(44);economicSimulator=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,