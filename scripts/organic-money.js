/*! For license information please see organic-money.js.LICENSE.txt */
var organicMoney;(()=>{var t={19:function(t,e,r){var n,i,s,o,a,c,f,h,u;t.exports=(u=r(9021),r(3009),r(1025),s=(i=(n=u).lib).Base,o=i.WordArray,c=(a=n.algo).SHA256,f=a.HMAC,h=a.PBKDF2=s.extend({cfg:s.extend({keySize:4,hasher:c,iterations:25e4}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r=this.cfg,n=f.create(r.hasher,t),i=o.create(),s=o.create([1]),a=i.words,c=s.words,h=r.keySize,u=r.iterations;a.length<h;){var l=n.update(e).finalize(s);n.reset();for(var d=l.words,p=d.length,y=l,g=1;g<u;g++){y=n.finalize(y),n.reset();for(var v=y.words,w=0;w<p;w++)d[w]^=v[w]}i.concat(l),c[0]++}return i.sigBytes=4*h,i}}),n.PBKDF2=function(t,e,r){return h.create(r).compute(t,e)},u.PBKDF2)},25:function(t,e,r){var n,i,s,o;t.exports=(o=r(9021),r(7165),i=(n=o).lib.CipherParams,s=n.enc.Hex,n.format.Hex={stringify:function(t){return t.ciphertext.toString(s)},parse:function(t){var e=s.parse(t);return i.create({ciphertext:e})}},o.format.Hex)},44:(t,e,r)=>{const{Base64:n}=r(8127),{sha256:i}=r(1314),{scryptSync:s}=r(7446),{utf8ToBytes:o,toHex:a,hexToBytes:c}=r(2672),f=r(6513),{encrypt:h,decrypt:u}=r(1658),{getRandomBytesSync:l}=r(6754),d=r(7830),{MerkleTree:p}=r(737);class y extends Error{constructor(t){super(t),this.name="InvalidTransactionError"}}class g extends Error{constructor(t){super(t),this.name="UnauthorizedError"}}class v{static get REF_HASH(){return"c1a551ca1c0deea5efea51b1e1dea112ed1dea0a5150f5e11ab1e50c1a15eed5"}static get ECOREF_HASH(){return"ec051c1a551ca1c0deea5efea51b1e1dea112ed1dea0a5150f5e11ab1e50c1a1"}static get VERSION(){return 1}static get TXTYPE(){return{INIT:0,CREATE:1,PAY:2,ENGAGE:3,PAPER:4,SETADMIN:5,SETACTOR:6,SETPAYER:7}}static randomPrivateKey(){return a(f.utils.randomPrivateKey())}static async aesEncrypt(t,e){const r=s(o(e),o("salt"),2048,8,1,16),n=l(16);return{msg:t=await h(t,r,n),iv:n,sha:i(o(e))}}static async aesDecrypt(t,e){if(JSON.stringify(i(o(e)))!==JSON.stringify(t.sha))throw new Error("Invalid password");const r=s(o(e),o("salt"),2048,8,1,16);return await u(t.msg,r,t.iv)}static publicFromPrivate(t){return a(f.getPublicKey(t,!0))}static dateToInt(t){return+(""+t.getFullYear()+("0"+(t.getMonth()+1)).slice(-2)+("0"+t.getDate()).slice(-2))}static intToDate(t){const e=""+t;return new Date(e.slice(0,4)+"-"+e.slice(4,6)+"-"+e.slice(6,8))}static intToIndex(t){return+(""+t).slice(-3)}static formatMoneyIndex(t,e){return+(""+v.dateToInt(t)+("00"+e).slice(-3))}static formatInvestIndex(t,e){return+(v.dateToInt(t)+"9"+("00"+e).slice(-3))}static buildInvestIndexes(t,e){const r=[];for(let n=0;n<e;n++)r.push(v.formatInvestIndex(t,n));return r}static buildMoneyIndexes(t,e){const r=[];for(let n=0;n<e;n++)r.push(v.formatMoneyIndex(t,n));return r}static hashblock(t){const e={v:t.version,d:t.closedate,p:t.previousHash,s:t.signer,r:t.merkleroot,m:t.money,i:t.invests,t:t.total},r=d.encode(e);return i(r)}static hashtx(t){const e={d:t.date,m:t.money,i:t.invests,s:t.signer,t:t.type,p:t.target,v:t.version},r=d.encode(e);return i(r)}static merkleBlock(t){const e=t.transactions.map((t=>t.hash)),r=new p(e,i).getRoot().toString("hex");return t.merkleroot=r,t}static signblock(t,e){const r=c(e),n=v.hashblock(t),i=f.signSync(n,r);return t.hash=a(i),t}static signtx(t,e){const r=c(e),n=v.hashtx(t),i=f.signSync(n,r);return t.hash=a(i),t}static isValidBlock(t,e=null){e=e||t.signer||t.source;const r=this.hashblock(t),n=t.hash;return f.verify(n,r,e)}static isValidBirthBlock(t){const e=t.hash,r=v.hashblock(t),n=t.signer;for(let e of t.transactions)if(!v.isValidTransaction(e))return!1;return t.previousHash===v.REF_HASH&&t.version===v.VERSION&&2===t.transactions.length&&0===t.merkleroot&&1===t.money.length&&1===t.invests.length&&0===t.total&&f.verify(e,r,n)}static isValidInitializationBlock(t){const e=t.hash,r=v.hashblock(t),n=t.signer;return t.version===v.VERSION&&0===t.transactions.length&&0===t.merkleroot&&0===t.money.length&&0===t.invests.length&&0===t.total&&f.verify(e,r,n)}static isValidTransaction(t){const e=v.hashtx(t);return!!t.source&&t.version===v.VERSION&&t.date>0&&66===t.source.length&&"[object Array]"==Object.prototype.toString.call(t.money)&&"[object Array]"==Object.prototype.toString.call(t.invests)&&Object.values(v.TXTYPE).indexOf(t.type)>-1&&f.verify(t.hash,e,t.source)}constructor(t=[]){null===t&&(t=[]),this.load(t)}get blocks(){return this.bks}set blocks(t){this.bks=t}get lastblock(){return this.bks[0]}addBlock(t){if(!this.isEmpty()&&!v.isValidBlock(this.lastblock))throw new g("Cannot add block if previous is not signed.");this.blocks.unshift(t)}cashPaper(t){if(0!==t.target)throw new y("Target is != 0");if(!t.version)throw new y("Missing version "+t.hash);if(!t.date>0)throw new y("Wrong date "+t.hash);if(!t.source||66!==t.source.length)throw new y("Wrong source format "+t.hash);if(!t.money||"[object Array]"==!Object.prototype.toString.call(t.money))throw new y("Wrong money format "+t.hash);if(0===t.money.length)throw new y("Empty paper (no money) "+t.hash);if(!t.invests||"[object Array]"==!Object.prototype.toString.call(t.invests)||t.invests.length>0)throw new y("Wrong invests format "+t.hash);if(t.type!==v.TXTYPE.PAPER)throw new y("Wrong transaction type "+t.hash);if(!v.isValidTransaction(t))throw new y("Wrong signature "+t.hash);return this.addTransaction(t),this.lastblock.total+=t.money.length,t}getAffordableInvestAmount(t){return this.getLevel()-this.getEngagedInvests(t).length}getAvailableMoneyAmount(){return this.isEmpty()||this.isWaitingValidation()?0:this.lastblock.money.length}getAvailableMoney(t=-1){return t<0?this.lastblock.money:t>this.lastblock.money.length?[]:this.lastblock.money.slice(0,t)}getEngagedInvests(t=null){const e=[];for(let r of this.lastblock.transactions)if(r.type===v.TXTYPE.ENGAGE)for(let n of r.invests)null!==t?v.intToDate(n).getDate()===t.getDate()&&e.push(n):e.push(n);return e}getEngagedMoney(t=null){const e=[];for(let r of this.lastblock.transactions)if(r.type===v.TXTYPE.ENGAGE)for(let n of r.money)null!==t?v.intToDate(n).getDate()===t.getDate()&&e.push(n):e.push(n);return e}getLastTransaction(){for(let t of this.blocks)if(t.transactions.length>0)return t.transactions[0];return null}getLastTransactionDate(){const t=this.getLastTransaction();return v.intToDate(t.date)}isEmpty(){return 0===this.blocks.length}isValid(){return!0}load(t){if("[object Array]"==Object.prototype.toString.call(t))this.blocks=t;else try{this.blocks=d.decode(t)}catch(e){const r=n.toUint8Array(t);this.blocks=d.decode(r)}if(0!==this.blocks.length&&!this.lastblock.version)for(let t=0;t<this.blocks.length;t++){this.blocks[t]={version:this.blocks[t].v,closedate:this.blocks[t].d,previousHash:this.blocks[t].p,signer:this.blocks[t].s,merkleroot:this.blocks[t].r,total:this.blocks[t].t,money:this.blocks[t].m,invests:this.blocks[t].i,transactions:[]||0,hash:this.blocks[t].h};for(let e=0;e<this.blocks[t].transactions;e++)this.blocks[t].transactions[e]={version:this.blocks[t].transaction[e].v,type:this.blocks[t].transaction[e].t,date:this.blocks[t].transaction[e].d,signer:this.blocks[t].transaction[e].s,target:this.blocks[t].transaction[e].t,money:this.blocks[t].transaction[e].m,invests:this.blocks[t].transaction[e].i}}}removeMoney(t){const e=this.lastblock.money.filter((e=>!t.includes(e)));return this.lastblock.money=e,e}addTransaction(t){this.lastblock.hash&&this.newBlock(),this.lastblock.transactions.unshift(t)}newBlock(){if(!v.isValidBlock(this.lastblock))throw new Error("Previous block not signed.");const t={closedate:null,version:v.VERSION,previousHash:this.lastblock.hash,money:this.lastblock.money,invests:this.lastblock.invests,total:this.lastblock.total,merkleroot:0,signer:null,transactions:[]},e=v.intToDate(this.lastblock.closedate);e.setDate(e.getDate()+1);for(let r of this.lastblock.transactions)if(r.type===v.TXTYPE.ENGAGE){for(let n of r.money)if(v.intToDate(n).getTime()===e.getTime()){t.transactions.push(r);break}for(let n of r.invests)if(v.intToDate(n).getTime()===e.getTime()){t.transactions.push(r);break}}this.blocks.unshift(t)}sealLastBlock(t){this.getMyPublicKey();for(let e of this.lastblock.transactions)if(e.type===v.TXTYPE.PAPER&&v.publicFromPrivate(t)!==e.signer)throw new g("Only Paper signer can seal a block with it.");return v.signblock(this.lastblock,t)}getHistory(){const t=[];return this.blocks.forEach((e=>{e.transactions&&e.transactions.forEach((e=>{t.push(e)}))})),t}getMyPublicKey(){for(let t of this.blocks){if(t.previousHash===v.REF_HASH)return t.signer;if(t.transactions.length>0)for(let e of t.transactions)if(e.type===v.TXTYPE.CREATE)return e.source}return null}income(t){const e=this.getMyPublicKey();if(t.target!==e||t.type!==v.TXTYPE.PAY||!v.isValidTransaction(t))throw new Error("Invalid transaction");return this.addTransaction(t),this.lastblock.total+=t.money.length,t}pay(t,e,r,n=new Date){const i=this.getAvailableMoney(r);if(0===i.length)throw new y("Unsufficient funds.");const s={type:v.TXTYPE.PAY,date:v.dateToInt(n),money:i,source:v.publicFromPrivate(t),invests:[],target:e,signer:0,version:v.VERSION},o=v.signtx(s,t);return this.addTransaction(o),this.removeMoney(i),o}}t.exports={Blockchain:v,CitizenBlockchain:class extends v{createMoneyAndInvests(t,e=new Date){var r=e;const n=new Date;if(e.getTime()>n.getTime())throw new Error("Cannot create futur money, live in the present.");const i=this.getLastCreationTransaction();if(i&&(r=v.intToDate(i.date)).setDate(r.getDate()+1),r>e)return null;const s=this.getLevel();let o,a,c,f,h=[],u=[];for(;r<=e;)a=v.buildInvestIndexes(r,s),c=a.filter((t=>!this.getEngagedInvests(r).includes(t))),u=u.concat(c),o=v.buildMoneyIndexes(r,s),f=o.filter((t=>!this.getEngagedMoney(r).includes(t))),h=h.concat(f),r.setDate(r.getDate()+1);const l={version:v.VERSION,type:v.TXTYPE.CREATE,date:v.dateToInt(e),source:v.publicFromPrivate(t),target:v.publicFromPrivate(t),signer:0,money:h,invests:u},d=v.signtx(l,t);return this.addTransaction(d),this.lastblock.money=this.lastblock.money.concat(h),this.lastblock.invests=this.lastblock.invests.concat(u),d}engageInvests(t,e,r,n,i=new Date){if(r>this.getAffordableInvestAmount(i))throw new y("Unsufficient funds.");let s=[];const o=this.getLevel(),a=new Date(i);let c,f;for(let t=0;t<n;t++)c=v.buildInvestIndexes(a,o),f=c.filter((t=>!this.getEngagedInvests(a).includes(t))),s=s.concat(f.slice(0,r)),a.setDate(a.getDate()+1);const h={version:v.VERSION,type:v.TXTYPE.ENGAGE,date:v.dateToInt(i),source:v.publicFromPrivate(t),target:e,money:[],invests:s,signer:0},u=v.signtx(h,t);return this.addTransaction(u),u}engageMoney(t,e,r,n,i=new Date){if(r>this.getAffordableMoneyAmount(i))throw new y("Unsufficient funds.");let s=[];const o=this.getLevel(),a=new Date(i);let c,f;for(let t=0;t<n;t++)c=v.buildMoneyIndexes(a,o),f=c.filter((t=>!this.getEngagedMoney(a).includes(t))),s=s.concat(f.slice(0,r)),a.setDate(a.getDate()+1);const h={version:v.VERSION,type:v.TXTYPE.ENGAGE,date:v.dateToInt(i),source:v.publicFromPrivate(t),target:e,money:s,invests:[],signer:0},u=v.signtx(h,t);return this.addTransaction(u),u}generatePaper(t,e,r,n=new Date){const i=this.getAvailableMoney(e);if(0===i.length)throw new y("Unsufficient funds.");if(n<this.getLastTransactionDate())throw new Error("Invalid date");const s={version:v.VERSION,type:v.TXTYPE.PAPER,date:v.dateToInt(n),money:i,invests:[],source:v.publicFromPrivate(t),target:0,signer:r},o=v.signtx(s,t);return this.addTransaction(o),this.removeMoney(i),s}getAffordableMoneyAmount(t){return this.getLevel()-this.getEngagedMoney(t).length}getLastCreationTransaction(){for(let t of this.blocks)for(let e of t.transactions)if(e.type===v.TXTYPE.CREATE)return e;return null}getLevel(){return this.isEmpty()&&!this.isValidated()?0:Math.floor(Math.cbrt(this.lastblock.total))+1}getMoneyBeforeNextLevel(t=!1){if(this.isEmpty()||!this.isValidated())return 0;const e=this.getLevel();return t?Math.floor(100*(1-this.getMoneyBeforeNextLevel()/Math.pow(e,3))):Math.pow(e,3)-this.lastblock.total}hasLevelUpOnLastTx(){const t=this.getLastTransaction();return null!==t&&t.type==v.TXTYPE.PAY&&Math.floor(Math.cbrt(this.lastblock.total-t.money.length))+1<this.getLevel()}isWaitingValidation(){return 1===this.blocks.length&&this.lastblock.previousHash===v.REF_HASH}isValidated(){return!this.isEmpty()&&this.blocks.length>=2&&this.blocks[this.blocks.length-1].previousHash===v.REF_HASH}makeBirthBlock(t,e,r,n=new Date){const i=v.publicFromPrivate(t);let s={version:v.VERSION,closedate:v.dateToInt(n),previousHash:v.REF_HASH,signer:i,merkleroot:0,money:[v.formatMoneyIndex(n,0)],invests:[v.formatMoneyIndex(n,0)],total:0,transactions:[v.signtx({version:v.VERSION,date:v.dateToInt(e),source:i,target:r,signer:0,money:[],invests:[],type:v.TXTYPE.INIT},t),v.signtx({version:v.VERSION,date:v.dateToInt(n),source:i,target:i,signer:0,money:[v.formatMoneyIndex(n,0)],invests:[v.formatMoneyIndex(n,0)],type:v.TXTYPE.CREATE},t)]};return s=v.signblock(s,t),this.addBlock(s),s}startBlockchain(t,e,r,n=null,i=new Date){return n=n||v.randomPrivateKey(),this.makeBirthBlock(n,e,t,i),this.validateAccount(r,i),n}validateAccount(t,e=new Date){let r={closedate:v.dateToInt(e),previousHash:this.lastblock.hash,signer:v.publicFromPrivate(t),merkleroot:0,money:[],invests:[],total:0,transactions:[],version:v.VERSION};return r=v.signblock(r,t),this.addBlock(r),r}},EcosystemBlockchain:class extends v{isWaitingValidation(){return 1===this.blocks.length&&this.lastblock.previousHash===v.ECOREF_HASH}isValidated(){return!this.isEmpty()&&this.blocks.length>=2&&this.blocks[this.blocks.length-1].previousHash===v.ECOREF_HASH}makeBirthBlock(t,e,r,n=new Date){const i=v.publicFromPrivate(t);let s={version:v.VERSION,closedate:v.dateToInt(n),previousHash:v.ECOREF_HASH,signer:i,merkleroot:0,money:[],invests:[],total:0,transactions:[v.signtx({version:v.VERSION,date:v.dateToInt(n),source:i,target:r,signer:0,money:[],invests:[],type:v.TXTYPE.INIT},t),v.signtx({version:v.VERSION,date:v.dateToInt(n),source:i,target:e,signer:0,money:[],invests:[],type:v.TXTYPE.SETADMIN},t)]};return s=v.signblock(s,t),this.addBlock(s),s}startBlockchain(t,e,r,n=null,i=new Date){return n=n||v.randomPrivateKey(),this.makeBirthBlock(n,r,t,i),this.validateAccount(e,i),n}validateAccount(t,e=new Date){let r={closedate:v.dateToInt(e),previousHash:this.lastblock.hash,signer:v.publicFromPrivate(t),merkleroot:0,money:[],invests:[],total:0,transactions:[],version:v.VERSION};return r=v.signblock(r,t),this.addBlock(r),r}},InvalidTransactionError:y,UnauthorizedError:g}},251:(t,e)=>{e.read=function(t,e,r,n,i){var s,o,a=8*i-n-1,c=(1<<a)-1,f=c>>1,h=-7,u=r?i-1:0,l=r?-1:1,d=t[e+u];for(u+=l,s=d&(1<<-h)-1,d>>=-h,h+=a;h>0;s=256*s+t[e+u],u+=l,h-=8);for(o=s&(1<<-h)-1,s>>=-h,h+=n;h>0;o=256*o+t[e+u],u+=l,h-=8);if(0===s)s=1-f;else{if(s===c)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,n),s-=f}return(d?-1:1)*o*Math.pow(2,s-n)},e.write=function(t,e,r,n,i,s){var o,a,c,f=8*s-i-1,h=(1<<f)-1,u=h>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:s-1,p=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=h):(o=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-o))<1&&(o--,c*=2),(e+=o+u>=1?l/c:l*Math.pow(2,1-u))*c>=2&&(o++,c/=2),o+u>=h?(a=0,o=h):o+u>=1?(a=(e*c-1)*Math.pow(2,i),o+=u):(a=e*Math.pow(2,u-1)*Math.pow(2,i),o=0));i>=8;t[r+d]=255&a,d+=p,a/=256,i-=8);for(o=o<<i|a,f+=i;f>0;t[r+d]=255&o,d+=p,o/=256,f-=8);t[r+d-p]|=128*y}},259:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.MerkleTree=void 0;const i=r(6765),s=n(r(8924)),o=n(r(3009)),a=n(r(2539)),c=n(r(7284));class f extends c.default{constructor(t,e=o.default,r={}){if(super(),this.duplicateOdd=!1,this.hashLeaves=!1,this.isBitcoinTree=!1,this.leaves=[],this.layers=[],this.sortLeaves=!1,this.sortPairs=!1,this.sort=!1,this.fillDefaultHash=null,this.complete=!1,r.complete){if(r.isBitcoinTree)throw new Error('option "complete" is incompatible with "isBitcoinTree"');if(r.duplicateOdd)throw new Error('option "complete" is incompatible with "duplicateOdd"')}if(this.isBitcoinTree=!!r.isBitcoinTree,this.hashLeaves=!!r.hashLeaves,this.sortLeaves=!!r.sortLeaves,this.sortPairs=!!r.sortPairs,this.complete=!!r.complete,r.fillDefaultHash)if("function"==typeof r.fillDefaultHash)this.fillDefaultHash=r.fillDefaultHash;else{if(!i.Buffer.isBuffer(r.fillDefaultHash)&&"string"!=typeof r.fillDefaultHash)throw new Error('method "fillDefaultHash" must be a function, Buffer, or string');this.fillDefaultHash=(t,e)=>r.fillDefaultHash}if(this.sort=!!r.sort,this.sort&&(this.sortLeaves=!0,this.sortPairs=!0),this.duplicateOdd=!!r.duplicateOdd,r.concatenator?this.concatenator=r.concatenator:this.concatenator=i.Buffer.concat,"function"!=typeof e)throw new Error("hashFn must be a function");this.hashFn=this.bufferifyFn(e),this.processLeaves(t)}getOptions(){var t,e;return{complete:this.complete,isBitcoinTree:this.isBitcoinTree,hashLeaves:this.hashLeaves,sortLeaves:this.sortLeaves,sortPairs:this.sortPairs,sort:this.sort,fillDefaultHash:null!==(e=null===(t=this.fillDefaultHash)||void 0===t?void 0:t.toString())&&void 0!==e?e:null,duplicateOdd:this.duplicateOdd}}processLeaves(t){if(this.hashLeaves&&(t=t.map(this.hashFn)),this.leaves=t.map(this.bufferify),this.sortLeaves&&(this.leaves=this.leaves.sort(i.Buffer.compare)),this.fillDefaultHash)for(let t=this.leaves.length;t<Math.pow(2,Math.ceil(Math.log2(this.leaves.length)));t++)this.leaves.push(this.bufferify(this.fillDefaultHash(t,this.hashFn)));this.createHashes(this.leaves)}createHashes(t){for(this.layers=[t];t.length>1;){const e=this.layers.length;this.layers.push([]);const r=this.complete&&1===e&&!Number.isInteger(Math.log2(t.length))?2*t.length-Math.pow(2,Math.ceil(Math.log2(t.length))):t.length;for(let n=0;n<t.length;n+=2){if(n>=r){this.layers[e].push(...t.slice(r));break}if(n+1===t.length&&t.length%2==1){const r=t[t.length-1];let i=r;if(this.isBitcoinTree){i=this.hashFn(this.concatenator([s.default(r),s.default(r)])),i=s.default(this.hashFn(i)),this.layers[e].push(i);continue}if(!this.duplicateOdd){this.layers[e].push(t[n]);continue}}const o=t[n],a=n+1===t.length?o:t[n+1];let c=null;c=this.isBitcoinTree?[s.default(o),s.default(a)]:[o,a],this.sortPairs&&c.sort(i.Buffer.compare);let f=this.hashFn(this.concatenator(c));this.isBitcoinTree&&(f=s.default(this.hashFn(f))),this.layers[e].push(f)}t=this.layers[e]}}addLeaf(t,e=!1){e&&(t=this.hashFn(t)),this.processLeaves(this.leaves.concat(t))}addLeaves(t,e=!1){e&&(t=t.map(this.hashFn)),this.processLeaves(this.leaves.concat(t))}getLeaves(t){return Array.isArray(t)?(this.hashLeaves&&(t=t.map(this.hashFn),this.sortLeaves&&(t=t.sort(i.Buffer.compare))),this.leaves.filter((e=>-1!==this.bufferIndexOf(t,e,this.sortLeaves)))):this.leaves}removeLeaf(t){if(!this.isValidLeafIndex(t))throw new Error(`"${t}" is not a valid leaf index. Expected to be [0, ${this.getLeafCount()-1}]`);const e=this.leaves.splice(t,1);return this.processLeaves(this.leaves),e[0]}updateLeaf(t,e,r=!1){if(!this.isValidLeafIndex(t))throw new Error(`"${t}" is not a valid leaf index. Expected to be [0, ${this.getLeafCount()-1}]`);r&&(e=this.hashFn(e)),this.leaves[t]=e,this.processLeaves(this.leaves)}getLeaf(t){return t<0||t>this.leaves.length-1?i.Buffer.from([]):this.leaves[t]}getLeafIndex(t){t=this.bufferify(t);const e=this.getLeaves();for(let r=0;r<e.length;r++)if(e[r].equals(t))return r;return-1}getLeafCount(){return this.leaves.length}getHexLeaves(){return this.leaves.map((t=>this.bufferToHex(t)))}static marshalLeaves(t){return JSON.stringify(t.map((t=>f.bufferToHex(t))),null,2)}static unmarshalLeaves(t){let e=null;if("string"==typeof t)e=JSON.parse(t);else{if(!(t instanceof Object))throw new Error("Expected type of string or object");e=t}if(!e)return[];if(!Array.isArray(e))throw new Error("Expected JSON string to be array");return e.map(f.bufferify)}getLayers(){return this.layers}getHexLayers(){return this.layers.reduce(((t,e)=>(Array.isArray(e)?t.push(e.map((t=>this.bufferToHex(t)))):t.push(e),t)),[])}getLayersFlat(){const t=this.layers.reduce(((t,e)=>(Array.isArray(e)?t.unshift(...e):t.unshift(e),t)),[]);return t.unshift(i.Buffer.from([0])),t}getHexLayersFlat(){return this.getLayersFlat().map((t=>this.bufferToHex(t)))}getLayerCount(){return this.getLayers().length}getRoot(){return 0===this.layers.length?i.Buffer.from([]):this.layers[this.layers.length-1][0]||i.Buffer.from([])}getHexRoot(){return this.bufferToHex(this.getRoot())}getProof(t,e){if(void 0===t)throw new Error("leaf is required");t=this.bufferify(t);const r=[];if(!Number.isInteger(e)){e=-1;for(let r=0;r<this.leaves.length;r++)0===i.Buffer.compare(t,this.leaves[r])&&(e=r)}if(e<=-1)return[];for(let t=0;t<this.layers.length;t++){const n=this.layers[t],i=e%2,s=i?e-1:this.isBitcoinTree&&e===n.length-1&&t<this.layers.length-1?e:e+1;s<n.length&&r.push({position:i?"left":"right",data:n[s]}),e=e/2|0}return r}getHexProof(t,e){return this.getProof(t,e).map((t=>this.bufferToHex(t.data)))}getProofs(){const t=[];return this.getProofsDFS(this.layers.length-1,0,[],t),t}getProofsDFS(t,e,r,n){const i=e%2;if(-1===t)return void(i||n.push([...r].reverse()));if(e>=this.layers[t].length)return;const s=this.layers[t],o=i?e-1:e+1;let a=!1;o<s.length&&(a=!0,r.push({position:i?"left":"right",data:s[o]}));const c=2*e,f=2*e+1;this.getProofsDFS(t-1,c,r,n),this.getProofsDFS(t-1,f,r,n),a&&r.splice(r.length-1,1)}getHexProofs(){return this.getProofs().map((t=>this.bufferToHex(t.data)))}getPositionalHexProof(t,e){return this.getProof(t,e).map((t=>["left"===t.position?0:1,this.bufferToHex(t.data)]))}static marshalProof(t){const e=t.map((t=>"string"==typeof t?t:i.Buffer.isBuffer(t)?f.bufferToHex(t):{position:t.position,data:f.bufferToHex(t.data)}));return JSON.stringify(e,null,2)}static unmarshalProof(t){let e=null;if("string"==typeof t)e=JSON.parse(t);else{if(!(t instanceof Object))throw new Error("Expected type of string or object");e=t}if(!e)return[];if(!Array.isArray(e))throw new Error("Expected JSON string to be array");return e.map((t=>{if("string"==typeof t)return f.bufferify(t);if(t instanceof Object)return{position:t.position,data:f.bufferify(t.data)};throw new Error("Expected item to be of type string or object")}))}static marshalTree(t){const e=t.getHexRoot(),r=t.leaves.map((t=>f.bufferToHex(t))),n=t.getHexLayers(),i=t.getOptions();return JSON.stringify({options:i,root:e,layers:n,leaves:r},null,2)}static unmarshalTree(t,e=o.default,r={}){let n=null;if("string"==typeof t)n=JSON.parse(t);else{if(!(t instanceof Object))throw new Error("Expected type of string or object");n=t}if(!n)throw new Error("could not parse json");return r=Object.assign({},n.options||{},r),new f(n.leaves,e,r)}getProofIndices(t,e){const r=Math.pow(2,e);let n=new Set;for(const e of t){let t=r+e;for(;t>1;)n.add(1^t),t=t/2|0}const i=t.map((t=>r+t)),s=Array.from(n).sort(((t,e)=>t-e)).reverse();n=i.concat(s);const o=new Set,a=[];for(let t of n)if(!o.has(t))for(a.push(t);t>1&&(o.add(t),o.has(1^t));)t=t/2|0;return a.filter((e=>!t.includes(e-r)))}getProofIndicesForUnevenTree(t,e){const r=Math.ceil(Math.log2(e)),n=[];for(let t=0;t<r;t++)e%2!=0&&n.push({index:t,leavesCount:e}),e=Math.ceil(e/2);const i=[];let s=t;for(let t=0;t<r;t++){let e=s.map((t=>t%2==0?t+1:t-1)).filter((t=>!s.includes(t)));const r=n.find((({index:e})=>e===t));r&&s.includes(r.leavesCount-1)&&(e=e.slice(0,-1)),i.push(e),s=[...new Set(s.map((t=>t%2==0?t/2:t%2==0?(t+1)/2:(t-1)/2)))]}return i}getMultiProof(t,e){if(this.complete||console.warn("Warning: For correct multiProofs it's strongly recommended to set complete: true"),e||(e=t,t=this.getLayersFlat()),this.isUnevenTree()&&e.every(Number.isInteger))return this.getMultiProofForUnevenTree(e);if(!e.every(Number.isInteger)){let t=e;this.sortPairs&&(t=t.sort(i.Buffer.compare));let r=t.map((t=>this.bufferIndexOf(this.leaves,t,this.sortLeaves))).sort(((t,e)=>t===e?0:t>e?1:-1));if(!r.every((t=>-1!==t)))throw new Error("Element does not exist in Merkle tree");const n=[],s=[];let o=[];for(let t=0;t<this.layers.length;t++){const e=this.layers[t];for(let t=0;t<r.length;t++){const i=r[t],a=this.getPairNode(e,i);n.push(e[i]),a&&s.push(a),o.push(i/2|0)}r=o.filter(((t,e,r)=>r.indexOf(t)===e)),o=[]}return s.filter((t=>!n.includes(t)))}return this.getProofIndices(e,Math.log2(t.length/2|0)).map((e=>t[e]))}getMultiProofForUnevenTree(t,e){e||(e=t,t=this.getLayers());let r=[],n=e;for(const e of t){const t=[];for(const r of n){if(r%2==0){const i=r+1;if(!n.includes(i)&&e[i]){t.push(e[i]);continue}}const i=r-1;n.includes(i)||!e[i]||t.push(e[i])}r=r.concat(t);const i=new Set;for(const t of n)t%2!=0?t%2!=0?i.add((t-1)/2):i.add((t+1)/2):i.add(t/2);n=Array.from(i)}return r}getHexMultiProof(t,e){return this.getMultiProof(t,e).map((t=>this.bufferToHex(t)))}getProofFlags(t,e){if(!Array.isArray(t)||t.length<=0)throw new Error("Invalid Inputs!");let r;if(r=t.every(Number.isInteger)?[...t].sort(((t,e)=>t===e?0:t>e?1:-1)):t.map((t=>this.bufferIndexOf(this.leaves,t,this.sortLeaves))).sort(((t,e)=>t===e?0:t>e?1:-1)),!r.every((t=>-1!==t)))throw new Error("Element does not exist in Merkle tree");const n=e.map((t=>this.bufferify(t))),i=[],s=[];for(let t=0;t<this.layers.length;t++){const e=this.layers[t];r=r.reduce(((t,r)=>{if(!i.includes(e[r])){const t=this.getPairNode(e,r),o=this.bufferArrayIncludes(n,e[r])||this.bufferArrayIncludes(n,t);t&&s.push(!o),i.push(e[r]),i.push(t)}return t.push(r/2|0),t}),[])}return s}verify(t,e,r){let n=this.bufferify(e);if(r=this.bufferify(r),!Array.isArray(t)||!e||!r)return!1;for(let e=0;e<t.length;e++){const r=t[e];let o=null,a=null;if("string"==typeof r)o=this.bufferify(r),a=!0;else if(Array.isArray(r))a=0===r[0],o=this.bufferify(r[1]);else if(i.Buffer.isBuffer(r))o=r,a=!0;else{if(!(r instanceof Object))throw new Error("Expected node to be of type string or object");o=this.bufferify(r.data),a="left"===r.position}const c=[];this.isBitcoinTree?(c.push(s.default(n)),c[a?"unshift":"push"](s.default(o)),n=this.hashFn(this.concatenator(c)),n=s.default(this.hashFn(n))):this.sortPairs?-1===i.Buffer.compare(n,o)?(c.push(n,o),n=this.hashFn(this.concatenator(c))):(c.push(o,n),n=this.hashFn(this.concatenator(c))):(c.push(n),c[a?"unshift":"push"](o),n=this.hashFn(this.concatenator(c)))}return 0===i.Buffer.compare(n,r)}verifyMultiProof(t,e,r,n,s){if(this.isUnevenTree())return this.verifyMultiProofForUnevenTree(t,e,r,n,s);const o=Math.ceil(Math.log2(n));t=this.bufferify(t),r=r.map((t=>this.bufferify(t))),s=s.map((t=>this.bufferify(t)));const a={};for(const[t,n]of this.zip(e,r))a[Math.pow(2,o)+t]=n;for(const[t,r]of this.zip(this.getProofIndices(e,o),s))a[t]=r;let c=Object.keys(a).map((t=>+t)).sort(((t,e)=>t-e));c=c.slice(0,c.length-1);let f=0;for(;f<c.length;){const t=c[f];if(t>=2&&{}.hasOwnProperty.call(a,1^t)){let e=[a[t-t%2],a[t-t%2+1]];this.sortPairs&&(e=e.sort(i.Buffer.compare));const r=e[1]?this.hashFn(this.concatenator(e)):e[0];a[t/2|0]=r,c.push(t/2|0)}f+=1}return!e.length||{}.hasOwnProperty.call(a,1)&&a[1].equals(t)}verifyMultiProofWithFlags(t,e,r,n){t=this.bufferify(t),e=e.map(this.bufferify),r=r.map(this.bufferify);const s=e.length,o=n.length,a=[];let c=0,f=0,h=0;for(let t=0;t<o;t++){const o=[n[t]?c<s?e[c++]:a[f++]:r[h++],c<s?e[c++]:a[f++]].sort(i.Buffer.compare);a[t]=this.hashFn(this.concatenator(o))}return 0===i.Buffer.compare(a[o-1],t)}verifyMultiProofForUnevenTree(t,e,r,n,i){t=this.bufferify(t),r=r.map((t=>this.bufferify(t))),i=i.map((t=>this.bufferify(t)));const s=this.calculateRootForUnevenTree(e,r,n,i);return t.equals(s)}getDepth(){return this.getLayers().length-1}getLayersAsObject(){const t=this.getLayers().map((t=>t.map((t=>this.bufferToHex(t,!1))))),e=[];for(let r=0;r<t.length;r++){const n=[];for(let i=0;i<t[r].length;i++){const s={[t[r][i]]:null};if(e.length){s[t[r][i]]={};const n=e.shift(),o=Object.keys(n)[0];if(s[t[r][i]][o]=n[o],e.length){const n=e.shift(),o=Object.keys(n)[0];s[t[r][i]][o]=n[o]}}n.push(s)}e.push(...n)}return e[0]}static verify(t,e,r,n=o.default,i={}){return new f([],n,i).verify(t,e,r)}static getMultiProof(t,e){return new f([]).getMultiProof(t,e)}resetTree(){this.leaves=[],this.layers=[]}getPairNode(t,e){const r=e%2==0?e+1:e-1;return r<t.length?t[r]:null}toTreeString(){const t=this.getLayersAsObject();return a.default.asTree(t,!0)}toString(){return this.toTreeString()}isUnevenTree(t){const e=(null==t?void 0:t.length)||this.getDepth();return!this.isPowOf2(e)}isPowOf2(t){return t&&!(t&t-1)}isValidLeafIndex(t){return t>=0&&t<this.getLeafCount()}calculateRootForUnevenTree(t,e,r,n){const i=this.zip(t,e).sort((([t],[e])=>t-e)),s=i.map((([t])=>t)),o=this.getProofIndicesForUnevenTree(s,r);let a=0;const c=[];for(let t=0;t<o.length;t++){const e=o[t],r=a;a+=e.length,c[t]=this.zip(e,n.slice(r,a))}const f=[i];for(let t=0;t<c.length;t++){const e=c[t].concat(f[t]).sort((([t],[e])=>t-e)).map((([,t])=>t)),r=f[t].map((([t])=>t)),n=[...new Set(r.map((t=>t%2==0?t/2:t%2==0?(t+1)/2:(t-1)/2)))],i=[];for(let t=0;t<n.length;t++){const r=n[t],s=e[2*t],o=e[2*t+1],a=o?this.hashFn(this.concatenator([s,o])):s;i.push([r,a])}f.push(i)}return f[f.length-1][0][1]}}e.MerkleTree=f,"undefined"!=typeof window&&(window.MerkleTree=f),e.default=f},477:()=>{},482:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.pad.Iso97971={pad:function(t,e){t.concat(n.lib.WordArray.create([2147483648],1)),n.pad.ZeroPadding.pad(t,e)},unpad:function(t){n.pad.ZeroPadding.unpad(t),t.sigBytes--}},n.pad.Iso97971)},737:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.MerkleTree=void 0;const i=n(r(259));e.MerkleTree=i.default;var s=r(9611);Object.defineProperty(e,"MerkleMountainRange",{enumerable:!0,get:function(){return s.MerkleMountainRange}});var o=r(9655);Object.defineProperty(e,"IncrementalMerkleTree",{enumerable:!0,get:function(){return o.IncrementalMerkleTree}});var a=r(9232);Object.defineProperty(e,"MerkleSumTree",{enumerable:!0,get:function(){return a.MerkleSumTree}});var c=r(7909);Object.defineProperty(e,"MerkleRadixTree",{enumerable:!0,get:function(){return c.MerkleRadixTree}});var f=r(4182);Object.defineProperty(e,"UnifiedBinaryTree",{enumerable:!0,get:function(){return f.UnifiedBinaryTree}}),e.default=i.default},754:function(t,e,r){var n,i,s;t.exports=(n=r(9021),s=(i=n).lib.WordArray,i.enc.Base64={stringify:function(t){var e=t.words,r=t.sigBytes,n=this._map;t.clamp();for(var i=[],s=0;s<r;s+=3)for(var o=(e[s>>>2]>>>24-s%4*8&255)<<16|(e[s+1>>>2]>>>24-(s+1)%4*8&255)<<8|e[s+2>>>2]>>>24-(s+2)%4*8&255,a=0;a<4&&s+.75*a<r;a++)i.push(n.charAt(o>>>6*(3-a)&63));var c=n.charAt(64);if(c)for(;i.length%4;)i.push(c);return i.join("")},parse:function(t){var e=t.length,r=this._map,n=this._reverseMap;if(!n){n=this._reverseMap=[];for(var i=0;i<r.length;i++)n[r.charCodeAt(i)]=i}var o=r.charAt(64);if(o){var a=t.indexOf(o);-1!==a&&(e=a)}return function(t,e,r){for(var n=[],i=0,o=0;o<e;o++)if(o%4){var a=r[t.charCodeAt(o-1)]<<o%4*2|r[t.charCodeAt(o)]>>>6-o%4*2;n[i>>>2]|=a<<24-i%4*8,i++}return s.create(n,i)}(t,e,n)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},n.enc.Base64)},816:(t,e,r)=>{e.u=function t(e,r){if(!(this instanceof t))return new t(e,r);this.buffer=n.from(e),this.type=r};var n=r(8204)},897:(t,e,r)=>{var n=r(816).u,i=r(8236),s=r(3398),o=r(8704);function a(){var t=this.options;return this.encode=function(t){var e=s.getWriteType(t);return function(t,r){var n=e[typeof r];if(!n)throw new Error('Unsupported type "'+typeof r+'": '+r);n(t,r)}}(t),t&&t.preset&&i.setExtPackers(this),this}o.install({addExtPacker:function(t,e,r){r=o.filter(r);var i=e.name;function s(e){return r&&(e=r(e)),new n(e,t)}i&&"Object"!==i?(this.extPackers||(this.extPackers={}))[i]=s:(this.extEncoderList||(this.extEncoderList=[])).unshift([e,s])},getExtPacker:function(t){var e=this.extPackers||(this.extPackers={}),r=t.constructor,n=r&&r.name&&e[r.name];if(n)return n;for(var i=this.extEncoderList||(this.extEncoderList=[]),s=i.length,o=0;o<s;o++){var a=i[o];if(r===a[0])return a[1]}},init:a}),e.preset=a.call(o.preset)},915:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SHA2=void 0;const n=r(9175);class i extends n.Hash{constructor(t,e,r,i){super(),this.blockLen=t,this.outputLen=e,this.padOffset=r,this.isLE=i,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(t),this.view=(0,n.createView)(this.buffer)}update(t){if(this.destroyed)throw new Error("instance is destroyed");const{view:e,buffer:r,blockLen:i,finished:s}=this;if(s)throw new Error("digest() was already called");const o=(t=(0,n.toBytes)(t)).length;for(let s=0;s<o;){const a=Math.min(i-this.pos,o-s);if(a!==i)r.set(t.subarray(s,s+a),this.pos),this.pos+=a,s+=a,this.pos===i&&(this.process(e,0),this.pos=0);else{const e=(0,n.createView)(t);for(;i<=o-s;s+=i)this.process(e,s)}}return this.length+=t.length,this.roundClean(),this}digestInto(t){if(this.destroyed)throw new Error("instance is destroyed");if(!(t instanceof Uint8Array)||t.length<this.outputLen)throw new Error("_Sha2: Invalid output buffer");if(this.finished)throw new Error("digest() was already called");this.finished=!0;const{buffer:e,view:r,blockLen:i,isLE:s}=this;let{pos:o}=this;e[o++]=128,this.buffer.subarray(o).fill(0),this.padOffset>i-o&&(this.process(r,0),o=0);for(let t=o;t<i;t++)e[t]=0;!function(t,e,r,n){if("function"==typeof t.setBigUint64)return t.setBigUint64(e,r,n);const i=BigInt(32),s=BigInt(4294967295),o=Number(r>>i&s),a=Number(r&s),c=n?4:0,f=n?0:4;t.setUint32(e+c,o,n),t.setUint32(e+f,a,n)}(r,i-8,BigInt(8*this.length),s),this.process(r,0);const a=(0,n.createView)(t);this.get().forEach(((t,e)=>a.setUint32(4*e,t,s)))}digest(){const{buffer:t,outputLen:e}=this;this.digestInto(t);const r=t.slice(0,e);return this.destroy(),r}_cloneInto(t){t||(t=new this.constructor),t.set(...this.get());const{blockLen:e,buffer:r,length:n,finished:i,destroyed:s,pos:o}=this;return t.length=n,t.pos=o,t.finished=i,t.destroyed=s,n%e&&t.buffer.set(r),t}}e.SHA2=i},924:function(t){function e(t){return t&&t.isBuffer&&t}t.exports=e("undefined"!=typeof Buffer&&Buffer)||e(this.Buffer)||e("undefined"!=typeof window&&window.Buffer)||this.Buffer},955:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib.BlockCipher,r=t.algo,i=[],s=[],o=[],a=[],c=[],f=[],h=[],u=[],l=[],d=[];!function(){for(var t=[],e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;var r=0,n=0;for(e=0;e<256;e++){var p=n^n<<1^n<<2^n<<3^n<<4;p=p>>>8^255&p^99,i[r]=p,s[p]=r;var y=t[r],g=t[y],v=t[g],w=257*t[p]^16843008*p;o[r]=w<<24|w>>>8,a[r]=w<<16|w>>>16,c[r]=w<<8|w>>>24,f[r]=w,w=16843009*v^65537*g^257*y^16843008*r,h[p]=w<<24|w>>>8,u[p]=w<<16|w>>>16,l[p]=w<<8|w>>>24,d[p]=w,r?(r=y^t[t[t[v^y]]],n^=t[t[n]]):r=n=1}}();var p=[0,1,2,4,8,16,32,64,128,27,54],y=r.AES=e.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var t=this._keyPriorReset=this._key,e=t.words,r=t.sigBytes/4,n=4*((this._nRounds=r+6)+1),s=this._keySchedule=[],o=0;o<n;o++)o<r?s[o]=e[o]:(f=s[o-1],o%r?r>6&&o%r==4&&(f=i[f>>>24]<<24|i[f>>>16&255]<<16|i[f>>>8&255]<<8|i[255&f]):(f=i[(f=f<<8|f>>>24)>>>24]<<24|i[f>>>16&255]<<16|i[f>>>8&255]<<8|i[255&f],f^=p[o/r|0]<<24),s[o]=s[o-r]^f);for(var a=this._invKeySchedule=[],c=0;c<n;c++){if(o=n-c,c%4)var f=s[o];else f=s[o-4];a[c]=c<4||o<=4?f:h[i[f>>>24]]^u[i[f>>>16&255]]^l[i[f>>>8&255]]^d[i[255&f]]}}},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._keySchedule,o,a,c,f,i)},decryptBlock:function(t,e){var r=t[e+1];t[e+1]=t[e+3],t[e+3]=r,this._doCryptBlock(t,e,this._invKeySchedule,h,u,l,d,s),r=t[e+1],t[e+1]=t[e+3],t[e+3]=r},_doCryptBlock:function(t,e,r,n,i,s,o,a){for(var c=this._nRounds,f=t[e]^r[0],h=t[e+1]^r[1],u=t[e+2]^r[2],l=t[e+3]^r[3],d=4,p=1;p<c;p++){var y=n[f>>>24]^i[h>>>16&255]^s[u>>>8&255]^o[255&l]^r[d++],g=n[h>>>24]^i[u>>>16&255]^s[l>>>8&255]^o[255&f]^r[d++],v=n[u>>>24]^i[l>>>16&255]^s[f>>>8&255]^o[255&h]^r[d++],w=n[l>>>24]^i[f>>>16&255]^s[h>>>8&255]^o[255&u]^r[d++];f=y,h=g,u=v,l=w}y=(a[f>>>24]<<24|a[h>>>16&255]<<16|a[u>>>8&255]<<8|a[255&l])^r[d++],g=(a[h>>>24]<<24|a[u>>>16&255]<<16|a[l>>>8&255]<<8|a[255&f])^r[d++],v=(a[u>>>24]<<24|a[l>>>16&255]<<16|a[f>>>8&255]<<8|a[255&h])^r[d++],w=(a[l>>>24]<<24|a[f>>>16&255]<<16|a[h>>>8&255]<<8|a[255&u])^r[d++],t[e]=y,t[e+1]=g,t[e+2]=v,t[e+3]=w},keySize:8});t.AES=e._createHelper(y)}(),n.AES)},1025:function(t,e,r){var n,i,s;t.exports=(i=(n=r(9021)).lib.Base,s=n.enc.Utf8,void(n.algo.HMAC=i.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=s.parse(e));var r=t.blockSize,n=4*r;e.sigBytes>n&&(e=t.finalize(e)),e.clamp();for(var i=this._oKey=e.clone(),o=this._iKey=e.clone(),a=i.words,c=o.words,f=0;f<r;f++)a[f]^=1549556828,c[f]^=909522486;i.sigBytes=o.sigBytes=n,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher,r=e.finalize(t);return e.reset(),e.finalize(this._oKey.clone().concat(r))}})))},1314:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sha256=void 0;const n=r(2623),i=r(2672);e.sha256=(0,i.wrapHash)(n.sha256)},1325:(t,e,r)=>{r(3294),r(897),e.createCodec=r(8704).createCodec},1380:function(t,e,r){var n;t.exports=(n=r(9021),r(3240),function(){var t=n,e=t.lib.Hasher,r=t.x64,i=r.Word,s=r.WordArray,o=t.algo;function a(){return i.create.apply(i,arguments)}var c=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),a(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),a(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],f=[];!function(){for(var t=0;t<80;t++)f[t]=a()}();var h=o.SHA512=e.extend({_doReset:function(){this._hash=new s.init([new i.init(1779033703,4089235720),new i.init(3144134277,2227873595),new i.init(1013904242,4271175723),new i.init(2773480762,1595750129),new i.init(1359893119,2917565137),new i.init(2600822924,725511199),new i.init(528734635,4215389547),new i.init(1541459225,327033209)])},_doProcessBlock:function(t,e){for(var r=this._hash.words,n=r[0],i=r[1],s=r[2],o=r[3],a=r[4],h=r[5],u=r[6],l=r[7],d=n.high,p=n.low,y=i.high,g=i.low,v=s.high,w=s.low,b=o.high,m=o.low,B=a.high,E=a.low,x=h.high,k=h.low,A=u.high,_=u.low,S=l.high,T=l.low,P=d,H=p,I=y,U=g,O=v,M=w,R=b,F=m,L=B,C=E,D=x,z=k,N=A,j=_,V=S,W=T,K=0;K<80;K++){var Y,X,$=f[K];if(K<16)X=$.high=0|t[e+2*K],Y=$.low=0|t[e+2*K+1];else{var q=f[K-15],G=q.high,Z=q.low,J=(G>>>1|Z<<31)^(G>>>8|Z<<24)^G>>>7,Q=(Z>>>1|G<<31)^(Z>>>8|G<<24)^(Z>>>7|G<<25),tt=f[K-2],et=tt.high,rt=tt.low,nt=(et>>>19|rt<<13)^(et<<3|rt>>>29)^et>>>6,it=(rt>>>19|et<<13)^(rt<<3|et>>>29)^(rt>>>6|et<<26),st=f[K-7],ot=st.high,at=st.low,ct=f[K-16],ft=ct.high,ht=ct.low;X=(X=(X=J+ot+((Y=Q+at)>>>0<Q>>>0?1:0))+nt+((Y+=it)>>>0<it>>>0?1:0))+ft+((Y+=ht)>>>0<ht>>>0?1:0),$.high=X,$.low=Y}var ut,lt=L&D^~L&N,dt=C&z^~C&j,pt=P&I^P&O^I&O,yt=H&U^H&M^U&M,gt=(P>>>28|H<<4)^(P<<30|H>>>2)^(P<<25|H>>>7),vt=(H>>>28|P<<4)^(H<<30|P>>>2)^(H<<25|P>>>7),wt=(L>>>14|C<<18)^(L>>>18|C<<14)^(L<<23|C>>>9),bt=(C>>>14|L<<18)^(C>>>18|L<<14)^(C<<23|L>>>9),mt=c[K],Bt=mt.high,Et=mt.low,xt=V+wt+((ut=W+bt)>>>0<W>>>0?1:0),kt=vt+yt;V=N,W=j,N=D,j=z,D=L,z=C,L=R+(xt=(xt=(xt=xt+lt+((ut+=dt)>>>0<dt>>>0?1:0))+Bt+((ut+=Et)>>>0<Et>>>0?1:0))+X+((ut+=Y)>>>0<Y>>>0?1:0))+((C=F+ut|0)>>>0<F>>>0?1:0)|0,R=O,F=M,O=I,M=U,I=P,U=H,P=xt+(gt+pt+(kt>>>0<vt>>>0?1:0))+((H=ut+kt|0)>>>0<ut>>>0?1:0)|0}p=n.low=p+H,n.high=d+P+(p>>>0<H>>>0?1:0),g=i.low=g+U,i.high=y+I+(g>>>0<U>>>0?1:0),w=s.low=w+M,s.high=v+O+(w>>>0<M>>>0?1:0),m=o.low=m+F,o.high=b+R+(m>>>0<F>>>0?1:0),E=a.low=E+C,a.high=B+L+(E>>>0<C>>>0?1:0),k=h.low=k+z,h.high=x+D+(k>>>0<z>>>0?1:0),_=u.low=_+j,u.high=A+N+(_>>>0<j>>>0?1:0),T=l.low=T+W,l.high=S+V+(T>>>0<W>>>0?1:0)},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,n=8*t.sigBytes;return e[n>>>5]|=128<<24-n%32,e[30+(n+128>>>10<<5)]=Math.floor(r/4294967296),e[31+(n+128>>>10<<5)]=r,t.sigBytes=4*e.length,this._process(),this._hash.toX32()},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t},blockSize:32});t.SHA512=e._createHelper(h),t.HmacSHA512=e._createHmacHelper(h)}(),n.SHA512)},1396:function(t,e,r){var n;t.exports=(n=r(9021),r(3240),r(6440),r(5503),r(754),r(4725),r(4636),r(5471),r(3009),r(6308),r(1380),r(9557),r(5953),r(8056),r(1025),r(19),r(9506),r(7165),r(2169),r(6939),r(6372),r(3797),r(8454),r(2073),r(4905),r(482),r(2155),r(8124),r(25),r(955),r(7628),r(7193),r(6298),r(2696),r(3128),n)},1611:t=>{!function(e){t.exports=e;var r="listeners",n={on:function(t,e){return o(this,t).push(e),this},once:function(t,e){var r=this;return n.originalListener=e,o(r,t).push(n),r;function n(){s.call(r,t,n),e.apply(this,arguments)}},off:s,emit:function(t,e){var r=this,n=o(r,t,!0);if(!n)return!1;var i=arguments.length;if(1===i)n.forEach((function(t){t.call(r)}));else if(2===i)n.forEach((function(t){t.call(r,e)}));else{var s=Array.prototype.slice.call(arguments,1);n.forEach((function(t){t.apply(r,s)}))}return!!n.length}};function i(t){for(var e in n)t[e]=n[e];return t}function s(t,e){var n,i=this;if(arguments.length){if(e){if(n=o(i,t,!0)){if(!(n=n.filter((function(t){return t!==e&&t.originalListener!==e}))).length)return s.call(i,t);i[r][t]=n}}else if((n=i[r])&&(delete n[t],!Object.keys(n).length))return s.call(i)}else delete i[r];return i}function o(t,e,n){if(!n||t[r]){var i=t[r]||(t[r]={});return i[e]||(i[e]=[])}}i(e.prototype),e.mixin=i}((function t(){if(!(this instanceof t))return new t}))},1658:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.decrypt=e.encrypt=void 0;const n=r(9301),i=r(2672);function s(t,e,r){if(!r.startsWith("aes-"))throw new Error(`AES submodule doesn't support mode ${r}`);if(16!==e.length)throw new Error("AES: wrong IV length");if(r.startsWith("aes-128")&&16!==t.length||r.startsWith("aes-256")&&32!==t.length)throw new Error("AES: wrong key length")}async function o(t,e,r){if(!n.crypto.web)throw new Error("Browser crypto not available.");let i;if(["aes-128-cbc","aes-256-cbc"].includes(t)&&(i="cbc"),["aes-128-ctr","aes-256-ctr"].includes(t)&&(i="ctr"),!i)throw new Error("AES: unsupported mode");return[await n.crypto.web.subtle.importKey("raw",e,{name:`AES-${i.toUpperCase()}`,length:8*e.length},!0,["encrypt","decrypt"]),{name:`aes-${i}`,iv:r,counter:r,length:64}]}async function a(t,e,r,a="aes-128-ctr",c=!0){if(s(e,r,a),n.crypto.web){const[i,s]=await o(a,e,r),f=await n.crypto.web.subtle.encrypt(s,i,t);let h=new Uint8Array(f);return c||"aes-cbc"!==s.name||t.length%16||(h=h.slice(0,-16)),h}if(n.crypto.node){const s=n.crypto.node.createCipheriv(a,e,r);return s.setAutoPadding(c),(0,i.concatBytes)(s.update(t),s.final())}throw new Error("The environment doesn't have AES module")}e.encrypt=a,e.decrypt=async function(t,e,r,c="aes-128-ctr",f=!0){if(s(e,r,c),n.crypto.web){const[s,h]=await o(c,e,r);if(!f&&"aes-cbc"===h.name){const n=await async function(t,e,r,n){const i=t.slice(-16);for(let t=0;t<16;t++)i[t]^=16^r[t];return(await a(i,e,r,n)).slice(0,16)}(t,e,r,c);t=(0,i.concatBytes)(t,n)}const u=await n.crypto.web.subtle.decrypt(h,s,t),l=new Uint8Array(u);if("aes-cbc"===h.name){const n=await a(l,e,r,c);if(!(0,i.equalsBytes)(n,t))throw new Error("AES: wrong padding")}return l}if(n.crypto.node){const s=n.crypto.node.createDecipheriv(c,e,r);return s.setAutoPadding(f),(0,i.concatBytes)(s.update(t),s.final())}throw new Error("The environment doesn't have AES module")}},1685:(t,e,r)=>{var n=r(251),i=r(8305),s=i.Uint64BE,o=i.Int64BE,a=r(4040).h,c=r(8204),f=c.global,h=c.hasBuffer&&"TYPED_ARRAY_SUPPORT"in f&&!f.TYPED_ARRAY_SUPPORT,u=c.hasBuffer&&f.prototype||{};function l(){var t=a.slice();return t[196]=d(196),t[197]=p(197),t[198]=y(198),t[199]=d(199),t[200]=p(200),t[201]=y(201),t[202]=g(202,4,u.writeFloatBE||b,!0),t[203]=g(203,8,u.writeDoubleBE||m,!0),t[204]=d(204),t[205]=p(205),t[206]=y(206),t[207]=g(207,8,v),t[208]=d(208),t[209]=p(209),t[210]=y(210),t[211]=g(211,8,w),t[217]=d(217),t[218]=p(218),t[219]=y(219),t[220]=p(220),t[221]=y(221),t[222]=p(222),t[223]=y(223),t}function d(t){return function(e,r){var n=e.reserve(2),i=e.buffer;i[n++]=t,i[n]=r}}function p(t){return function(e,r){var n=e.reserve(3),i=e.buffer;i[n++]=t,i[n++]=r>>>8,i[n]=r}}function y(t){return function(e,r){var n=e.reserve(5),i=e.buffer;i[n++]=t,i[n++]=r>>>24,i[n++]=r>>>16,i[n++]=r>>>8,i[n]=r}}function g(t,e,r,n){return function(i,s){var o=i.reserve(e+1);i.buffer[o++]=t,r.call(i.buffer,s,o,n)}}function v(t,e){new s(this,e,t)}function w(t,e){new o(this,e,t)}function b(t,e){n.write(this,t,e,!1,23,4)}function m(t,e){n.write(this,t,e,!1,52,8)}e.getWriteToken=function(t){return t&&t.uint8array?((e=l())[202]=g(202,4,b),e[203]=g(203,8,m),e):h||c.hasBuffer&&t&&t.safe?function(){var t=a.slice();return t[196]=g(196,1,f.prototype.writeUInt8),t[197]=g(197,2,f.prototype.writeUInt16BE),t[198]=g(198,4,f.prototype.writeUInt32BE),t[199]=g(199,1,f.prototype.writeUInt8),t[200]=g(200,2,f.prototype.writeUInt16BE),t[201]=g(201,4,f.prototype.writeUInt32BE),t[202]=g(202,4,f.prototype.writeFloatBE),t[203]=g(203,8,f.prototype.writeDoubleBE),t[204]=g(204,1,f.prototype.writeUInt8),t[205]=g(205,2,f.prototype.writeUInt16BE),t[206]=g(206,4,f.prototype.writeUInt32BE),t[207]=g(207,8,v),t[208]=g(208,1,f.prototype.writeInt8),t[209]=g(209,2,f.prototype.writeInt16BE),t[210]=g(210,4,f.prototype.writeInt32BE),t[211]=g(211,8,w),t[217]=g(217,1,f.prototype.writeUInt8),t[218]=g(218,2,f.prototype.writeUInt16BE),t[219]=g(219,4,f.prototype.writeUInt32BE),t[220]=g(220,2,f.prototype.writeUInt16BE),t[221]=g(221,4,f.prototype.writeUInt32BE),t[222]=g(222,2,f.prototype.writeUInt16BE),t[223]=g(223,4,f.prototype.writeUInt32BE),t}():l();var e}},2004:(t,e,r)=>{var n=r(7970);function i(t){var e,r=new Array(256);for(e=0;e<=127;e++)r[e]=s(e);for(e=128;e<=143;e++)r[e]=a(e-128,t.map);for(e=144;e<=159;e++)r[e]=a(e-144,t.array);for(e=160;e<=191;e++)r[e]=a(e-160,t.str);for(r[192]=s(null),r[193]=null,r[194]=s(!1),r[195]=s(!0),r[196]=o(t.uint8,t.bin),r[197]=o(t.uint16,t.bin),r[198]=o(t.uint32,t.bin),r[199]=o(t.uint8,t.ext),r[200]=o(t.uint16,t.ext),r[201]=o(t.uint32,t.ext),r[202]=t.float32,r[203]=t.float64,r[204]=t.uint8,r[205]=t.uint16,r[206]=t.uint32,r[207]=t.uint64,r[208]=t.int8,r[209]=t.int16,r[210]=t.int32,r[211]=t.int64,r[212]=a(1,t.ext),r[213]=a(2,t.ext),r[214]=a(4,t.ext),r[215]=a(8,t.ext),r[216]=a(16,t.ext),r[217]=o(t.uint8,t.str),r[218]=o(t.uint16,t.str),r[219]=o(t.uint32,t.str),r[220]=o(t.uint16,t.array),r[221]=o(t.uint32,t.array),r[222]=o(t.uint16,t.map),r[223]=o(t.uint32,t.map),e=224;e<=255;e++)r[e]=s(e-256);return r}function s(t){return function(){return t}}function o(t,e){return function(r){var n=t(r);return e(r,n)}}function a(t,e){return function(r){return e(r,t)}}e.getReadToken=function(t){var e=n.getReadFormat(t);return t&&t.useraw?function(t){var e,r=i(t).slice();for(r[217]=r[196],r[218]=r[197],r[219]=r[198],e=160;e<=191;e++)r[e]=a(e-160,t.bin);return r}(e):i(e)}},2073:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.pad.AnsiX923={pad:function(t,e){var r=t.sigBytes,n=4*e,i=n-r%n,s=r+i-1;t.clamp(),t.words[s>>>2]|=i<<24-s%4*8,t.sigBytes+=i},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},n.pad.Ansix923)},2155:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.pad.ZeroPadding={pad:function(t,e){var r=4*e;t.clamp(),t.sigBytes+=r-(t.sigBytes%r||r)},unpad:function(t){var e=t.words,r=t.sigBytes-1;for(r=t.sigBytes-1;r>=0;r--)if(e[r>>>2]>>>24-r%4*8&255){t.sigBytes=r+1;break}}},n.pad.ZeroPadding)},2169:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.mode.CFB=function(){var t=n.lib.BlockCipherMode.extend();function e(t,e,r,n){var i,s=this._iv;s?(i=s.slice(0),this._iv=void 0):i=this._prevBlock,n.encryptBlock(i,0);for(var o=0;o<r;o++)t[e+o]^=i[o]}return t.Encryptor=t.extend({processBlock:function(t,r){var n=this._cipher,i=n.blockSize;e.call(this,t,r,i,n),this._prevBlock=t.slice(r,r+i)}}),t.Decryptor=t.extend({processBlock:function(t,r){var n=this._cipher,i=n.blockSize,s=t.slice(r,r+i);e.call(this,t,r,i,n),this._prevBlock=s}}),t}(),n.mode.CFB)},2539:function(t){t.exports=function(){function t(e,r,n,i,s,o,a){var c,f,h="",u=0,l=i.slice(0);if(l.push([r,n])&&i.length>0&&(i.forEach((function(t,e){e>0&&(h+=(t[1]?" ":"│")+"  "),f||t[0]!==r||(f=!0)})),h+=function(t,e){return(e?"└":"├")+(t?"─ ":"──┐")}(e,n)+e,s&&("object"!=typeof r||r instanceof Date)&&(h+=": "+r),f&&(h+=" (circular ref.)"),a(h)),!f&&"object"==typeof r){var d=function(t,e){var r=[];for(var n in t)t.hasOwnProperty(n)&&(e&&"function"==typeof t[n]||r.push(n));return r}(r,o);d.forEach((function(e){c=++u===d.length,t(e,r[e],c,l,s,o,a)}))}}return{asLines:function(e,r,n,i){t(".",e,!1,[],r,"function"!=typeof n&&n,i||n)},asTree:function(e,r,n){var i="";return t(".",e,!1,[],r,n,(function(t){i+=t+"\n"})),i}}}()},2623:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sha256=void 0;const n=r(915),i=r(9175),s=(t,e,r)=>t&e^t&r^e&r,o=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),a=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),c=new Uint32Array(64);class f extends n.SHA2{constructor(){super(64,32,8,!1),this.A=0|a[0],this.B=0|a[1],this.C=0|a[2],this.D=0|a[3],this.E=0|a[4],this.F=0|a[5],this.G=0|a[6],this.H=0|a[7]}get(){const{A:t,B:e,C:r,D:n,E:i,F:s,G:o,H:a}=this;return[t,e,r,n,i,s,o,a]}set(t,e,r,n,i,s,o,a){this.A=0|t,this.B=0|e,this.C=0|r,this.D=0|n,this.E=0|i,this.F=0|s,this.G=0|o,this.H=0|a}process(t,e){for(let r=0;r<16;r++,e+=4)c[r]=t.getUint32(e,!1);for(let t=16;t<64;t++){const e=c[t-15],r=c[t-2],n=(0,i.rotr)(e,7)^(0,i.rotr)(e,18)^e>>>3,s=(0,i.rotr)(r,17)^(0,i.rotr)(r,19)^r>>>10;c[t]=s+c[t-7]+n+c[t-16]|0}let{A:r,B:n,C:a,D:f,E:h,F:u,G:l,H:d}=this;for(let t=0;t<64;t++){const e=d+((0,i.rotr)(h,6)^(0,i.rotr)(h,11)^(0,i.rotr)(h,25))+((p=h)&u^~p&l)+o[t]+c[t]|0,y=((0,i.rotr)(r,2)^(0,i.rotr)(r,13)^(0,i.rotr)(r,22))+s(r,n,a)|0;d=l,l=u,u=h,h=f+e|0,f=a,a=n,n=r,r=e+y|0}var p;r=r+this.A|0,n=n+this.B|0,a=a+this.C|0,f=f+this.D|0,h=h+this.E|0,u=u+this.F|0,l=l+this.G|0,d=d+this.H|0,this.set(r,n,a,f,h,u,l,d)}roundClean(){c.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}e.sha256=(0,i.wrapConstructor)((()=>new f))},2672:(t,e,r)=>{"use strict";t=r.nmd(t),Object.defineProperty(e,"__esModule",{value:!0}),e.crypto=e.wrapHash=e.equalsBytes=e.bytesToUtf8=e.utf8ToBytes=e.createView=e.hexToBytes=e.concatBytes=e.toHex=e.bytesToHex=e.assertBytes=e.assertBool=void 0;const n=r(9175);var i=r(9175);Object.defineProperty(e,"assertBool",{enumerable:!0,get:function(){return i.assertBool}}),Object.defineProperty(e,"assertBytes",{enumerable:!0,get:function(){return i.assertBytes}}),Object.defineProperty(e,"bytesToHex",{enumerable:!0,get:function(){return i.bytesToHex}}),Object.defineProperty(e,"toHex",{enumerable:!0,get:function(){return i.bytesToHex}}),Object.defineProperty(e,"concatBytes",{enumerable:!0,get:function(){return i.concatBytes}}),Object.defineProperty(e,"hexToBytes",{enumerable:!0,get:function(){return i.hexToBytes}}),Object.defineProperty(e,"createView",{enumerable:!0,get:function(){return i.createView}}),Object.defineProperty(e,"utf8ToBytes",{enumerable:!0,get:function(){return i.utf8ToBytes}}),e.bytesToUtf8=function(t){if(!(t instanceof Uint8Array))throw new TypeError("bytesToUtf8 expected Uint8Array, got "+typeof t);return(new TextDecoder).decode(t)},e.equalsBytes=function(t,e){if(t.length!==e.length)return!1;for(let r=0;r<t.length;r++)if(t[r]!==e[r])return!1;return!0},e.wrapHash=function(t){return e=>((0,n.assertBytes)(e),t(e))},e.crypto=(()=>{const e="object"==typeof self&&"crypto"in self?self.crypto:void 0,r="function"==typeof t.require&&t.require.bind(t);return{node:r&&!e?r("crypto"):void 0,web:e}})()},2696:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib.StreamCipher,r=t.algo,i=[],s=[],o=[],a=r.RabbitLegacy=e.extend({_doReset:function(){var t=this._key.words,e=this.cfg.iv,r=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],n=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];this._b=0;for(var i=0;i<4;i++)c.call(this);for(i=0;i<8;i++)n[i]^=r[i+4&7];if(e){var s=e.words,o=s[0],a=s[1],f=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),h=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),u=f>>>16|4294901760&h,l=h<<16|65535&f;for(n[0]^=f,n[1]^=u,n[2]^=h,n[3]^=l,n[4]^=f,n[5]^=u,n[6]^=h,n[7]^=l,i=0;i<4;i++)c.call(this)}},_doProcessBlock:function(t,e){var r=this._X;c.call(this),i[0]=r[0]^r[5]>>>16^r[3]<<16,i[1]=r[2]^r[7]>>>16^r[5]<<16,i[2]=r[4]^r[1]>>>16^r[7]<<16,i[3]=r[6]^r[3]>>>16^r[1]<<16;for(var n=0;n<4;n++)i[n]=16711935&(i[n]<<8|i[n]>>>24)|4278255360&(i[n]<<24|i[n]>>>8),t[e+n]^=i[n]},blockSize:4,ivSize:2});function c(){for(var t=this._X,e=this._C,r=0;r<8;r++)s[r]=e[r];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<s[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<s[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<s[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<s[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<s[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<s[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<s[6]>>>0?1:0)|0,this._b=e[7]>>>0<s[7]>>>0?1:0,r=0;r<8;r++){var n=t[r]+e[r],i=65535&n,a=n>>>16,c=((i*i>>>17)+i*a>>>15)+a*a,f=((4294901760&n)*n|0)+((65535&n)*n|0);o[r]=c^f}t[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,t[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,t[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,t[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,t[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,t[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,t[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,t[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}t.RabbitLegacy=e._createHelper(a)}(),n.RabbitLegacy)},2847:(t,e,r)=>{var n=r(8204),i=n.global,s=t.exports=n.hasBuffer?o(0):[];function o(t){return new i(t)}s.alloc=n.hasBuffer&&i.alloc||o,s.concat=n.concat,s.from=function(t){if(!n.isBuffer(t)&&n.isView(t))t=n.Uint8Array.from(t);else if(n.isArrayBuffer(t))t=new Uint8Array(t);else{if("string"==typeof t)return n.from.call(s,t);if("number"==typeof t)throw new TypeError('"value" argument must not be a number')}return i.from&&1!==i.from.length?i.from(t):new i(t)}},3009:function(t,e,r){var n;t.exports=(n=r(9021),function(t){var e=n,r=e.lib,i=r.WordArray,s=r.Hasher,o=e.algo,a=[],c=[];!function(){function e(e){for(var r=t.sqrt(e),n=2;n<=r;n++)if(!(e%n))return!1;return!0}function r(t){return 4294967296*(t-(0|t))|0}for(var n=2,i=0;i<64;)e(n)&&(i<8&&(a[i]=r(t.pow(n,.5))),c[i]=r(t.pow(n,1/3)),i++),n++}();var f=[],h=o.SHA256=s.extend({_doReset:function(){this._hash=new i.init(a.slice(0))},_doProcessBlock:function(t,e){for(var r=this._hash.words,n=r[0],i=r[1],s=r[2],o=r[3],a=r[4],h=r[5],u=r[6],l=r[7],d=0;d<64;d++){if(d<16)f[d]=0|t[e+d];else{var p=f[d-15],y=(p<<25|p>>>7)^(p<<14|p>>>18)^p>>>3,g=f[d-2],v=(g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10;f[d]=y+f[d-7]+v+f[d-16]}var w=n&i^n&s^i&s,b=(n<<30|n>>>2)^(n<<19|n>>>13)^(n<<10|n>>>22),m=l+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&h^~a&u)+c[d]+f[d];l=u,u=h,h=a,a=o+m|0,o=s,s=i,i=n,n=m+(b+w)|0}r[0]=r[0]+n|0,r[1]=r[1]+i|0,r[2]=r[2]+s|0,r[3]=r[3]+o|0,r[4]=r[4]+a|0,r[5]=r[5]+h|0,r[6]=r[6]+u|0,r[7]=r[7]+l|0},_doFinalize:function(){var e=this._data,r=e.words,n=8*this._nDataBytes,i=8*e.sigBytes;return r[i>>>5]|=128<<24-i%32,r[14+(i+64>>>9<<4)]=t.floor(n/4294967296),r[15+(i+64>>>9<<4)]=n,e.sigBytes=4*r.length,this._process(),this._hash},clone:function(){var t=s.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=s._createHelper(h),e.HmacSHA256=s._createHmacHelper(h)}(Math),n.SHA256)},3043:(t,e,r)=>{var n,i=r(7179);e.copy=f,e.slice=h,e.toString=function(t,e,r){return(!a&&s.isBuffer(this)?this.toString:i.toString).apply(this,arguments)},e.write=(n="write",function(){return(this[n]||i[n]).apply(this,arguments)});var s=r(8204),o=s.global,a=s.hasBuffer&&"TYPED_ARRAY_SUPPORT"in o,c=a&&!o.TYPED_ARRAY_SUPPORT;function f(t,e,r,n){var o=s.isBuffer(this),a=s.isBuffer(t);if(o&&a)return this.copy(t,e,r,n);if(c||o||a||!s.isView(this)||!s.isView(t))return i.copy.call(this,t,e,r,n);var f=r||null!=n?h.call(this,r,n):this;return t.set(f,e),f.length}function h(t,e){var r=this.slice||!c&&this.subarray;if(r)return r.call(this,t,e);var n=s.alloc.call(this,e-t);return f.call(this,n,0,t,e),n}},3128:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib.BlockCipher,r=t.algo;const i=16,s=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731],o=[[3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946],[1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055],[3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504],[976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462]];var a={pbox:[],sbox:[]};function c(t,e){let r=e>>24&255,n=e>>16&255,i=e>>8&255,s=255&e,o=t.sbox[0][r]+t.sbox[1][n];return o^=t.sbox[2][i],o+=t.sbox[3][s],o}function f(t,e,r){let n,s=e,o=r;for(let e=0;e<i;++e)s^=t.pbox[e],o=c(t,s)^o,n=s,s=o,o=n;return n=s,s=o,o=n,o^=t.pbox[i],s^=t.pbox[17],{left:s,right:o}}var h=r.Blowfish=e.extend({_doReset:function(){if(this._keyPriorReset!==this._key){var t=this._keyPriorReset=this._key,e=t.words,r=t.sigBytes/4;!function(t,e,r){for(let e=0;e<4;e++){t.sbox[e]=[];for(let r=0;r<256;r++)t.sbox[e][r]=o[e][r]}let n=0;for(let i=0;i<18;i++)t.pbox[i]=s[i]^e[n],n++,n>=r&&(n=0);let i=0,a=0,c=0;for(let e=0;e<18;e+=2)c=f(t,i,a),i=c.left,a=c.right,t.pbox[e]=i,t.pbox[e+1]=a;for(let e=0;e<4;e++)for(let r=0;r<256;r+=2)c=f(t,i,a),i=c.left,a=c.right,t.sbox[e][r]=i,t.sbox[e][r+1]=a}(a,e,r)}},encryptBlock:function(t,e){var r=f(a,t[e],t[e+1]);t[e]=r.left,t[e+1]=r.right},decryptBlock:function(t,e){var r=function(t,e,r){let n,i=e,s=r;for(let e=17;e>1;--e)i^=t.pbox[e],s=c(t,i)^s,n=i,i=s,s=n;return n=i,i=s,s=n,s^=t.pbox[1],i^=t.pbox[0],{left:i,right:s}}(a,t[e],t[e+1]);t[e]=r.left,t[e+1]=r.right},blockSize:2,keySize:4,ivSize:2});t.Blowfish=e._createHelper(h)}(),n.Blowfish)},3240:function(t,e,r){var n,i,s,o,a,c;t.exports=(n=r(9021),s=(i=n).lib,o=s.Base,a=s.WordArray,(c=i.x64={}).Word=o.extend({init:function(t,e){this.high=t,this.low=e}}),c.WordArray=o.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:8*t.length},toX32:function(){for(var t=this.words,e=t.length,r=[],n=0;n<e;n++){var i=t[n];r.push(i.high),r.push(i.low)}return a.create(r,this.sigBytes)},clone:function(){for(var t=o.clone.call(this),e=t.words=this.words.slice(0),r=e.length,n=0;n<r;n++)e[n]=e[n].clone();return t}}),n)},3294:(t,e,r)=>{var n=r(816).u,i=r(5623),s=r(7970).readUint8,o=r(2004),a=r(8704);function c(){var t=this.options;return this.decode=function(t){var e=o.getReadToken(t);return function(t){var r=s(t),n=e[r];if(!n)throw new Error("Invalid type: "+(r?"0x"+r.toString(16):r));return n(t)}}(t),t&&t.preset&&i.setExtUnpackers(this),this}a.install({addExtUnpacker:function(t,e){(this.extUnpackers||(this.extUnpackers=[]))[t]=a.filter(e)},getExtUnpacker:function(t){return(this.extUnpackers||(this.extUnpackers=[]))[t]||function(e){return new n(e,t)}},init:c}),e.preset=c.call(a.preset)},3357:(t,e,r)=>{e.D=i;var n=r(897).preset;function i(t){if(!(this instanceof i))return new i(t);if(t&&(this.options=t,t.codec)){var e=this.codec=t.codec;e.bufferish&&(this.bufferish=e.bufferish)}}r(3614).w.mixin(i.prototype),i.prototype.codec=n,i.prototype.write=function(t){this.codec.encode(this,t)}},3398:(t,e,r)=>{var n=r(4634),i=r(8305),s=i.Uint64BE,o=i.Int64BE,a=r(8204),c=r(3043),f=r(1685),h=r(4040).h,u=r(816).u,l="undefined"!=typeof Uint8Array,d="undefined"!=typeof Map,p=[];p[1]=212,p[2]=213,p[4]=214,p[8]=215,p[16]=216,e.getWriteType=function(t){var e,r=f.getWriteToken(t),i=t&&t.useraw,y=l&&t&&t.binarraybuffer,g=y?a.isArrayBuffer:a.isBuffer,v=y?function(t,e){B(t,new Uint8Array(e))}:B,w=d&&t&&t.usemap?function(t,e){if(!(e instanceof Map))return E(t,e);var n=e.size;r[n<16?128+n:n<=65535?222:223](t,n);var i=t.codec.encode;e.forEach((function(e,r,n){i(t,r),i(t,e)}))}:E;return{boolean:function(t,e){r[e?195:194](t,e)},function:m,number:function(t,e){var n=0|e;e===n?r[-32<=n&&n<=127?255&n:0<=n?n<=255?204:n<=65535?205:206:-128<=n?208:-32768<=n?209:210](t,n):r[203](t,e)},object:i?function(t,e){if(g(e))return function(t,e){var n=e.length;r[n<32?160+n:n<=65535?218:219](t,n),t.send(e)}(t,e);b(t,e)}:b,string:(e=i?function(t){return t<32?1:t<=65535?3:5}:function(t){return t<32?1:t<=255?2:t<=65535?3:5},function(t,n){var i=n.length,s=5+3*i;t.offset=t.reserve(s);var o=t.buffer,a=e(i),f=t.offset+a;i=c.write.call(o,n,f);var h=e(i);if(a!==h){var u=f+h-a,l=f+i;c.copy.call(o,o,u,f,l)}r[1===h?160+i:h<=3?215+h:219](t,i),t.offset+=i}),symbol:m,undefined:m};function b(t,e){if(null===e)return m(t,e);if(g(e))return v(t,e);if(n(e))return function(t,e){var n=e.length;r[n<16?144+n:n<=65535?220:221](t,n);for(var i=t.codec.encode,s=0;s<n;s++)i(t,e[s])}(t,e);if(s.isUint64BE(e))return function(t,e){r[207](t,e.toArray())}(t,e);if(o.isInt64BE(e))return function(t,e){r[211](t,e.toArray())}(t,e);var i=t.codec.getExtPacker(e);if(i&&(e=i(e)),e instanceof u)return function(t,e){var n=e.buffer,i=n.length,s=p[i]||(i<255?199:i<=65535?200:201);r[s](t,i),h[e.type](t),t.send(n)}(t,e);w(t,e)}function m(t,e){r[192](t,e)}function B(t,e){var n=e.length;r[n<255?196:n<=65535?197:198](t,n),t.send(e)}function E(t,e){var n=Object.keys(e),i=n.length;r[i<16?128+i:i<=65535?222:223](t,i);var s=t.codec.encode;n.forEach((function(r){s(t,r),s(t,e[r])}))}}},3614:(t,e,r)=>{e.I=s,e.w=o;var n=r(8204),i="BUFFER_SHORTAGE";function s(){if(!(this instanceof s))return new s}function o(){if(!(this instanceof o))return new o}function a(){return this.buffers&&this.buffers.length?(this.flush(),this.pull()):this.fetch()}function c(t){(this.buffers||(this.buffers=[])).push(t)}function f(t){return function(e){for(var r in t)e[r]=t[r];return e}}s.mixin=f({bufferish:n,write:function(t){var e=this.offset?n.prototype.slice.call(this.buffer,this.offset):this.buffer;this.buffer=e?t?this.bufferish.concat([e,t]):e:t,this.offset=0},fetch:function(){throw new Error("method not implemented: fetch()")},flush:function(){for(;this.offset<this.buffer.length;){var t,e=this.offset;try{t=this.fetch()}catch(t){if(t&&t.message!=i)throw t;this.offset=e;break}this.push(t)}},push:c,pull:function(){return(this.buffers||(this.buffers=[])).shift()},read:a,reserve:function(t){var e=this.offset,r=e+t;if(r>this.buffer.length)throw new Error(i);return this.offset=r,e},offset:0}),s.mixin(s.prototype),o.mixin=f({bufferish:n,write:function(){throw new Error("method not implemented: write()")},fetch:function(){var t=this.start;if(t<this.offset){var e=this.start=this.offset;return n.prototype.slice.call(this.buffer,t,e)}},flush:function(){for(;this.start<this.offset;){var t=this.fetch();t&&this.push(t)}},push:c,pull:function(){var t=this.buffers||(this.buffers=[]),e=t.length>1?this.bufferish.concat(t):t[0];return t.length=0,e},read:a,reserve:function(t){var e=0|t;if(this.buffer){var r=this.buffer.length,n=0|this.offset,i=n+e;if(i<r)return this.offset=i,n;this.flush(),t=Math.max(t,Math.min(2*r,this.maxBufferSize))}return t=Math.max(t,this.minBufferSize),this.buffer=this.bufferish.alloc(t),this.start=0,this.offset=e,0},send:function(t){var e=t.length;if(e>this.minBufferSize)this.flush(),this.push(t);else{var r=this.reserve(e);n.prototype.copy.call(t,this.buffer,r)}},maxBufferSize:65536,minBufferSize:2048,offset:0,start:0}),o.mixin(o.prototype)},3785:(t,e,r)=>{e.n=i;var n=r(3294).preset;function i(t){if(!(this instanceof i))return new i(t);if(t&&(this.options=t,t.codec)){var e=this.codec=t.codec;e.bufferish&&(this.bufferish=e.bufferish)}}r(3614).I.mixin(i.prototype),i.prototype.codec=n,i.prototype.fetch=function(){return this.codec.decode(this)}},3797:function(t,e,r){var n,i,s;t.exports=(s=r(9021),r(7165),s.mode.OFB=(i=(n=s.lib.BlockCipherMode.extend()).Encryptor=n.extend({processBlock:function(t,e){var r=this._cipher,n=r.blockSize,i=this._iv,s=this._keystream;i&&(s=this._keystream=i.slice(0),this._iv=void 0),r.encryptBlock(s,0);for(var o=0;o<n;o++)t[e+o]^=s[o]}}),n.Decryptor=i,n),s.mode.OFB)},4040:(t,e)=>{for(var r=e.h=new Array(256),n=0;n<=255;n++)r[n]=i(n);function i(t){return function(e){var r=e.reserve(1);e.buffer[r]=t}}},4182:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UnifiedBinaryTree=e.InternalNode=e.StemNode=e.chunkifyCode=e.getTreeKeyForCodeChunk=e.getTreeKeyForStorageSlot=e.getTreeKeyForCodeHash=e.getTreeKeyForBasicData=e.getTreeKey=e.treeHash=e.oldStyleAddressToAddress32=e.push32=e.push1=e.pushOffset=e.MAIN_STORAGE_OFFSET=e.STEM_SUBTREE_WIDTH=e.CODE_OFFSET=e.HEADER_STORAGE_OFFSET=e.CODE_HASH_LEAF_KEY=e.BASIC_DATA_LEAF_KEY=void 0;const n=r(6765),i=r(7284);function s(t){return i.Base.bufferifyFn(t)}function o(t,e,r,i){if(32!==t.length)throw new Error("Address must be 32 bytes.");const o=s(i),a=n.Buffer.alloc(32,0);a.writeUInt32LE(e,0);const c=o(n.Buffer.concat([t,a]),i).subarray(0,31);return n.Buffer.concat([c,n.Buffer.from([r])])}e.BASIC_DATA_LEAF_KEY=0,e.CODE_HASH_LEAF_KEY=1,e.HEADER_STORAGE_OFFSET=64,e.CODE_OFFSET=128,e.STEM_SUBTREE_WIDTH=256,e.MAIN_STORAGE_OFFSET=256,e.pushOffset=95,e.push1=e.pushOffset+1,e.push32=e.pushOffset+32,e.oldStyleAddressToAddress32=function(t){if(20!==t.length)throw new Error("Address must be 20 bytes.");return n.Buffer.concat([n.Buffer.alloc(12,0),t])},e.treeHash=function(t,e){return s(e)(t)},e.getTreeKey=o,e.getTreeKeyForBasicData=function(t,r){return o(t,0,e.BASIC_DATA_LEAF_KEY,r)},e.getTreeKeyForCodeHash=function(t,r){return o(t,0,e.CODE_HASH_LEAF_KEY,r)},e.getTreeKeyForStorageSlot=function(t,r,n){let i;return i=r<e.CODE_OFFSET-e.HEADER_STORAGE_OFFSET?e.HEADER_STORAGE_OFFSET+r:e.MAIN_STORAGE_OFFSET+r,o(t,Math.floor(i/e.STEM_SUBTREE_WIDTH),i%e.STEM_SUBTREE_WIDTH,n)},e.getTreeKeyForCodeChunk=function(t,r,n){const i=e.CODE_OFFSET+r;return o(t,Math.floor(i/e.STEM_SUBTREE_WIDTH),i%e.STEM_SUBTREE_WIDTH,n)},e.chunkifyCode=function(t){const r=t.length%31;0!==r&&(t=n.Buffer.concat([t,n.Buffer.alloc(31-r,0)]));const i=new Array(t.length+32).fill(0);let s=0;for(;s<t.length;){const r=t[s];let n=0;r>=e.push1&&r<=e.push32&&(n=r-e.pushOffset),s+=1;for(let t=0;t<n;t++)i[s+t]=n-t;s+=n}const o=[];for(let e=0;e<t.length;e+=31){const r=Math.min(i[e],31),s=n.Buffer.concat([n.Buffer.from([r]),t.slice(e,e+31)]);o.push(s)}return o};class a{constructor(t){if(this.nodeType="stem",31!==t.length)throw new Error("Stem must be 31 bytes.");this.stem=t,this.values=new Array(256).fill(null)}setValue(t,e){if(32!==e.length)throw new Error("Value must be 32 bytes.");this.values[t]=e}}e.StemNode=a;class c{constructor(){this.left=null,this.right=null,this.nodeType="internal"}}e.InternalNode=c;class f{constructor(t){this.root=null,this.hashFn=i.Base.bufferifyFn(t)}insert(t,e){if(32!==t.length)throw new Error("Key must be 32 bytes.");if(32!==e.length)throw new Error("Value must be 32 bytes.");const r=t.slice(0,31),n=t[31];if(null===this.root)return this.root=new a(r),void this.root.setValue(n,e);this.root=this.insertRecursive(this.root,r,n,e,0)}insertRecursive(t,e,r,n,i){if(i>=248)throw new Error("Depth must be less than 248.");if(null===t){const t=new a(e);return t.setValue(r,n),t}const s=this.bytesToBits(e);if(t instanceof a){if(t.stem.equals(e))return t.setValue(r,n),t;const o=this.bytesToBits(t.stem);return this.splitLeaf(t,s,o,r,n,i)}return 0===s[i]?t.left=this.insertRecursive(t.left,e,r,n,i+1):t.right=this.insertRecursive(t.right,e,r,n,i+1),t}bytesToBits(t){const e=[];for(const r of t)for(let t=0;t<8;t++)e.push(r>>7-t&1);return e}bitsToBytes(t){if(t.length%8!=0)throw new Error("Number of bits must be a multiple of 8.");const e=[];for(let r=0;r<t.length;r+=8){let n=0;for(let e=0;e<8;e++)n|=t[r+e]<<7-e;e.push(n)}return n.Buffer.from(e)}hashData(t){const e=n.Buffer.alloc(64,0),r=n.Buffer.alloc(32,0);if(null===t||t.equals(e))return r;if(32!==t.length&&64!==t.length)throw new Error("Data must be 32 or 64 bytes.");return this.hashFn(t)}merkelize(){const t=e=>{const r=n.Buffer.alloc(32,0);if(null===e)return r;if(e instanceof c){const r=t(e.left),i=t(e.right);return this.hashData(n.Buffer.concat([r,i]))}const i=e.values.map((t=>this.hashData(t)));for(;i.length>1;){const t=[];for(let e=0;e<i.length;e+=2)t.push(this.hashData(n.Buffer.concat([i[e],i[e+1]])));i.splice(0,i.length,...t)}return this.hashData(n.Buffer.concat([e.stem,n.Buffer.from([0]),i[0]]))};return t(this.root)}update(t,e){this.insert(t,e)}insertBatch(t){for(const{key:e,value:r}of t)this.insert(e,r)}serialize(){const t={root:function t(e){return e?e instanceof a?{nodeType:"stem",stem:e.stem.toString("hex"),values:e.values.map((t=>t?t.toString("hex"):null))}:{nodeType:"internal",left:t(e.left),right:t(e.right)}:null}(this.root)};return n.Buffer.from(JSON.stringify(t),"utf8")}static deserialize(t,e){const r=JSON.parse(t.toString("utf8")),i=new f(e);return i.root=function t(e){if(null===e)return null;if("stem"===e.nodeType){const t=new a(n.Buffer.from(e.stem,"hex"));return t.values=e.values.map((t=>null!==t?n.Buffer.from(t,"hex"):null)),t}if("internal"===e.nodeType){const r=new c;return r.left=t(e.left),r.right=t(e.right),r}return null}(r.root),i}splitLeaf(t,e,r,n,i,s){if(e[s]===r[s]){const o=new c;return 0===e[s]?o.left=this.splitLeaf(t,e,r,n,i,s+1):o.right=this.splitLeaf(t,e,r,n,i,s+1),o}{const r=new c,o=e[s],f=this.bitsToBytes(e),h=new a(f);return h.setValue(n,i),0===o?(r.left=h,r.right=t):(r.right=h,r.left=t),r}}}e.UnifiedBinaryTree=f},4634:t=>{var e={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==e.call(t)}},4636:function(t,e,r){var n;t.exports=(n=r(9021),function(t){var e=n,r=e.lib,i=r.WordArray,s=r.Hasher,o=e.algo,a=[];!function(){for(var e=0;e<64;e++)a[e]=4294967296*t.abs(t.sin(e+1))|0}();var c=o.MD5=s.extend({_doReset:function(){this._hash=new i.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var n=e+r,i=t[n];t[n]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}var s=this._hash.words,o=t[e+0],c=t[e+1],d=t[e+2],p=t[e+3],y=t[e+4],g=t[e+5],v=t[e+6],w=t[e+7],b=t[e+8],m=t[e+9],B=t[e+10],E=t[e+11],x=t[e+12],k=t[e+13],A=t[e+14],_=t[e+15],S=s[0],T=s[1],P=s[2],H=s[3];S=f(S,T,P,H,o,7,a[0]),H=f(H,S,T,P,c,12,a[1]),P=f(P,H,S,T,d,17,a[2]),T=f(T,P,H,S,p,22,a[3]),S=f(S,T,P,H,y,7,a[4]),H=f(H,S,T,P,g,12,a[5]),P=f(P,H,S,T,v,17,a[6]),T=f(T,P,H,S,w,22,a[7]),S=f(S,T,P,H,b,7,a[8]),H=f(H,S,T,P,m,12,a[9]),P=f(P,H,S,T,B,17,a[10]),T=f(T,P,H,S,E,22,a[11]),S=f(S,T,P,H,x,7,a[12]),H=f(H,S,T,P,k,12,a[13]),P=f(P,H,S,T,A,17,a[14]),S=h(S,T=f(T,P,H,S,_,22,a[15]),P,H,c,5,a[16]),H=h(H,S,T,P,v,9,a[17]),P=h(P,H,S,T,E,14,a[18]),T=h(T,P,H,S,o,20,a[19]),S=h(S,T,P,H,g,5,a[20]),H=h(H,S,T,P,B,9,a[21]),P=h(P,H,S,T,_,14,a[22]),T=h(T,P,H,S,y,20,a[23]),S=h(S,T,P,H,m,5,a[24]),H=h(H,S,T,P,A,9,a[25]),P=h(P,H,S,T,p,14,a[26]),T=h(T,P,H,S,b,20,a[27]),S=h(S,T,P,H,k,5,a[28]),H=h(H,S,T,P,d,9,a[29]),P=h(P,H,S,T,w,14,a[30]),S=u(S,T=h(T,P,H,S,x,20,a[31]),P,H,g,4,a[32]),H=u(H,S,T,P,b,11,a[33]),P=u(P,H,S,T,E,16,a[34]),T=u(T,P,H,S,A,23,a[35]),S=u(S,T,P,H,c,4,a[36]),H=u(H,S,T,P,y,11,a[37]),P=u(P,H,S,T,w,16,a[38]),T=u(T,P,H,S,B,23,a[39]),S=u(S,T,P,H,k,4,a[40]),H=u(H,S,T,P,o,11,a[41]),P=u(P,H,S,T,p,16,a[42]),T=u(T,P,H,S,v,23,a[43]),S=u(S,T,P,H,m,4,a[44]),H=u(H,S,T,P,x,11,a[45]),P=u(P,H,S,T,_,16,a[46]),S=l(S,T=u(T,P,H,S,d,23,a[47]),P,H,o,6,a[48]),H=l(H,S,T,P,w,10,a[49]),P=l(P,H,S,T,A,15,a[50]),T=l(T,P,H,S,g,21,a[51]),S=l(S,T,P,H,x,6,a[52]),H=l(H,S,T,P,p,10,a[53]),P=l(P,H,S,T,B,15,a[54]),T=l(T,P,H,S,c,21,a[55]),S=l(S,T,P,H,b,6,a[56]),H=l(H,S,T,P,_,10,a[57]),P=l(P,H,S,T,v,15,a[58]),T=l(T,P,H,S,k,21,a[59]),S=l(S,T,P,H,y,6,a[60]),H=l(H,S,T,P,E,10,a[61]),P=l(P,H,S,T,d,15,a[62]),T=l(T,P,H,S,m,21,a[63]),s[0]=s[0]+S|0,s[1]=s[1]+T|0,s[2]=s[2]+P|0,s[3]=s[3]+H|0},_doFinalize:function(){var e=this._data,r=e.words,n=8*this._nDataBytes,i=8*e.sigBytes;r[i>>>5]|=128<<24-i%32;var s=t.floor(n/4294967296),o=n;r[15+(i+64>>>9<<4)]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),r[14+(i+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),e.sigBytes=4*(r.length+1),this._process();for(var a=this._hash,c=a.words,f=0;f<4;f++){var h=c[f];c[f]=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8)}return a},clone:function(){var t=s.clone.call(this);return t._hash=this._hash.clone(),t}});function f(t,e,r,n,i,s,o){var a=t+(e&r|~e&n)+i+o;return(a<<s|a>>>32-s)+e}function h(t,e,r,n,i,s,o){var a=t+(e&n|r&~n)+i+o;return(a<<s|a>>>32-s)+e}function u(t,e,r,n,i,s,o){var a=t+(e^r^n)+i+o;return(a<<s|a>>>32-s)+e}function l(t,e,r,n,i,s,o){var a=t+(r^(e|~n))+i+o;return(a<<s|a>>>32-s)+e}e.MD5=s._createHelper(c),e.HmacMD5=s._createHmacHelper(c)}(Math),n.MD5)},4725:function(t,e,r){var n,i,s;t.exports=(n=r(9021),s=(i=n).lib.WordArray,i.enc.Base64url={stringify:function(t,e){void 0===e&&(e=!0);var r=t.words,n=t.sigBytes,i=e?this._safe_map:this._map;t.clamp();for(var s=[],o=0;o<n;o+=3)for(var a=(r[o>>>2]>>>24-o%4*8&255)<<16|(r[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|r[o+2>>>2]>>>24-(o+2)%4*8&255,c=0;c<4&&o+.75*c<n;c++)s.push(i.charAt(a>>>6*(3-c)&63));var f=i.charAt(64);if(f)for(;s.length%4;)s.push(f);return s.join("")},parse:function(t,e){void 0===e&&(e=!0);var r=t.length,n=e?this._safe_map:this._map,i=this._reverseMap;if(!i){i=this._reverseMap=[];for(var o=0;o<n.length;o++)i[n.charCodeAt(o)]=o}var a=n.charAt(64);if(a){var c=t.indexOf(a);-1!==c&&(r=c)}return function(t,e,r){for(var n=[],i=0,o=0;o<e;o++)if(o%4){var a=r[t.charCodeAt(o-1)]<<o%4*2|r[t.charCodeAt(o)]>>>6-o%4*2;n[i>>>2]|=a<<24-i%4*8,i++}return s.create(n,i)}(t,r,i)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",_safe_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"},n.enc.Base64url)},4905:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.pad.Iso10126={pad:function(t,e){var r=4*e,i=r-t.sigBytes%r;t.concat(n.lib.WordArray.random(i-1)).concat(n.lib.WordArray.create([i<<24],1))},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},n.pad.Iso10126)},4923:()=>{},5188:(t,e,r)=>{var n=r(8204),i=t.exports=n.hasArrayBuffer?s(0):[];function s(t){return new Uint8Array(t)}i.alloc=s,i.concat=n.concat,i.from=function(t){if(n.isView(t)){var e=t.byteOffset,r=t.byteLength;(t=t.buffer).byteLength!==r&&(t.slice?t=t.slice(e,e+r):(t=new Uint8Array(t)).byteLength!==r&&(t=Array.prototype.slice.call(t,e,e+r)))}else{if("string"==typeof t)return n.from.call(i,t);if("number"==typeof t)throw new TypeError('"value" argument must not be a number')}return new Uint8Array(t)}},5471:function(t,e,r){var n,i,s,o,a,c,f,h;t.exports=(i=(n=h=r(9021)).lib,s=i.WordArray,o=i.Hasher,a=n.algo,c=[],f=a.SHA1=o.extend({_doReset:function(){this._hash=new s.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=this._hash.words,n=r[0],i=r[1],s=r[2],o=r[3],a=r[4],f=0;f<80;f++){if(f<16)c[f]=0|t[e+f];else{var h=c[f-3]^c[f-8]^c[f-14]^c[f-16];c[f]=h<<1|h>>>31}var u=(n<<5|n>>>27)+a+c[f];u+=f<20?1518500249+(i&s|~i&o):f<40?1859775393+(i^s^o):f<60?(i&s|i&o|s&o)-1894007588:(i^s^o)-899497514,a=o,o=s,s=i<<30|i>>>2,i=n,n=u}r[0]=r[0]+n|0,r[1]=r[1]+i|0,r[2]=r[2]+s|0,r[3]=r[3]+o|0,r[4]=r[4]+a|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,n=8*t.sigBytes;return e[n>>>5]|=128<<24-n%32,e[14+(n+64>>>9<<4)]=Math.floor(r/4294967296),e[15+(n+64>>>9<<4)]=r,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}}),n.SHA1=o._createHelper(f),n.HmacSHA1=o._createHmacHelper(f),h.SHA1)},5503:function(t,e,r){var n;t.exports=(n=r(9021),function(){var t=n,e=t.lib.WordArray,r=t.enc;function i(t){return t<<8&4278255360|t>>>8&16711935}r.Utf16=r.Utf16BE={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],i=0;i<r;i+=2){var s=e[i>>>2]>>>16-i%4*8&65535;n.push(String.fromCharCode(s))}return n.join("")},parse:function(t){for(var r=t.length,n=[],i=0;i<r;i++)n[i>>>1]|=t.charCodeAt(i)<<16-i%2*16;return e.create(n,2*r)}},r.Utf16LE={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],s=0;s<r;s+=2){var o=i(e[s>>>2]>>>16-s%4*8&65535);n.push(String.fromCharCode(o))}return n.join("")},parse:function(t){for(var r=t.length,n=[],s=0;s<r;s++)n[s>>>1]|=i(t.charCodeAt(s)<<16-s%2*16);return e.create(n,2*r)}}}(),n.enc.Utf16)},5623:(t,e,r)=>{e.setExtUnpackers=function(t){t.addExtUnpacker(14,[a,f(Error)]),t.addExtUnpacker(1,[a,f(EvalError)]),t.addExtUnpacker(2,[a,f(RangeError)]),t.addExtUnpacker(3,[a,f(ReferenceError)]),t.addExtUnpacker(4,[a,f(SyntaxError)]),t.addExtUnpacker(5,[a,f(TypeError)]),t.addExtUnpacker(6,[a,f(URIError)]),t.addExtUnpacker(10,[a,c]),t.addExtUnpacker(11,[a,h(Boolean)]),t.addExtUnpacker(12,[a,h(String)]),t.addExtUnpacker(13,[a,h(Date)]),t.addExtUnpacker(15,[a,h(Number)]),"undefined"!=typeof Uint8Array&&(t.addExtUnpacker(17,h(Int8Array)),t.addExtUnpacker(18,h(Uint8Array)),t.addExtUnpacker(19,[u,h(Int16Array)]),t.addExtUnpacker(20,[u,h(Uint16Array)]),t.addExtUnpacker(21,[u,h(Int32Array)]),t.addExtUnpacker(22,[u,h(Uint32Array)]),t.addExtUnpacker(23,[u,h(Float32Array)]),"undefined"!=typeof Float64Array&&t.addExtUnpacker(24,[u,h(Float64Array)]),"undefined"!=typeof Uint8ClampedArray&&t.addExtUnpacker(25,h(Uint8ClampedArray)),t.addExtUnpacker(26,u),t.addExtUnpacker(29,[u,h(DataView)])),i.hasBuffer&&t.addExtUnpacker(27,h(s))};var n,i=r(8204),s=i.global,o={name:1,message:1,stack:1,columnNumber:1,fileName:1,lineNumber:1};function a(t){return n||(n=r(7402).decode),n(t)}function c(t){return RegExp.apply(null,t)}function f(t){return function(e){var r=new t;for(var n in o)r[n]=e[n];return r}}function h(t){return function(e){return new t(e)}}function u(t){return new Uint8Array(t).buffer}},5663:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.scryptAsync=e.scrypt=void 0;const n=r(2623),i=r(8941),s=r(9175),o=(t,e)=>t<<e|t>>>32-e;function a(t,e,r,n,i,s){let a=t[e++]^r[n++],c=t[e++]^r[n++],f=t[e++]^r[n++],h=t[e++]^r[n++],u=t[e++]^r[n++],l=t[e++]^r[n++],d=t[e++]^r[n++],p=t[e++]^r[n++],y=t[e++]^r[n++],g=t[e++]^r[n++],v=t[e++]^r[n++],w=t[e++]^r[n++],b=t[e++]^r[n++],m=t[e++]^r[n++],B=t[e++]^r[n++],E=t[e++]^r[n++],x=a,k=c,A=f,_=h,S=u,T=l,P=d,H=p,I=y,U=g,O=v,M=w,R=b,F=m,L=B,C=E;for(let t=0;t<8;t+=2)S^=o(x+R|0,7),I^=o(S+x|0,9),R^=o(I+S|0,13),x^=o(R+I|0,18),U^=o(T+k|0,7),F^=o(U+T|0,9),k^=o(F+U|0,13),T^=o(k+F|0,18),L^=o(O+P|0,7),A^=o(L+O|0,9),P^=o(A+L|0,13),O^=o(P+A|0,18),_^=o(C+M|0,7),H^=o(_+C|0,9),M^=o(H+_|0,13),C^=o(M+H|0,18),k^=o(x+_|0,7),A^=o(k+x|0,9),_^=o(A+k|0,13),x^=o(_+A|0,18),P^=o(T+S|0,7),H^=o(P+T|0,9),S^=o(H+P|0,13),T^=o(S+H|0,18),M^=o(O+U|0,7),I^=o(M+O|0,9),U^=o(I+M|0,13),O^=o(U+I|0,18),R^=o(C+L|0,7),F^=o(R+C|0,9),L^=o(F+R|0,13),C^=o(L+F|0,18);i[s++]=a+x|0,i[s++]=c+k|0,i[s++]=f+A|0,i[s++]=h+_|0,i[s++]=u+S|0,i[s++]=l+T|0,i[s++]=d+P|0,i[s++]=p+H|0,i[s++]=y+I|0,i[s++]=g+U|0,i[s++]=v+O|0,i[s++]=w+M|0,i[s++]=b+R|0,i[s++]=m+F|0,i[s++]=B+L|0,i[s++]=E+C|0}function c(t,e,r,n,i){let s=n+0,o=n+16*i;for(let n=0;n<16;n++)r[o+n]=t[e+16*(2*i-1)+n];for(let n=0;n<i;n++,s+=16,e+=16)a(r,o,t,e,r,s),n>0&&(o+=16),a(r,s,t,e+=16,r,o)}function f(t,e,r){const o=(0,s.checkOpts)({dkLen:32,asyncTick:10,maxmem:1073742848},r),{N:a,r:c,p:f,dkLen:h,asyncTick:u,maxmem:l,onProgress:d}=o;if((0,s.assertNumber)(a),(0,s.assertNumber)(c),(0,s.assertNumber)(f),(0,s.assertNumber)(h),(0,s.assertNumber)(u),(0,s.assertNumber)(l),void 0!==d&&"function"!=typeof d)throw new Error("progressCb should be function");const p=128*c,y=p/4;if(a<=1||a&a-1||a>=2**(p/8)||a>2**32)throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");if(f<0||f>137438953440/p)throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");if(h<0||h>137438953440)throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");const g=p*(a+f);if(g>l)throw new Error(`Scrypt: parameters too large, ${g} (128 * r * (N + p)) > ${l} (maxmem)`);const v=(0,i.pbkdf2)(n.sha256,t,e,{c:1,dkLen:p*f}),w=(0,s.u32)(v),b=(0,s.u32)(new Uint8Array(p*a)),m=(0,s.u32)(new Uint8Array(p));let B=()=>{};if(d){const t=2*a*f,e=Math.max(Math.floor(t/1e4),1);let r=0;B=()=>{r++,!d||r%e&&r!==t||d(r/t)}}return{N:a,r:c,p:f,dkLen:h,blockSize32:y,V:b,B32:w,B:v,tmp:m,blockMixCb:B,asyncTick:u}}function h(t,e,r,s,o){const a=(0,i.pbkdf2)(n.sha256,t,r,{c:1,dkLen:e});return r.fill(0),s.fill(0),o.fill(0),a}e.scrypt=function(t,e,r){const{N:n,r:i,p:s,dkLen:o,blockSize32:a,V:u,B32:l,B:d,tmp:p,blockMixCb:y}=f(t,e,r);for(let t=0;t<s;t++){const e=a*t;for(let t=0;t<a;t++)u[t]=l[e+t];for(let t=0,e=0;t<n-1;t++)c(u,e,u,e+=a,i),y();c(u,(n-1)*a,l,e,i),y();for(let t=0;t<n;t++){const t=l[e+a-16]%n;for(let r=0;r<a;r++)p[r]=l[e+r]^u[t*a+r];c(p,0,l,e,i),y()}}return h(t,o,d,u,p)},e.scryptAsync=async function(t,e,r){const{N:n,r:i,p:o,dkLen:a,blockSize32:u,V:l,B32:d,B:p,tmp:y,blockMixCb:g,asyncTick:v}=f(t,e,r);for(let t=0;t<o;t++){const e=u*t;for(let t=0;t<u;t++)l[t]=d[e+t];let r=0;await(0,s.asyncLoop)(n-1,v,(t=>{c(l,r,l,r+=u,i),g()})),c(l,(n-1)*u,d,e,i),g(),await(0,s.asyncLoop)(n,v,(t=>{const r=d[e+u-16]%n;for(let t=0;t<u;t++)y[t]=d[e+t]^l[r*u+t];c(y,0,d,e,i),g()}))}return h(t,a,p,l,y)}},5953:function(t,e,r){var n;t.exports=(n=r(9021),r(3240),function(t){var e=n,r=e.lib,i=r.WordArray,s=r.Hasher,o=e.x64.Word,a=e.algo,c=[],f=[],h=[];!function(){for(var t=1,e=0,r=0;r<24;r++){c[t+5*e]=(r+1)*(r+2)/2%64;var n=(2*t+3*e)%5;t=e%5,e=n}for(t=0;t<5;t++)for(e=0;e<5;e++)f[t+5*e]=e+(2*t+3*e)%5*5;for(var i=1,s=0;s<24;s++){for(var a=0,u=0,l=0;l<7;l++){if(1&i){var d=(1<<l)-1;d<32?u^=1<<d:a^=1<<d-32}128&i?i=i<<1^113:i<<=1}h[s]=o.create(a,u)}}();var u=[];!function(){for(var t=0;t<25;t++)u[t]=o.create()}();var l=a.SHA3=s.extend({cfg:s.cfg.extend({outputLength:512}),_doReset:function(){for(var t=this._state=[],e=0;e<25;e++)t[e]=new o.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(t,e){for(var r=this._state,n=this.blockSize/2,i=0;i<n;i++){var s=t[e+2*i],o=t[e+2*i+1];s=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),(T=r[i]).high^=o,T.low^=s}for(var a=0;a<24;a++){for(var l=0;l<5;l++){for(var d=0,p=0,y=0;y<5;y++)d^=(T=r[l+5*y]).high,p^=T.low;var g=u[l];g.high=d,g.low=p}for(l=0;l<5;l++){var v=u[(l+4)%5],w=u[(l+1)%5],b=w.high,m=w.low;for(d=v.high^(b<<1|m>>>31),p=v.low^(m<<1|b>>>31),y=0;y<5;y++)(T=r[l+5*y]).high^=d,T.low^=p}for(var B=1;B<25;B++){var E=(T=r[B]).high,x=T.low,k=c[B];k<32?(d=E<<k|x>>>32-k,p=x<<k|E>>>32-k):(d=x<<k-32|E>>>64-k,p=E<<k-32|x>>>64-k);var A=u[f[B]];A.high=d,A.low=p}var _=u[0],S=r[0];for(_.high=S.high,_.low=S.low,l=0;l<5;l++)for(y=0;y<5;y++){var T=r[B=l+5*y],P=u[B],H=u[(l+1)%5+5*y],I=u[(l+2)%5+5*y];T.high=P.high^~H.high&I.high,T.low=P.low^~H.low&I.low}T=r[0];var U=h[a];T.high^=U.high,T.low^=U.low}},_doFinalize:function(){var e=this._data,r=e.words,n=(this._nDataBytes,8*e.sigBytes),s=32*this.blockSize;r[n>>>5]|=1<<24-n%32,r[(t.ceil((n+1)/s)*s>>>5)-1]|=128,e.sigBytes=4*r.length,this._process();for(var o=this._state,a=this.cfg.outputLength/8,c=a/8,f=[],h=0;h<c;h++){var u=o[h],l=u.high,d=u.low;l=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8),d=16711935&(d<<8|d>>>24)|4278255360&(d<<24|d>>>8),f.push(d),f.push(l)}return new i.init(f,a)},clone:function(){for(var t=s.clone.call(this),e=t._state=this._state.slice(0),r=0;r<25;r++)e[r]=e[r].clone();return t}});e.SHA3=s._createHelper(l),e.HmacSHA3=s._createHmacHelper(l)}(Math),n.SHA3)},6298:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib.StreamCipher,r=t.algo,i=[],s=[],o=[],a=r.Rabbit=e.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,r=0;r<4;r++)t[r]=16711935&(t[r]<<8|t[r]>>>24)|4278255360&(t[r]<<24|t[r]>>>8);var n=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],i=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];for(this._b=0,r=0;r<4;r++)c.call(this);for(r=0;r<8;r++)i[r]^=n[r+4&7];if(e){var s=e.words,o=s[0],a=s[1],f=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),h=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),u=f>>>16|4294901760&h,l=h<<16|65535&f;for(i[0]^=f,i[1]^=u,i[2]^=h,i[3]^=l,i[4]^=f,i[5]^=u,i[6]^=h,i[7]^=l,r=0;r<4;r++)c.call(this)}},_doProcessBlock:function(t,e){var r=this._X;c.call(this),i[0]=r[0]^r[5]>>>16^r[3]<<16,i[1]=r[2]^r[7]>>>16^r[5]<<16,i[2]=r[4]^r[1]>>>16^r[7]<<16,i[3]=r[6]^r[3]>>>16^r[1]<<16;for(var n=0;n<4;n++)i[n]=16711935&(i[n]<<8|i[n]>>>24)|4278255360&(i[n]<<24|i[n]>>>8),t[e+n]^=i[n]},blockSize:4,ivSize:2});function c(){for(var t=this._X,e=this._C,r=0;r<8;r++)s[r]=e[r];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<s[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<s[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<s[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<s[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<s[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<s[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<s[6]>>>0?1:0)|0,this._b=e[7]>>>0<s[7]>>>0?1:0,r=0;r<8;r++){var n=t[r]+e[r],i=65535&n,a=n>>>16,c=((i*i>>>17)+i*a>>>15)+a*a,f=((4294901760&n)*n|0)+((65535&n)*n|0);o[r]=c^f}t[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,t[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,t[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,t[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,t[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,t[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,t[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,t[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}t.Rabbit=e._createHelper(a)}(),n.Rabbit)},6308:function(t,e,r){var n,i,s,o,a,c;t.exports=(c=r(9021),r(3009),i=(n=c).lib.WordArray,s=n.algo,o=s.SHA256,a=s.SHA224=o.extend({_doReset:function(){this._hash=new i.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var t=o._doFinalize.call(this);return t.sigBytes-=4,t}}),n.SHA224=o._createHelper(a),n.HmacSHA224=o._createHmacHelper(a),c.SHA224)},6372:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.mode.CTRGladman=function(){var t=n.lib.BlockCipherMode.extend();function e(t){if(255&~(t>>24))t+=1<<24;else{var e=t>>16&255,r=t>>8&255,n=255&t;255===e?(e=0,255===r?(r=0,255===n?n=0:++n):++r):++e,t=0,t+=e<<16,t+=r<<8,t+=n}return t}var r=t.Encryptor=t.extend({processBlock:function(t,r){var n=this._cipher,i=n.blockSize,s=this._iv,o=this._counter;s&&(o=this._counter=s.slice(0),this._iv=void 0),function(t){0===(t[0]=e(t[0]))&&(t[1]=e(t[1]))}(o);var a=o.slice(0);n.encryptBlock(a,0);for(var c=0;c<i;c++)t[r+c]^=a[c]}});return t.Decryptor=r,t}(),n.mode.CTRGladman)},6440:function(t,e,r){var n;t.exports=(n=r(9021),function(){if("function"==typeof ArrayBuffer){var t=n.lib.WordArray,e=t.init,r=t.init=function(t){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),(t instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)&&(t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)),t instanceof Uint8Array){for(var r=t.byteLength,n=[],i=0;i<r;i++)n[i>>>2]|=t[i]<<24-i%4*8;e.call(this,n,r)}else e.apply(this,arguments)};r.prototype=t}}(),n.lib.WordArray)},6513:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.schnorr=e.CURVE=e.Signature=e.Point=e.utils=e.getSharedSecret=e.verify=e.signSync=e.sign=e.getPublicKey=void 0;const n=r(9615),i=r(2623),s=r(9598);var o=r(9598);Object.defineProperty(e,"getPublicKey",{enumerable:!0,get:function(){return o.getPublicKey}}),Object.defineProperty(e,"sign",{enumerable:!0,get:function(){return o.sign}}),Object.defineProperty(e,"signSync",{enumerable:!0,get:function(){return o.signSync}}),Object.defineProperty(e,"verify",{enumerable:!0,get:function(){return o.verify}}),Object.defineProperty(e,"getSharedSecret",{enumerable:!0,get:function(){return o.getSharedSecret}}),Object.defineProperty(e,"utils",{enumerable:!0,get:function(){return o.utils}}),Object.defineProperty(e,"Point",{enumerable:!0,get:function(){return o.Point}}),Object.defineProperty(e,"Signature",{enumerable:!0,get:function(){return o.Signature}}),Object.defineProperty(e,"CURVE",{enumerable:!0,get:function(){return o.CURVE}}),Object.defineProperty(e,"schnorr",{enumerable:!0,get:function(){return o.schnorr}}),s.utils.hmacSha256Sync=(t,...e)=>{const r=n.hmac.create(i.sha256,t);return e.forEach((t=>r.update(t))),r.digest()}},6754:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getRandomBytes=e.getRandomBytesSync=void 0;const n=r(9175);function i(t){return(0,n.randomBytes)(t)}e.getRandomBytesSync=i,e.getRandomBytes=async function(t){return i(t)}},6765:()=>{},6939:function(t,e,r){var n,i,s;t.exports=(s=r(9021),r(7165),s.mode.CTR=(i=(n=s.lib.BlockCipherMode.extend()).Encryptor=n.extend({processBlock:function(t,e){var r=this._cipher,n=r.blockSize,i=this._iv,s=this._counter;i&&(s=this._counter=i.slice(0),this._iv=void 0);var o=s.slice(0);r.encryptBlock(o,0),s[n-1]=s[n-1]+1|0;for(var a=0;a<n;a++)t[e+a]^=o[a]}}),n.Decryptor=i,n),s.mode.CTR)},7158:(t,e,r)=>{e.Encoder=s;var n=r(1611),i=r(3357).D;function s(t){if(!(this instanceof s))return new s(t);i.call(this,t)}s.prototype=new i,n.mixin(s.prototype),s.prototype.encode=function(t){this.write(t),this.emit("data",this.read())},s.prototype.end=function(t){arguments.length&&this.encode(t),this.flush(),this.emit("end")}},7165:function(t,e,r){var n,i,s,o,a,c,f,h,u,l,d,p,y,g,v,w,b,m,B;t.exports=(n=r(9021),r(9506),void(n.lib.Cipher||(i=n,s=i.lib,o=s.Base,a=s.WordArray,c=s.BufferedBlockAlgorithm,f=i.enc,f.Utf8,h=f.Base64,u=i.algo.EvpKDF,l=s.Cipher=c.extend({cfg:o.extend(),createEncryptor:function(t,e){return this.create(this._ENC_XFORM_MODE,t,e)},createDecryptor:function(t,e){return this.create(this._DEC_XFORM_MODE,t,e)},init:function(t,e,r){this.cfg=this.cfg.extend(r),this._xformMode=t,this._key=e,this.reset()},reset:function(){c.reset.call(this),this._doReset()},process:function(t){return this._append(t),this._process()},finalize:function(t){return t&&this._append(t),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function t(t){return"string"==typeof t?B:b}return function(e){return{encrypt:function(r,n,i){return t(n).encrypt(e,r,n,i)},decrypt:function(r,n,i){return t(n).decrypt(e,r,n,i)}}}}()}),s.StreamCipher=l.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),d=i.mode={},p=s.BlockCipherMode=o.extend({createEncryptor:function(t,e){return this.Encryptor.create(t,e)},createDecryptor:function(t,e){return this.Decryptor.create(t,e)},init:function(t,e){this._cipher=t,this._iv=e}}),y=d.CBC=function(){var t=p.extend();function e(t,e,r){var n,i=this._iv;i?(n=i,this._iv=void 0):n=this._prevBlock;for(var s=0;s<r;s++)t[e+s]^=n[s]}return t.Encryptor=t.extend({processBlock:function(t,r){var n=this._cipher,i=n.blockSize;e.call(this,t,r,i),n.encryptBlock(t,r),this._prevBlock=t.slice(r,r+i)}}),t.Decryptor=t.extend({processBlock:function(t,r){var n=this._cipher,i=n.blockSize,s=t.slice(r,r+i);n.decryptBlock(t,r),e.call(this,t,r,i),this._prevBlock=s}}),t}(),g=(i.pad={}).Pkcs7={pad:function(t,e){for(var r=4*e,n=r-t.sigBytes%r,i=n<<24|n<<16|n<<8|n,s=[],o=0;o<n;o+=4)s.push(i);var c=a.create(s,n);t.concat(c)},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},s.BlockCipher=l.extend({cfg:l.cfg.extend({mode:y,padding:g}),reset:function(){var t;l.reset.call(this);var e=this.cfg,r=e.iv,n=e.mode;this._xformMode==this._ENC_XFORM_MODE?t=n.createEncryptor:(t=n.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==t?this._mode.init(this,r&&r.words):(this._mode=t.call(n,this,r&&r.words),this._mode.__creator=t)},_doProcessBlock:function(t,e){this._mode.processBlock(t,e)},_doFinalize:function(){var t,e=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(e.pad(this._data,this.blockSize),t=this._process(!0)):(t=this._process(!0),e.unpad(t)),t},blockSize:4}),v=s.CipherParams=o.extend({init:function(t){this.mixIn(t)},toString:function(t){return(t||this.formatter).stringify(this)}}),w=(i.format={}).OpenSSL={stringify:function(t){var e=t.ciphertext,r=t.salt;return(r?a.create([1398893684,1701076831]).concat(r).concat(e):e).toString(h)},parse:function(t){var e,r=h.parse(t),n=r.words;return 1398893684==n[0]&&1701076831==n[1]&&(e=a.create(n.slice(2,4)),n.splice(0,4),r.sigBytes-=16),v.create({ciphertext:r,salt:e})}},b=s.SerializableCipher=o.extend({cfg:o.extend({format:w}),encrypt:function(t,e,r,n){n=this.cfg.extend(n);var i=t.createEncryptor(r,n),s=i.finalize(e),o=i.cfg;return v.create({ciphertext:s,key:r,iv:o.iv,algorithm:t,mode:o.mode,padding:o.padding,blockSize:t.blockSize,formatter:n.format})},decrypt:function(t,e,r,n){return n=this.cfg.extend(n),e=this._parse(e,n.format),t.createDecryptor(r,n).finalize(e.ciphertext)},_parse:function(t,e){return"string"==typeof t?e.parse(t,this):t}}),m=(i.kdf={}).OpenSSL={execute:function(t,e,r,n,i){if(n||(n=a.random(8)),i)s=u.create({keySize:e+r,hasher:i}).compute(t,n);else var s=u.create({keySize:e+r}).compute(t,n);var o=a.create(s.words.slice(e),4*r);return s.sigBytes=4*e,v.create({key:s,iv:o,salt:n})}},B=s.PasswordBasedCipher=b.extend({cfg:b.cfg.extend({kdf:m}),encrypt:function(t,e,r,n){var i=(n=this.cfg.extend(n)).kdf.execute(r,t.keySize,t.ivSize,n.salt,n.hasher);n.iv=i.iv;var s=b.encrypt.call(this,t,e,i.key,n);return s.mixIn(i),s},decrypt:function(t,e,r,n){n=this.cfg.extend(n),e=this._parse(e,n.format);var i=n.kdf.execute(r,t.keySize,t.ivSize,e.salt,n.hasher);return n.iv=i.iv,b.decrypt.call(this,t,e,i.key,n)}}))))},7179:(t,e)=>{e.copy=function(t,e,r,n){var i;r||(r=0),n||0===n||(n=this.length),e||(e=0);var s=n-r;if(t===this&&r<e&&e<n)for(i=s-1;i>=0;i--)t[i+e]=this[i+r];else for(i=0;i<s;i++)t[i+e]=this[i+r];return s},e.toString=function(t,e,r){var n=this,i=0|e;r||(r=n.length);for(var s="",o=0;i<r;)(o=n[i++])<128?s+=String.fromCharCode(o):(192==(224&o)?o=(31&o)<<6|63&n[i++]:224==(240&o)?o=(15&o)<<12|(63&n[i++])<<6|63&n[i++]:240==(248&o)&&(o=(7&o)<<18|(63&n[i++])<<12|(63&n[i++])<<6|63&n[i++]),o>=65536?(o-=65536,s+=String.fromCharCode(55296+(o>>>10),56320+(1023&o))):s+=String.fromCharCode(o));return s},e.write=function(t,e){for(var r=this,n=e||(e|=0),i=t.length,s=0,o=0;o<i;)(s=t.charCodeAt(o++))<128?r[n++]=s:s<2048?(r[n++]=192|s>>>6,r[n++]=128|63&s):s<55296||s>57343?(r[n++]=224|s>>>12,r[n++]=128|s>>>6&63,r[n++]=128|63&s):(s=65536+(s-55296<<10|t.charCodeAt(o++)-56320),r[n++]=240|s>>>18,r[n++]=128|s>>>12&63,r[n++]=128|s>>>6&63,r[n++]=128|63&s);return n-e}},7193:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib.StreamCipher,r=t.algo,i=r.RC4=e.extend({_doReset:function(){for(var t=this._key,e=t.words,r=t.sigBytes,n=this._S=[],i=0;i<256;i++)n[i]=i;i=0;for(var s=0;i<256;i++){var o=i%r,a=e[o>>>2]>>>24-o%4*8&255;s=(s+n[i]+a)%256;var c=n[i];n[i]=n[s],n[s]=c}this._i=this._j=0},_doProcessBlock:function(t,e){t[e]^=s.call(this)},keySize:8,ivSize:0});function s(){for(var t=this._S,e=this._i,r=this._j,n=0,i=0;i<4;i++){r=(r+t[e=(e+1)%256])%256;var s=t[e];t[e]=t[r],t[r]=s,n|=t[(t[e]+t[r])%256]<<24-8*i}return this._i=e,this._j=r,n}t.RC4=e._createHelper(i);var o=r.RC4Drop=i.extend({cfg:i.cfg.extend({drop:192}),_doReset:function(){i._doReset.call(this);for(var t=this.cfg.drop;t>0;t--)s.call(this)}});t.RC4Drop=e._createHelper(o)}(),n.RC4)},7284:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Base=void 0;const i=r(6765),s=n(r(1396));class o{print(){o.print(this)}bufferIndexOf(t,e,r=!1){return r?this.binarySearch(t,e,i.Buffer.compare):this.linearSearch(t,e,((t,e)=>t.equals(e)))}static binarySearch(t,e,r){let n=0,i=t.length-1;for(;n<=i;){const s=Math.floor((n+i)/2),o=r(t[s],e);if(0===o){for(let n=s-1;n>=0;n--)if(0!==r(t[n],e))return n+1;return 0}o<0?n=s+1:i=s-1}return-1}binarySearch(t,e,r){return o.binarySearch(t,e,r)}static linearSearch(t,e,r){for(let n=0;n<t.length;n++)if(r(t[n],e))return n;return-1}linearSearch(t,e,r){return o.linearSearch(t,e,r)}static bufferify(t){if(!i.Buffer.isBuffer(t)){if("object"==typeof t&&t.words)return i.Buffer.from(t.toString(s.default.enc.Hex),"hex");if(o.isHexString(t)){const e=t.replace("0x",""),r=e.length%2?"0"+e:e;return i.Buffer.from(r,"hex")}if("string"==typeof t)return i.Buffer.from(t);if("bigint"==typeof t){const e=t.toString(16).length%2?"0"+t.toString(16):t.toString(16);return i.Buffer.from(e,"hex")}if(t instanceof Uint8Array)return i.Buffer.from(t.buffer,t.byteOffset,t.byteLength);if("number"==typeof t){let e=t.toString();return e.length%2&&(e=`0${e}`),i.Buffer.from(e,"hex")}if(ArrayBuffer.isView(t))return i.Buffer.from(t.buffer,t.byteOffset,t.byteLength)}return t}static bufferifyFn(t){if("function"!=typeof t)throw new Error("bufferifyFn expects a function, received: "+typeof t);return e=>{const r=t(e);if(i.Buffer.isBuffer(r))return r;if(o.isHexString(r)){const t=r.replace("0x",""),e=t.length%2?"0"+t:t;return i.Buffer.from(e,"hex")}if("string"==typeof r)return i.Buffer.from(r);if("bigint"==typeof r){const t=r.toString(16).length%2?"0"+r.toString(16):r.toString(16);return i.Buffer.from(t,"hex")}return ArrayBuffer.isView(r)?i.Buffer.from(r.buffer,r.byteOffset,r.byteLength):i.Buffer.from(t(s.default.enc.Hex.parse(e.toString("hex"))).toString(s.default.enc.Hex),"hex")}}bigNumberify(t){return o.bigNumberify(t)}static bigNumberify(t){if("bigint"==typeof t)return t;if("string"==typeof t){if(t.startsWith("0x")&&o.isHexString(t)){const e=t.replace("0x",""),r=e.length%2?"0"+e:e||"0";return BigInt("0x"+r)}return BigInt(t)}if(i.Buffer.isBuffer(t)){const e=t.toString("hex"),r=e.length%2?"0"+e:e||"0";return BigInt("0x"+r)}if(t instanceof Uint8Array){const e=i.Buffer.from(t).toString("hex"),r=e.length%2?"0"+e:e||"0";return BigInt("0x"+r)}if("number"==typeof t)return BigInt(t);throw new Error("cannot bigNumberify")}static isHexString(t){return"string"==typeof t&&/^(0x)?[0-9A-Fa-f]*$/.test(t)}static print(t){console.log(t.toString())}bufferToHex(t,e=!0){return o.bufferToHex(t,e)}static bufferToHex(t,e=!0){return`${e?"0x":""}${(t||i.Buffer.alloc(0)).toString("hex")}`}bufferify(t){return o.bufferify(t)}bufferifyFn(t){return o.bufferifyFn(t)}isHexString(t){return o.isHexString(t)}log2(t){return 1===t?0:1+this.log2(t/2|0)}zip(t,e){return t.map(((t,r)=>[t,e[r]]))}static hexZeroPad(t,e){return"0x"+t.replace("0x","").padStart(e,"0")}bufferArrayIncludes(t,e){return t.some((t=>t.equals(null!=e?e:i.Buffer.alloc(0))))}}e.Base=o,e.default=o},7402:(t,e,r)=>{e.decode=function(t,e){var r=new n(e);return r.write(t),r.read()};var n=r(3785).n},7446:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.scryptSync=e.scrypt=void 0;const n=r(5663),i=r(2672);e.scrypt=async function(t,e,r,s,o,a){return(0,i.assertBytes)(t),(0,i.assertBytes)(e),(0,n.scryptAsync)(t,e,{N:r,r:o,p:s,dkLen:a})},e.scryptSync=function(t,e,r,s,o,a){return(0,i.assertBytes)(t),(0,i.assertBytes)(e),(0,n.scrypt)(t,e,{N:r,r:o,p:s,dkLen:a})}},7628:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib,r=e.WordArray,i=e.BlockCipher,s=t.algo,o=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],a=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],c=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],f=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],h=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],u=s.DES=i.extend({_doReset:function(){for(var t=this._key.words,e=[],r=0;r<56;r++){var n=o[r]-1;e[r]=t[n>>>5]>>>31-n%32&1}for(var i=this._subKeys=[],s=0;s<16;s++){var f=i[s]=[],h=c[s];for(r=0;r<24;r++)f[r/6|0]|=e[(a[r]-1+h)%28]<<31-r%6,f[4+(r/6|0)]|=e[28+(a[r+24]-1+h)%28]<<31-r%6;for(f[0]=f[0]<<1|f[0]>>>31,r=1;r<7;r++)f[r]=f[r]>>>4*(r-1)+3;f[7]=f[7]<<5|f[7]>>>27}var u=this._invSubKeys=[];for(r=0;r<16;r++)u[r]=i[15-r]},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._subKeys)},decryptBlock:function(t,e){this._doCryptBlock(t,e,this._invSubKeys)},_doCryptBlock:function(t,e,r){this._lBlock=t[e],this._rBlock=t[e+1],l.call(this,4,252645135),l.call(this,16,65535),d.call(this,2,858993459),d.call(this,8,16711935),l.call(this,1,1431655765);for(var n=0;n<16;n++){for(var i=r[n],s=this._lBlock,o=this._rBlock,a=0,c=0;c<8;c++)a|=f[c][((o^i[c])&h[c])>>>0];this._lBlock=o,this._rBlock=s^a}var u=this._lBlock;this._lBlock=this._rBlock,this._rBlock=u,l.call(this,1,1431655765),d.call(this,8,16711935),d.call(this,2,858993459),l.call(this,16,65535),l.call(this,4,252645135),t[e]=this._lBlock,t[e+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function l(t,e){var r=(this._lBlock>>>t^this._rBlock)&e;this._rBlock^=r,this._lBlock^=r<<t}function d(t,e){var r=(this._rBlock>>>t^this._lBlock)&e;this._lBlock^=r,this._rBlock^=r<<t}t.DES=i._createHelper(u);var p=s.TripleDES=i.extend({_doReset:function(){var t=this._key.words;if(2!==t.length&&4!==t.length&&t.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var e=t.slice(0,2),n=t.length<4?t.slice(0,2):t.slice(2,4),i=t.length<6?t.slice(0,2):t.slice(4,6);this._des1=u.createEncryptor(r.create(e)),this._des2=u.createEncryptor(r.create(n)),this._des3=u.createEncryptor(r.create(i))},encryptBlock:function(t,e){this._des1.encryptBlock(t,e),this._des2.decryptBlock(t,e),this._des3.encryptBlock(t,e)},decryptBlock:function(t,e){this._des3.decryptBlock(t,e),this._des2.encryptBlock(t,e),this._des1.decryptBlock(t,e)},keySize:6,ivSize:2,blockSize:2});t.TripleDES=i._createHelper(p)}(),n.TripleDES)},7830:(t,e,r)=>{e.encode=r(7870).encode,e.decode=r(7402).decode,e.Encoder=r(7158).Encoder,e.Decoder=r(8762).Decoder,e.createCodec=r(1325).createCodec,e.codec=r(8884).codec},7870:(t,e,r)=>{e.encode=function(t,e){var r=new n(e);return r.write(t),r.read()};var n=r(3357).D},7909:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.MerkleRadixTree=void 0;const i=n(r(7284));class s{constructor(t="",e=null,r){this.key=t,this.value=e,this.children=new Map,this.hashFn=r,this.hash=this.computeHash()}computeHash(){let t=this.hashFn("");t=Buffer.concat([t,i.default.bufferify(this.key),null!=this.value?i.default.bufferify(this.value):Buffer.alloc(0)]);for(const e of this.children.values())t=Buffer.concat([t,e.hash]);return this.hashFn(t)}updateHash(){this.hash=this.computeHash()}}class o extends i.default{constructor(t){super(),this.hashFn=this.bufferifyFn(t),this.root=new s("",null,this.hashFn)}insert(t,e){let r=this.root,n=0;for(;t.length>0;){const i=[...r.children.values()].find((e=>t.startsWith(e.key)));if(!i)return r.children.set(t,new s(t,e,this.hashFn)),void r.updateHash();if(n=this.commonPrefixLength(t,i.key),n!==i.key.length){const o=t.slice(0,n),a=i.key.slice(n),c=new s(o,null,this.hashFn);if(r.children.delete(i.key),r.children.set(o,c),c.children.set(a,i),i.key=a,n<t.length){const r=t.slice(n);c.children.set(r,new s(r,e,this.hashFn))}else c.value=e;return r.updateHash(),void c.updateHash()}r=i,t=t.slice(n)}r.value=e,r.updateHash()}lookup(t){let e=this.root;for(;t.length>0;){const r=[...e.children.values()].find((e=>t.startsWith(e.key)));if(!r)return null;const n=this.commonPrefixLength(t,r.key);if(n!==r.key.length)return null;e=r,t=t.slice(n)}return e.value}commonPrefixLength(t,e){let r=0;for(;r<t.length&&r<e.length&&t[r]===e[r];)r++;return r}generateProof(t){let e=this.root;const r=[];for(;t.length>0;){const n=[];for(const r of e.children.values())r.key!==t&&n.push({key:r.key,hash:r.hash});r.push({key:e.key,hash:e.hash,siblings:n});const i=[...e.children.values()].find((e=>t.startsWith(e.key)));if(!i)return null;const s=this.commonPrefixLength(t,i.key);if(s!==i.key.length)return null;e=i,t=t.slice(s)}return r.push({key:e.key,hash:e.hash,siblings:[]}),r}verifyProof(t,e){if(!t||0===t.length)return!1;let r=t[t.length-1].hash;for(let e=t.length-2;e>=0;e--){const n=t[e];let i=Buffer.concat([this.hashFn(""),this.bufferify(n.key),r]);for(const t of n.siblings)i=Buffer.concat([i,t.hash]);r=this.hashFn(i)}return r.equals(e)}}e.MerkleRadixTree=o},7970:(t,e,r)=>{var n=r(251),i=r(8305),s=i.Uint64BE,o=i.Int64BE;e.getReadFormat=function(t){var e=a.hasArrayBuffer&&t&&t.binarraybuffer,r=t&&t.int64;return{map:f&&t&&t.usemap?l:u,array:d,str:p,bin:e?g:y,ext:v,uint8:w,uint16:m,uint32:E,uint64:k(8,r?S:A),int8:b,int16:B,int32:x,int64:k(8,r?T:_),float32:k(4,P),float64:k(8,H)}},e.readUint8=w;var a=r(8204),c=r(3043),f="undefined"!=typeof Map,h=!0;function u(t,e){var r,n={},i=new Array(e),s=new Array(e),o=t.codec.decode;for(r=0;r<e;r++)i[r]=o(t),s[r]=o(t);for(r=0;r<e;r++)n[i[r]]=s[r];return n}function l(t,e){var r,n=new Map,i=new Array(e),s=new Array(e),o=t.codec.decode;for(r=0;r<e;r++)i[r]=o(t),s[r]=o(t);for(r=0;r<e;r++)n.set(i[r],s[r]);return n}function d(t,e){for(var r=new Array(e),n=t.codec.decode,i=0;i<e;i++)r[i]=n(t);return r}function p(t,e){var r=t.reserve(e),n=r+e;return c.toString.call(t.buffer,"utf-8",r,n)}function y(t,e){var r=t.reserve(e),n=r+e,i=c.slice.call(t.buffer,r,n);return a.from(i)}function g(t,e){var r=t.reserve(e),n=r+e,i=c.slice.call(t.buffer,r,n);return a.Uint8Array.from(i).buffer}function v(t,e){var r=t.reserve(e+1),n=t.buffer[r++],i=r+e,s=t.codec.getExtUnpacker(n);if(!s)throw new Error("Invalid ext type: "+(n?"0x"+n.toString(16):n));return s(c.slice.call(t.buffer,r,i))}function w(t){var e=t.reserve(1);return t.buffer[e]}function b(t){var e=t.reserve(1),r=t.buffer[e];return 128&r?r-256:r}function m(t){var e=t.reserve(2),r=t.buffer;return r[e++]<<8|r[e]}function B(t){var e=t.reserve(2),r=t.buffer,n=r[e++]<<8|r[e];return 32768&n?n-65536:n}function E(t){var e=t.reserve(4),r=t.buffer;return 16777216*r[e++]+(r[e++]<<16)+(r[e++]<<8)+r[e]}function x(t){var e=t.reserve(4),r=t.buffer;return r[e++]<<24|r[e++]<<16|r[e++]<<8|r[e]}function k(t,e){return function(r){var n=r.reserve(t);return e.call(r.buffer,n,h)}}function A(t){return new s(this,t).toNumber()}function _(t){return new o(this,t).toNumber()}function S(t){return new s(this,t)}function T(t){return new o(this,t)}function P(t){return n.read(this,t,!1,23,4)}function H(t){return n.read(this,t,!1,52,8)}},8056:function(t,e,r){var n;t.exports=(n=r(9021),function(){var t=n,e=t.lib,r=e.WordArray,i=e.Hasher,s=t.algo,o=r.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),a=r.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),c=r.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),f=r.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),h=r.create([0,1518500249,1859775393,2400959708,2840853838]),u=r.create([1352829926,1548603684,1836072691,2053994217,0]),l=s.RIPEMD160=i.extend({_doReset:function(){this._hash=r.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var n=e+r,i=t[n];t[n]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}var s,l,b,m,B,E,x,k,A,_,S,T=this._hash.words,P=h.words,H=u.words,I=o.words,U=a.words,O=c.words,M=f.words;for(E=s=T[0],x=l=T[1],k=b=T[2],A=m=T[3],_=B=T[4],r=0;r<80;r+=1)S=s+t[e+I[r]]|0,S+=r<16?d(l,b,m)+P[0]:r<32?p(l,b,m)+P[1]:r<48?y(l,b,m)+P[2]:r<64?g(l,b,m)+P[3]:v(l,b,m)+P[4],S=(S=w(S|=0,O[r]))+B|0,s=B,B=m,m=w(b,10),b=l,l=S,S=E+t[e+U[r]]|0,S+=r<16?v(x,k,A)+H[0]:r<32?g(x,k,A)+H[1]:r<48?y(x,k,A)+H[2]:r<64?p(x,k,A)+H[3]:d(x,k,A)+H[4],S=(S=w(S|=0,M[r]))+_|0,E=_,_=A,A=w(k,10),k=x,x=S;S=T[1]+b+A|0,T[1]=T[2]+m+_|0,T[2]=T[3]+B+E|0,T[3]=T[4]+s+x|0,T[4]=T[0]+l+k|0,T[0]=S},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,n=8*t.sigBytes;e[n>>>5]|=128<<24-n%32,e[14+(n+64>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),t.sigBytes=4*(e.length+1),this._process();for(var i=this._hash,s=i.words,o=0;o<5;o++){var a=s[o];s[o]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8)}return i},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});function d(t,e,r){return t^e^r}function p(t,e,r){return t&e|~t&r}function y(t,e,r){return(t|~e)^r}function g(t,e,r){return t&r|e&~r}function v(t,e,r){return t^(e|~r)}function w(t,e){return t<<e|t>>>32-e}t.RIPEMD160=i._createHelper(l),t.HmacRIPEMD160=i._createHmacHelper(l)}(Math),n.RIPEMD160)},8124:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.pad.NoPadding={pad:function(){},unpad:function(){}},n.pad.NoPadding)},8127:function(t,e,r){"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r.g&&r.g,t.exports=function(){"use strict";var t,e="3.7.7",r=e,n="function"==typeof Buffer,i="function"==typeof TextDecoder?new TextDecoder:void 0,s="function"==typeof TextEncoder?new TextEncoder:void 0,o=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="),a=(t={},o.forEach((function(e,r){return t[e]=r})),t),c=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,f=String.fromCharCode.bind(String),h="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(t){return new Uint8Array(Array.prototype.slice.call(t,0))},u=function(t){return t.replace(/=/g,"").replace(/[+\/]/g,(function(t){return"+"==t?"-":"_"}))},l=function(t){return t.replace(/[^A-Za-z0-9\+\/]/g,"")},d=function(t){for(var e,r,n,i,s="",a=t.length%3,c=0;c<t.length;){if((r=t.charCodeAt(c++))>255||(n=t.charCodeAt(c++))>255||(i=t.charCodeAt(c++))>255)throw new TypeError("invalid character found");s+=o[(e=r<<16|n<<8|i)>>18&63]+o[e>>12&63]+o[e>>6&63]+o[63&e]}return a?s.slice(0,a-3)+"===".substring(a):s},p="function"==typeof btoa?function(t){return btoa(t)}:n?function(t){return Buffer.from(t,"binary").toString("base64")}:d,y=n?function(t){return Buffer.from(t).toString("base64")}:function(t){for(var e=[],r=0,n=t.length;r<n;r+=4096)e.push(f.apply(null,t.subarray(r,r+4096)));return p(e.join(""))},g=function(t,e){return void 0===e&&(e=!1),e?u(y(t)):y(t)},v=function(t){if(t.length<2)return(e=t.charCodeAt(0))<128?t:e<2048?f(192|e>>>6)+f(128|63&e):f(224|e>>>12&15)+f(128|e>>>6&63)+f(128|63&e);var e=65536+1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320);return f(240|e>>>18&7)+f(128|e>>>12&63)+f(128|e>>>6&63)+f(128|63&e)},w=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,b=function(t){return t.replace(w,v)},m=n?function(t){return Buffer.from(t,"utf8").toString("base64")}:s?function(t){return y(s.encode(t))}:function(t){return p(b(t))},B=function(t,e){return void 0===e&&(e=!1),e?u(m(t)):m(t)},E=function(t){return B(t,!0)},x=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,k=function(t){switch(t.length){case 4:var e=((7&t.charCodeAt(0))<<18|(63&t.charCodeAt(1))<<12|(63&t.charCodeAt(2))<<6|63&t.charCodeAt(3))-65536;return f(55296+(e>>>10))+f(56320+(1023&e));case 3:return f((15&t.charCodeAt(0))<<12|(63&t.charCodeAt(1))<<6|63&t.charCodeAt(2));default:return f((31&t.charCodeAt(0))<<6|63&t.charCodeAt(1))}},A=function(t){return t.replace(x,k)},_=function(t){if(t=t.replace(/\s+/g,""),!c.test(t))throw new TypeError("malformed base64.");t+="==".slice(2-(3&t.length));for(var e,r,n,i="",s=0;s<t.length;)e=a[t.charAt(s++)]<<18|a[t.charAt(s++)]<<12|(r=a[t.charAt(s++)])<<6|(n=a[t.charAt(s++)]),i+=64===r?f(e>>16&255):64===n?f(e>>16&255,e>>8&255):f(e>>16&255,e>>8&255,255&e);return i},S="function"==typeof atob?function(t){return atob(l(t))}:n?function(t){return Buffer.from(t,"base64").toString("binary")}:_,T=n?function(t){return h(Buffer.from(t,"base64"))}:function(t){return h(S(t).split("").map((function(t){return t.charCodeAt(0)})))},P=function(t){return T(I(t))},H=n?function(t){return Buffer.from(t,"base64").toString("utf8")}:i?function(t){return i.decode(T(t))}:function(t){return A(S(t))},I=function(t){return l(t.replace(/[-_]/g,(function(t){return"-"==t?"+":"/"})))},U=function(t){return H(I(t))},O=function(t){return{value:t,enumerable:!1,writable:!0,configurable:!0}},M=function(){var t=function(t,e){return Object.defineProperty(String.prototype,t,O(e))};t("fromBase64",(function(){return U(this)})),t("toBase64",(function(t){return B(this,t)})),t("toBase64URI",(function(){return B(this,!0)})),t("toBase64URL",(function(){return B(this,!0)})),t("toUint8Array",(function(){return P(this)}))},R=function(){var t=function(t,e){return Object.defineProperty(Uint8Array.prototype,t,O(e))};t("toBase64",(function(t){return g(this,t)})),t("toBase64URI",(function(){return g(this,!0)})),t("toBase64URL",(function(){return g(this,!0)}))},F={version:e,VERSION:r,atob:S,atobPolyfill:_,btoa:p,btoaPolyfill:d,fromBase64:U,toBase64:B,encode:B,encodeURI:E,encodeURL:E,utob:b,btou:A,decode:U,isValid:function(t){if("string"!=typeof t)return!1;var e=t.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(e)||!/[^\s0-9a-zA-Z\-_]/.test(e)},fromUint8Array:g,toUint8Array:P,extendString:M,extendUint8Array:R,extendBuiltins:function(){M(),R()},Base64:{}};return Object.keys(F).forEach((function(t){return F.Base64[t]=F[t]})),F}()},8204:(t,e,r)=>{var n=e.global=r(924),i=e.hasBuffer=n&&!!n.isBuffer,s=e.hasArrayBuffer="undefined"!=typeof ArrayBuffer,o=e.isArray=r(4634);e.isArrayBuffer=s?function(t){return t instanceof ArrayBuffer||p(t)}:v;var a=e.isBuffer=i?n.isBuffer:v,c=e.isView=s?ArrayBuffer.isView||w("ArrayBuffer","buffer"):v;e.alloc=d,e.concat=function(t,r){r||(r=0,Array.prototype.forEach.call(t,(function(t){r+=t.length})));var n=this!==e&&this||t[0],i=d.call(n,r),s=0;return Array.prototype.forEach.call(t,(function(t){s+=l.copy.call(t,i,s)})),i},e.from=function(t){return"string"==typeof t?y.call(this,t):g(this).from(t)};var f=e.Array=r(8964),h=e.Buffer=r(2847),u=e.Uint8Array=r(5188),l=e.prototype=r(3043);function d(t){return g(this).alloc(t)}var p=w("ArrayBuffer");function y(t){var e=3*t.length,r=d.call(this,e),n=l.write.call(r,t);return e!==n&&(r=l.slice.call(r,0,n)),r}function g(t){return a(t)?h:c(t)?u:o(t)?f:i?h:s?u:f}function v(){return!1}function w(t,e){return t="[object "+t+"]",function(r){return null!=r&&{}.toString.call(e?r[e]:r)===t}}},8236:(t,e,r)=>{e.setExtPackers=function(t){t.addExtPacker(14,Error,[u,c]),t.addExtPacker(1,EvalError,[u,c]),t.addExtPacker(2,RangeError,[u,c]),t.addExtPacker(3,ReferenceError,[u,c]),t.addExtPacker(4,SyntaxError,[u,c]),t.addExtPacker(5,TypeError,[u,c]),t.addExtPacker(6,URIError,[u,c]),t.addExtPacker(10,RegExp,[h,c]),t.addExtPacker(11,Boolean,[f,c]),t.addExtPacker(12,String,[f,c]),t.addExtPacker(13,Date,[Number,c]),t.addExtPacker(15,Number,[f,c]),"undefined"!=typeof Uint8Array&&(t.addExtPacker(17,Int8Array,o),t.addExtPacker(18,Uint8Array,o),t.addExtPacker(19,Int16Array,o),t.addExtPacker(20,Uint16Array,o),t.addExtPacker(21,Int32Array,o),t.addExtPacker(22,Uint32Array,o),t.addExtPacker(23,Float32Array,o),"undefined"!=typeof Float64Array&&t.addExtPacker(24,Float64Array,o),"undefined"!=typeof Uint8ClampedArray&&t.addExtPacker(25,Uint8ClampedArray,o),t.addExtPacker(26,ArrayBuffer,o),t.addExtPacker(29,DataView,o)),i.hasBuffer&&t.addExtPacker(27,s,i.from)};var n,i=r(8204),s=i.global,o=i.Uint8Array.from,a={name:1,message:1,stack:1,columnNumber:1,fileName:1,lineNumber:1};function c(t){return n||(n=r(7870).encode),n(t)}function f(t){return t.valueOf()}function h(t){(t=RegExp.prototype.toString.call(t).split("/")).shift();var e=[t.pop()];return e.unshift(t.join("/")),e}function u(t){var e={};for(var r in a)e[r]=t[r];return e}},8305:function(t,e){!function(t){var e,r="undefined",n=r!==typeof Buffer&&Buffer,i=r!==typeof Uint8Array&&Uint8Array,s=r!==typeof ArrayBuffer&&ArrayBuffer,o=[0,0,0,0,0,0,0,0],a=Array.isArray||function(t){return!!t&&"[object Array]"==Object.prototype.toString.call(t)},c=4294967296;function f(a,f,m){var B=f?0:4,E=f?4:0,x=f?0:3,k=f?1:2,A=f?2:1,_=f?3:0,S=f?g:w,T=f?v:b,P=U.prototype,H="is"+a,I="_"+H;return P.buffer=void 0,P.offset=0,P[I]=!0,P.toNumber=O,P.toString=function(t){var e=this.buffer,r=this.offset,n=R(e,r+B),i=R(e,r+E),s="",o=!m&&2147483648&n;for(o&&(n=~n,i=c-i),t=t||10;;){var a=n%t*c+i;if(n=Math.floor(n/t),i=Math.floor(a/t),s=(a%t).toString(t)+s,!n&&!i)break}return o&&(s="-"+s),s},P.toJSON=O,P.toArray=h,n&&(P.toBuffer=u),i&&(P.toArrayBuffer=l),U[H]=function(t){return!(!t||!t[I])},t[a]=U,U;function U(t,n,a,f){return this instanceof U?function(t,n,a,f,h){i&&s&&(n instanceof s&&(n=new i(n)),f instanceof s&&(f=new i(f))),n||a||f||e?(d(n,a)||(h=a,f=n,a=0,n=new(e||Array)(8)),t.buffer=n,t.offset=a|=0,r!==typeof f&&("string"==typeof f?function(t,e,r,n){var i=0,s=r.length,o=0,a=0;"-"===r[0]&&i++;for(var f=i;i<s;){var h=parseInt(r[i++],n);if(!(h>=0))break;a=a*n+h,o=o*n+Math.floor(a/c),a%=c}f&&(o=~o,a?a=c-a:o++),M(t,e+B,o),M(t,e+E,a)}(n,a,f,h||10):d(f,h)?p(n,a,f,h):"number"==typeof h?(M(n,a+B,f),M(n,a+E,h)):f>0?S(n,a,f):f<0?T(n,a,f):p(n,a,o,0))):t.buffer=y(o,0)}(this,t,n,a,f):new U(t,n,a,f)}function O(){var t=this.buffer,e=this.offset,r=R(t,e+B),n=R(t,e+E);return m||(r|=0),r?r*c+n:n}function M(t,e,r){t[e+_]=255&r,r>>=8,t[e+A]=255&r,r>>=8,t[e+k]=255&r,r>>=8,t[e+x]=255&r}function R(t,e){return 16777216*t[e+x]+(t[e+k]<<16)+(t[e+A]<<8)+t[e+_]}}function h(t){var r=this.buffer,n=this.offset;return e=null,!1!==t&&0===n&&8===r.length&&a(r)?r:y(r,n)}function u(t){var r=this.buffer,i=this.offset;if(e=n,!1!==t&&0===i&&8===r.length&&Buffer.isBuffer(r))return r;var s=new n(8);return p(s,0,r,i),s}function l(t){var r=this.buffer,n=this.offset,o=r.buffer;if(e=i,!1!==t&&0===n&&o instanceof s&&8===o.byteLength)return o;var a=new i(8);return p(a,0,r,n),a.buffer}function d(t,e){var r=t&&t.length;return e|=0,r&&e+8<=r&&"string"!=typeof t[e]}function p(t,e,r,n){e|=0,n|=0;for(var i=0;i<8;i++)t[e++]=255&r[n++]}function y(t,e){return Array.prototype.slice.call(t,e,e+8)}function g(t,e,r){for(var n=e+8;n>e;)t[--n]=255&r,r/=256}function v(t,e,r){var n=e+8;for(r++;n>e;)t[--n]=255&-r^255,r/=256}function w(t,e,r){for(var n=e+8;e<n;)t[e++]=255&r,r/=256}function b(t,e,r){var n=e+8;for(r++;e<n;)t[e++]=255&-r^255,r/=256}f("Uint64BE",!0,!0),f("Int64BE",!0,!1),f("Uint64LE",!1,!0),f("Int64LE",!1,!1)}("string"!=typeof e.nodeName?e:this||{})},8454:function(t,e,r){var n,i;t.exports=(i=r(9021),r(7165),i.mode.ECB=((n=i.lib.BlockCipherMode.extend()).Encryptor=n.extend({processBlock:function(t,e){this._cipher.encryptBlock(t,e)}}),n.Decryptor=n.extend({processBlock:function(t,e){this._cipher.decryptBlock(t,e)}}),n),i.mode.ECB)},8704:(t,e,r)=>{var n=r(4634);e.createCodec=a,e.install=function(t){for(var e in t)s.prototype[e]=o(s.prototype[e],t[e])},e.filter=function(t){return n(t)?function(t){return t=t.slice(),function(r){return t.reduce(e,r)};function e(t,e){return e(t)}}(t):t};var i=r(8204);function s(t){if(!(this instanceof s))return new s(t);this.options=t,this.init()}function o(t,e){return t&&e?function(){return t.apply(this,arguments),e.apply(this,arguments)}:t||e}function a(t){return new s(t)}s.prototype.init=function(){var t=this.options;return t&&t.uint8array&&(this.bufferish=i.Uint8Array),this},e.preset=a({preset:!0})},8762:(t,e,r)=>{e.Decoder=s;var n=r(1611),i=r(3785).n;function s(t){if(!(this instanceof s))return new s(t);i.call(this,t)}s.prototype=new i,n.mixin(s.prototype),s.prototype.decode=function(t){arguments.length&&this.write(t),this.flush()},s.prototype.push=function(t){this.emit("data",t)},s.prototype.end=function(t){this.decode(t),this.emit("end")}},8884:(t,e,r)=>{r(3294),r(897),e.codec={preset:r(8704).preset}},8924:t=>{t.exports=function(t){for(var e=new Buffer(t.length),r=0,n=t.length-1;r<=n;++r,--n)e[r]=t[n],e[n]=t[r];return e}},8941:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.pbkdf2Async=e.pbkdf2=void 0;const n=r(9615),i=r(9175);function s(t,e,r,s){(0,i.assertHash)(t);const o=(0,i.checkOpts)({dkLen:32,asyncTick:10},s),{c:a,dkLen:c,asyncTick:f}=o;if((0,i.assertNumber)(a),(0,i.assertNumber)(c),(0,i.assertNumber)(f),a<1)throw new Error("PBKDF2: iterations (c) should be >= 1");const h=(0,i.toBytes)(e),u=(0,i.toBytes)(r),l=new Uint8Array(c),d=n.hmac.init(t,h),p=d._cloneInto().update(u);return{c:a,dkLen:c,asyncTick:f,DK:l,PRF:d,PRFSalt:p}}function o(t,e,r,n,i){return t.destroy(),e.destroy(),n&&n.destroy(),i.fill(0),r}e.pbkdf2=function(t,e,r,n){const{c:a,dkLen:c,DK:f,PRF:h,PRFSalt:u}=s(t,e,r,n);let l;const d=new Uint8Array(4),p=(0,i.createView)(d),y=new Uint8Array(h.outputLen);for(let t=1,e=0;e<c;t++,e+=h.outputLen){const r=f.subarray(e,e+h.outputLen);p.setInt32(0,t,!1),(l=u._cloneInto(l)).update(d).digestInto(y),r.set(y.subarray(0,r.length));for(let t=1;t<a;t++){h._cloneInto(l).update(y).digestInto(y);for(let t=0;t<r.length;t++)r[t]^=y[t]}}return o(h,u,f,l,y)},e.pbkdf2Async=async function(t,e,r,n){const{c:a,dkLen:c,asyncTick:f,DK:h,PRF:u,PRFSalt:l}=s(t,e,r,n);let d;const p=new Uint8Array(4),y=(0,i.createView)(p),g=new Uint8Array(u.outputLen);for(let t=1,e=0;e<c;t++,e+=u.outputLen){const r=h.subarray(e,e+u.outputLen);y.setInt32(0,t,!1),(d=l._cloneInto(d)).update(p).digestInto(g),r.set(g.subarray(0,r.length)),await(0,i.asyncLoop)(a-1,f,(t=>{u._cloneInto(d).update(g).digestInto(g);for(let t=0;t<r.length;t++)r[t]^=g[t]}))}return o(u,l,h,d,g)}},8964:(t,e,r)=>{var n=r(8204),i=t.exports=s(0);function s(t){return new Array(t)}i.alloc=s,i.concat=n.concat,i.from=function(t){if(!n.isBuffer(t)&&n.isView(t))t=n.Uint8Array.from(t);else if(n.isArrayBuffer(t))t=new Uint8Array(t);else{if("string"==typeof t)return n.from.call(i,t);if("number"==typeof t)throw new TypeError('"value" argument must not be a number')}return Array.prototype.slice.call(t)}},9021:function(t,e,r){var n;t.exports=(n=n||function(t){var e;if("undefined"!=typeof window&&window.crypto&&(e=window.crypto),"undefined"!=typeof self&&self.crypto&&(e=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(e=globalThis.crypto),!e&&"undefined"!=typeof window&&window.msCrypto&&(e=window.msCrypto),!e&&void 0!==r.g&&r.g.crypto&&(e=r.g.crypto),!e)try{e=r(477)}catch(t){}var n=function(){if(e){if("function"==typeof e.getRandomValues)try{return e.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof e.randomBytes)try{return e.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")},i=Object.create||function(){function t(){}return function(e){var r;return t.prototype=e,r=new t,t.prototype=null,r}}(),s={},o=s.lib={},a=o.Base={extend:function(t){var e=i(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},c=o.WordArray=a.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||h).stringify(this)},concat:function(t){var e=this.words,r=t.words,n=this.sigBytes,i=t.sigBytes;if(this.clamp(),n%4)for(var s=0;s<i;s++){var o=r[s>>>2]>>>24-s%4*8&255;e[n+s>>>2]|=o<<24-(n+s)%4*8}else for(var a=0;a<i;a+=4)e[n+a>>>2]=r[a>>>2];return this.sigBytes+=i,this},clamp:function(){var e=this.words,r=this.sigBytes;e[r>>>2]&=4294967295<<32-r%4*8,e.length=t.ceil(r/4)},clone:function(){var t=a.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],r=0;r<t;r+=4)e.push(n());return new c.init(e,t)}}),f=s.enc={},h=f.Hex={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],i=0;i<r;i++){var s=e[i>>>2]>>>24-i%4*8&255;n.push((s>>>4).toString(16)),n.push((15&s).toString(16))}return n.join("")},parse:function(t){for(var e=t.length,r=[],n=0;n<e;n+=2)r[n>>>3]|=parseInt(t.substr(n,2),16)<<24-n%8*4;return new c.init(r,e/2)}},u=f.Latin1={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],i=0;i<r;i++){var s=e[i>>>2]>>>24-i%4*8&255;n.push(String.fromCharCode(s))}return n.join("")},parse:function(t){for(var e=t.length,r=[],n=0;n<e;n++)r[n>>>2]|=(255&t.charCodeAt(n))<<24-n%4*8;return new c.init(r,e)}},l=f.Utf8={stringify:function(t){try{return decodeURIComponent(escape(u.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return u.parse(unescape(encodeURIComponent(t)))}},d=o.BufferedBlockAlgorithm=a.extend({reset:function(){this._data=new c.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=l.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var r,n=this._data,i=n.words,s=n.sigBytes,o=this.blockSize,a=s/(4*o),f=(a=e?t.ceil(a):t.max((0|a)-this._minBufferSize,0))*o,h=t.min(4*f,s);if(f){for(var u=0;u<f;u+=o)this._doProcessBlock(i,u);r=i.splice(0,f),n.sigBytes-=h}return new c.init(r,h)},clone:function(){var t=a.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),p=(o.Hasher=d.extend({cfg:a.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,r){return new t.init(r).finalize(e)}},_createHmacHelper:function(t){return function(e,r){return new p.HMAC.init(t,r).finalize(e)}}}),s.algo={});return s}(Math),n)},9175:(t,e,r)=>{"use strict";t=r.nmd(t),Object.defineProperty(e,"__esModule",{value:!0}),e.randomBytes=e.wrapConstructorWithOpts=e.wrapConstructor=e.checkOpts=e.Hash=e.assertHash=e.assertBytes=e.assertBool=e.assertNumber=e.concatBytes=e.toBytes=e.utf8ToBytes=e.asyncLoop=e.nextTick=e.hexToBytes=e.bytesToHex=e.isLE=e.rotr=e.createView=e.u32=e.u8=void 0;const n=r(9301);if(e.u8=t=>new Uint8Array(t.buffer,t.byteOffset,t.byteLength),e.u32=t=>new Uint32Array(t.buffer,t.byteOffset,Math.floor(t.byteLength/4)),e.createView=t=>new DataView(t.buffer,t.byteOffset,t.byteLength),e.rotr=(t,e)=>t<<32-e|t>>>e,e.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0],!e.isLE)throw new Error("Non little-endian hardware is not supported");const i=Array.from({length:256},((t,e)=>e.toString(16).padStart(2,"0")));function s(t){if(2!==t.length)throw new Error("Invalid byte sequence");const e=Number.parseInt(t,16);if(Number.isNaN(e))throw new Error("Invalid byte sequence");return e}function o(t){if("string"!=typeof t)throw new TypeError("utf8ToBytes expected string, got "+typeof t);return(new TextEncoder).encode(t)}function a(t){if("string"==typeof t&&(t=o(t)),!(t instanceof Uint8Array))throw new TypeError(`Expected input type is Uint8Array (got ${typeof t})`);return t}function c(t){if(!Number.isSafeInteger(t)||t<0)throw new Error(`Wrong positive integer: ${t}`)}e.bytesToHex=function(t){let e="";for(let r=0;r<t.length;r++)e+=i[t[r]];return e},e.hexToBytes=function(t){if("string"!=typeof t)throw new TypeError("hexToBytes: expected string, got "+typeof t);if(t.length%2)throw new Error("hexToBytes: received invalid unpadded hex");const e=new Uint8Array(t.length/2);for(let r=0;r<e.length;r++){const n=2*r;e[r]=s(t.slice(n,n+2))}return e},e.nextTick=(()=>{const e="function"==typeof t.require&&t.require.bind(t);try{if(e){const{setImmediate:t}=e("timers");return()=>new Promise((e=>t(e)))}}catch(t){}return()=>new Promise((t=>setTimeout(t,0)))})(),e.asyncLoop=async function(t,r,n){let i=Date.now();for(let s=0;s<t;s++){n(s);const t=Date.now()-i;t>=0&&t<r||(await(0,e.nextTick)(),i+=t)}},e.utf8ToBytes=o,e.toBytes=a,e.concatBytes=function(...t){if(1===t.length)return t[0];const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);for(let e=0,n=0;e<t.length;e++){const i=t[e];r.set(i,n),n+=i.length}return r},e.assertNumber=c,e.assertBool=function(t){if("boolean"!=typeof t)throw new Error(`Expected boolean, not ${t}`)},e.assertBytes=function(t,...e){if(!(t instanceof Uint8Array)||e.length&&!e.includes(t.length))throw new TypeError(`Expected ${e} bytes, not ${typeof t} with length=${t.length}`)},e.assertHash=function(t){if("function"!=typeof t||"function"!=typeof t.init)throw new Error("Hash should be wrapped by utils.wrapConstructor");c(t.outputLen),c(t.blockLen)},e.Hash=class{clone(){return this._cloneInto()}},e.checkOpts=function(t,e){if(void 0!==e&&("object"!=typeof e||(r=e,"[object Object]"!==Object.prototype.toString.call(r)||r.constructor!==Object)))throw new TypeError("Options should be object or undefined");var r;return Object.assign(t,e)},e.wrapConstructor=function(t){const e=e=>t().update(a(e)).digest(),r=t();return e.outputLen=r.outputLen,e.blockLen=r.blockLen,e.init=e.create=()=>t(),e},e.wrapConstructorWithOpts=function(t){const e=(e,r)=>t(r).update(a(e)).digest(),r=t({});return e.outputLen=r.outputLen,e.blockLen=r.blockLen,e.init=e.create=e=>t(e),e},e.randomBytes=function(t=32){if(n.crypto.web)return n.crypto.web.getRandomValues(new Uint8Array(t));if(n.crypto.node)return new Uint8Array(n.crypto.node.randomBytes(t).buffer);throw new Error("The environment doesn't have randomBytes function")}},9232:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MerkleSumTree=e.ProofStep=e.Leaf=e.Bucket=void 0;const n=r(7284);class i{constructor(t,e){this.size=BigInt(t),this.hashed=e,this.parent=null,this.left=null,this.right=null}}e.Bucket=i,e.Leaf=class{constructor(t,e,r){this.hashFn=t,this.rng=e.map((t=>BigInt(t))),this.data=r}getBucket(){let t;return t=this.data?this.hashFn(this.data):Buffer.alloc(32),new i(BigInt(this.rng[1])-BigInt(this.rng[0]),t)}};class s{constructor(t,e){this.bucket=t,this.right=e}}e.ProofStep=s;class o extends n.Base{constructor(t,e){super(),this.leaves=t,this.hashFn=e,o.checkConsecutive(t),this.buckets=[];for(const e of t)this.buckets.push(e.getBucket());let r=[];for(const t of this.buckets)r.push(t);for(;1!==r.length;){const t=[];for(;r.length;)if(r.length>=2){const e=r.shift(),n=r.shift(),s=e.size+n.size,o=this.hashFn(Buffer.concat([this.sizeToBuffer(e.size),this.bufferify(e.hashed),this.sizeToBuffer(n.size),this.bufferify(n.hashed)])),a=new i(s,o);n.parent=a,e.parent=n.parent,e.right=n,n.left=e,t.push(a)}else t.push(r.shift());r=t}this.root=r[0]}sizeToBuffer(t){const e=Buffer.alloc(8);return new DataView(e.buffer).setBigInt64(0,BigInt(t),!1),e}static checkConsecutive(t){let e=BigInt(0);for(const r of t){if(r.rng[0]!==e)throw new Error("leaf ranges are invalid");e=BigInt(r.rng[1])}}getProof(t){let e=this.buckets[Number(t)];const r=[];for(;e&&e.parent;){const t=!!e.right,n=e.right?e.right:e.left;e=e.parent,r.push(new s(n,t))}return r}sum(t){let e=BigInt(0);for(const r of t)e+=BigInt(r);return e}verifyProof(t,e,r){const n=[this.sum(r.filter((t=>!t.right)).map((t=>t.bucket.size))),BigInt(t.size)-this.sum(r.filter((t=>t.right)).map((t=>t.bucket.size)))];if(n[0]!==e.rng[0]||n[1]!==e.rng[1])return!1;let s,o=e.getBucket();for(const t of r)s=t.right?this.hashFn(Buffer.concat([this.sizeToBuffer(o.size),this.bufferify(o.hashed),this.sizeToBuffer(t.bucket.size),this.bufferify(t.bucket.hashed)])):this.hashFn(Buffer.concat([this.sizeToBuffer(t.bucket.size),this.bufferify(t.bucket.hashed),this.sizeToBuffer(o.size),this.bufferify(o.hashed)])),o=new i(BigInt(o.size)+BigInt(t.bucket.size),s);return o.size===t.size&&o.hashed.toString("hex")===t.hashed.toString("hex")}}e.MerkleSumTree=o,"undefined"!=typeof window&&(window.MerkleSumTree=o),e.default=o},9301:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.crypto=void 0,e.crypto={node:void 0,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0}},9506:function(t,e,r){var n,i,s,o,a,c,f,h;t.exports=(h=r(9021),r(5471),r(1025),s=(i=(n=h).lib).Base,o=i.WordArray,c=(a=n.algo).MD5,f=a.EvpKDF=s.extend({cfg:s.extend({keySize:4,hasher:c,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r,n=this.cfg,i=n.hasher.create(),s=o.create(),a=s.words,c=n.keySize,f=n.iterations;a.length<c;){r&&i.update(r),r=i.update(t).finalize(e),i.reset();for(var h=1;h<f;h++)r=i.finalize(r),i.reset();s.concat(r)}return s.sigBytes=4*c,s}}),n.EvpKDF=function(t,e,r){return f.create(r).compute(t,e)},h.EvpKDF)},9557:function(t,e,r){var n,i,s,o,a,c,f,h;t.exports=(h=r(9021),r(3240),r(1380),i=(n=h).x64,s=i.Word,o=i.WordArray,a=n.algo,c=a.SHA512,f=a.SHA384=c.extend({_doReset:function(){this._hash=new o.init([new s.init(3418070365,3238371032),new s.init(1654270250,914150663),new s.init(2438529370,812702999),new s.init(355462360,4144912697),new s.init(1731405415,4290775857),new s.init(2394180231,1750603025),new s.init(3675008525,1694076839),new s.init(1203062813,3204075428)])},_doFinalize:function(){var t=c._doFinalize.call(this);return t.sigBytes-=16,t}}),n.SHA384=c._createHelper(f),n.HmacSHA384=c._createHmacHelper(f),h.SHA384)},9598:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.utils=e.schnorr=e.verify=e.signSync=e.sign=e.getSharedSecret=e.recoverPublicKey=e.getPublicKey=e.Signature=e.Point=e.CURVE=void 0;const n=r(4923),i=BigInt(0),s=BigInt(1),o=BigInt(2),a=BigInt(3),c=BigInt(8),f=Object.freeze({a:i,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:s,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")});e.CURVE=f;const h=(t,e)=>(t+e/o)/e,u={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(t){const{n:e}=f,r=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),n=-s*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),i=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),o=r,a=BigInt("0x100000000000000000000000000000000"),c=h(o*t,e),u=h(-n*t,e);let l=R(t-c*r-u*i,e),d=R(-c*n-u*o,e);const p=l>a,y=d>a;if(p&&(l=e-l),y&&(d=e-d),l>a||d>a)throw new Error("splitScalarEndo: Endomorphism failed, k="+t);return{k1neg:p,k1:l,k2neg:y,k2:d}}};function l(t){const{a:e,b:r}=f,n=R(t*t),i=R(n*t);return R(i+e*t+r)}const d=f.a===i;class p extends Error{constructor(t){super(t)}}function y(t){if(!(t instanceof g))throw new TypeError("JacobianPoint expected")}class g{constructor(t,e,r){this.x=t,this.y=e,this.z=r}static fromAffine(t){if(!(t instanceof b))throw new TypeError("JacobianPoint#fromAffine: expected Point");return t.equals(b.ZERO)?g.ZERO:new g(t.x,t.y,s)}static toAffineBatch(t){const e=function(t,e=f.P){const r=new Array(t.length),n=L(t.reduce(((t,n,s)=>n===i?t:(r[s]=t,R(t*n,e))),s),e);return t.reduceRight(((t,n,s)=>n===i?t:(r[s]=R(t*r[s],e),R(t*n,e))),n),r}(t.map((t=>t.z)));return t.map(((t,r)=>t.toAffine(e[r])))}static normalizeZ(t){return g.toAffineBatch(t).map(g.fromAffine)}equals(t){y(t);const{x:e,y:r,z:n}=this,{x:i,y:s,z:o}=t,a=R(n*n),c=R(o*o),f=R(e*c),h=R(i*a),u=R(R(r*o)*c),l=R(R(s*n)*a);return f===h&&u===l}negate(){return new g(this.x,R(-this.y),this.z)}double(){const{x:t,y:e,z:r}=this,n=R(t*t),i=R(e*e),s=R(i*i),f=t+i,h=R(o*(R(f*f)-n-s)),u=R(a*n),l=R(u*u),d=R(l-o*h),p=R(u*(h-d)-c*s),y=R(o*e*r);return new g(d,p,y)}add(t){y(t);const{x:e,y:r,z:n}=this,{x:s,y:a,z:c}=t;if(s===i||a===i)return this;if(e===i||r===i)return t;const f=R(n*n),h=R(c*c),u=R(e*h),l=R(s*f),d=R(R(r*c)*h),p=R(R(a*n)*f),v=R(l-u),w=R(p-d);if(v===i)return w===i?this.double():g.ZERO;const b=R(v*v),m=R(v*b),B=R(u*b),E=R(w*w-m-o*B),x=R(w*(B-E)-d*m),k=R(n*c*v);return new g(E,x,k)}subtract(t){return this.add(t.negate())}multiplyUnsafe(t){const e=g.ZERO;if("bigint"==typeof t&&t===i)return e;let r=M(t);if(r===s)return this;if(!d){let t=e,n=this;for(;r>i;)r&s&&(t=t.add(n)),n=n.double(),r>>=s;return t}let{k1neg:n,k1:o,k2neg:a,k2:c}=u.splitScalar(r),f=e,h=e,l=this;for(;o>i||c>i;)o&s&&(f=f.add(l)),c&s&&(h=h.add(l)),l=l.double(),o>>=s,c>>=s;return n&&(f=f.negate()),a&&(h=h.negate()),h=new g(R(h.x*u.beta),h.y,h.z),f.add(h)}precomputeWindow(t){const e=d?128/t+1:256/t+1,r=[];let n=this,i=n;for(let s=0;s<e;s++){i=n,r.push(i);for(let e=1;e<2**(t-1);e++)i=i.add(n),r.push(i);n=i.double()}return r}wNAF(t,e){!e&&this.equals(g.BASE)&&(e=b.BASE);const r=e&&e._WINDOW_SIZE||1;if(256%r)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let n=e&&w.get(e);n||(n=this.precomputeWindow(r),e&&1!==r&&(n=g.normalizeZ(n),w.set(e,n)));let i=g.ZERO,o=g.BASE;const a=1+(d?128/r:256/r),c=2**(r-1),f=BigInt(2**r-1),h=2**r,u=BigInt(r);for(let e=0;e<a;e++){const r=e*c;let a=Number(t&f);t>>=u,a>c&&(a-=h,t+=s);const l=r,d=r+Math.abs(a)-1,p=e%2!=0,y=a<0;0===a?o=o.add(v(p,n[l])):i=i.add(v(y,n[d]))}return{p:i,f:o}}multiply(t,e){let r,n,i=M(t);if(d){const{k1neg:t,k1:s,k2neg:o,k2:a}=u.splitScalar(i);let{p:c,f}=this.wNAF(s,e),{p:h,f:l}=this.wNAF(a,e);c=v(t,c),h=v(o,h),h=new g(R(h.x*u.beta),h.y,h.z),r=c.add(h),n=f.add(l)}else{const{p:t,f:s}=this.wNAF(i,e);r=t,n=s}return g.normalizeZ([r,n])[0]}toAffine(t){const{x:e,y:r,z:n}=this,i=this.equals(g.ZERO);null==t&&(t=i?c:L(n));const o=t,a=R(o*o),f=R(a*o),h=R(e*a),u=R(r*f),l=R(n*o);if(i)return b.ZERO;if(l!==s)throw new Error("invZ was invalid");return new b(h,u)}}function v(t,e){const r=e.negate();return t?r:e}g.BASE=new g(f.Gx,f.Gy,s),g.ZERO=new g(i,s,i);const w=new WeakMap;class b{constructor(t,e){this.x=t,this.y=e}_setWindowSize(t){this._WINDOW_SIZE=t,w.delete(this)}hasEvenY(){return this.y%o===i}static fromCompressedHex(t){const e=32===t.length,r=U(e?t:t.subarray(1));if(!V(r))throw new Error("Point is not on curve");let n=function(t){const{P:e}=f,r=BigInt(6),n=BigInt(11),i=BigInt(22),s=BigInt(23),c=BigInt(44),h=BigInt(88),u=t*t*t%e,l=u*u*t%e,d=F(l,a)*l%e,p=F(d,a)*l%e,y=F(p,o)*u%e,g=F(y,n)*y%e,v=F(g,i)*g%e,w=F(v,c)*v%e,b=F(w,h)*w%e,m=F(b,c)*v%e,B=F(m,a)*l%e,E=F(B,s)*g%e,x=F(E,r)*u%e,k=F(x,o);if(k*k%e!==t)throw new Error("Cannot find square root");return k}(l(r));const i=(n&s)===s;e?i&&(n=R(-n)):!(1&~t[0])!==i&&(n=R(-n));const c=new b(r,n);return c.assertValidity(),c}static fromUncompressedHex(t){const e=U(t.subarray(1,33)),r=U(t.subarray(33,65)),n=new b(e,r);return n.assertValidity(),n}static fromHex(t){const e=O(t),r=e.length,n=e[0];if(32===r)return this.fromCompressedHex(e);if(33===r&&(2===n||3===n))return this.fromCompressedHex(e);if(65===r&&4===n)return this.fromUncompressedHex(e);throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${r}`)}static fromPrivateKey(t){return b.BASE.multiply(K(t))}static fromSignature(t,e,r){const{r:n,s:i}=X(e);if(![0,1,2,3].includes(r))throw new Error("Cannot recover: invalid recovery bit");const s=C(O(t)),{n:o}=f,a=2===r||3===r?n+o:n,c=L(a,o),h=R(-s*c,o),u=R(i*c,o),l=1&r?"03":"02",d=b.fromHex(l+S(a)),p=b.BASE.multiplyAndAddUnsafe(d,h,u);if(!p)throw new Error("Cannot recover signature: point at infinify");return p.assertValidity(),p}toRawBytes(t=!1){return I(this.toHex(t))}toHex(t=!1){const e=S(this.x);return t?`${this.hasEvenY()?"02":"03"}${e}`:`04${e}${S(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const t="Point is not on elliptic curve",{x:e,y:r}=this;if(!V(e)||!V(r))throw new Error(t);const n=R(r*r);if(R(n-l(e))!==i)throw new Error(t)}equals(t){return this.x===t.x&&this.y===t.y}negate(){return new b(this.x,R(-this.y))}double(){return g.fromAffine(this).double().toAffine()}add(t){return g.fromAffine(this).add(g.fromAffine(t)).toAffine()}subtract(t){return this.add(t.negate())}multiply(t){return g.fromAffine(this).multiply(t,this).toAffine()}multiplyAndAddUnsafe(t,e,r){const n=g.fromAffine(this),o=e===i||e===s||this!==b.BASE?n.multiplyUnsafe(e):n.multiply(e),a=g.fromAffine(t).multiplyUnsafe(r),c=o.add(a);return c.equals(g.ZERO)?void 0:c.toAffine()}}function m(t){return Number.parseInt(t[0],16)>=8?"00"+t:t}function B(t){if(t.length<2||2!==t[0])throw new Error(`Invalid signature integer tag: ${A(t)}`);const e=t[1],r=t.subarray(2,e+2);if(!e||r.length!==e)throw new Error("Invalid signature integer: wrong length");if(0===r[0]&&r[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:U(r),left:t.subarray(e+2)}}e.Point=b,b.BASE=new b(f.Gx,f.Gy),b.ZERO=new b(i,i);class E{constructor(t,e){this.r=t,this.s=e,this.assertValidity()}static fromCompact(t){const e=t instanceof Uint8Array,r="Signature.fromCompact";if("string"!=typeof t&&!e)throw new TypeError(`${r}: Expected string or Uint8Array`);const n=e?A(t):t;if(128!==n.length)throw new Error(`${r}: Expected 64-byte hex`);return new E(H(n.slice(0,64)),H(n.slice(64,128)))}static fromDER(t){const e=t instanceof Uint8Array;if("string"!=typeof t&&!e)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r,s:n}=function(t){if(t.length<2||48!=t[0])throw new Error(`Invalid signature tag: ${A(t)}`);if(t[1]!==t.length-2)throw new Error("Invalid signature: incorrect length");const{data:e,left:r}=B(t.subarray(2)),{data:n,left:i}=B(r);if(i.length)throw new Error(`Invalid signature: left bytes after parsing: ${A(i)}`);return{r:e,s:n}}(e?t:I(t));return new E(r,n)}static fromHex(t){return this.fromDER(t)}assertValidity(){const{r:t,s:e}=this;if(!j(t))throw new Error("Invalid Signature: r must be 0 < r < n");if(!j(e))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const t=f.n>>s;return this.s>t}normalizeS(){return this.hasHighS()?new E(this.r,R(-this.s,f.n)):this}toDERRawBytes(){return I(this.toDERHex())}toDERHex(){const t=m(P(this.s)),e=m(P(this.r)),r=t.length/2,n=e.length/2,i=P(r),s=P(n);return`30${P(n+r+4)}02${s}${e}02${i}${t}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return I(this.toCompactHex())}toCompactHex(){return S(this.r)+S(this.s)}}function x(...t){if(!t.every((t=>t instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===t.length)return t[0];const e=t.reduce(((t,e)=>t+e.length),0),r=new Uint8Array(e);for(let e=0,n=0;e<t.length;e++){const i=t[e];r.set(i,n),n+=i.length}return r}e.Signature=E;const k=Array.from({length:256},((t,e)=>e.toString(16).padStart(2,"0")));function A(t){if(!(t instanceof Uint8Array))throw new Error("Expected Uint8Array");let e="";for(let r=0;r<t.length;r++)e+=k[t[r]];return e}const _=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function S(t){if("bigint"!=typeof t)throw new Error("Expected bigint");if(!(i<=t&&t<_))throw new Error("Expected number 0 <= n < 2^256");return t.toString(16).padStart(64,"0")}function T(t){const e=I(S(t));if(32!==e.length)throw new Error("Error: expected 32 bytes");return e}function P(t){const e=t.toString(16);return 1&e.length?`0${e}`:e}function H(t){if("string"!=typeof t)throw new TypeError("hexToNumber: expected string, got "+typeof t);return BigInt(`0x${t}`)}function I(t){if("string"!=typeof t)throw new TypeError("hexToBytes: expected string, got "+typeof t);if(t.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+t.length);const e=new Uint8Array(t.length/2);for(let r=0;r<e.length;r++){const n=2*r,i=t.slice(n,n+2),s=Number.parseInt(i,16);if(Number.isNaN(s)||s<0)throw new Error("Invalid byte sequence");e[r]=s}return e}function U(t){return H(A(t))}function O(t){return t instanceof Uint8Array?Uint8Array.from(t):I(t)}function M(t){if("number"==typeof t&&Number.isSafeInteger(t)&&t>0)return BigInt(t);if("bigint"==typeof t&&j(t))return t;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function R(t,e=f.P){const r=t%e;return r>=i?r:e+r}function F(t,e){const{P:r}=f;let n=t;for(;e-- >i;)n*=n,n%=r;return n}function L(t,e=f.P){if(t===i||e<=i)throw new Error(`invert: expected positive integers, got n=${t} mod=${e}`);let r=R(t,e),n=e,o=i,a=s,c=s,h=i;for(;r!==i;){const t=n/r,e=n%r,i=o-c*t,s=a-h*t;n=r,r=e,o=c,a=h,c=i,h=s}if(n!==s)throw new Error("invert: does not exist");return R(o,e)}function C(t,e=!1){const r=function(t){const e=8*t.length-256,r=U(t);return e>0?r>>BigInt(e):r}(t);if(e)return r;const{n}=f;return r>=n?r-n:r}let D,z;class N{constructor(t,e){if(this.hashLen=t,this.qByteLen=e,"number"!=typeof t||t<2)throw new Error("hashLen must be a number");if("number"!=typeof e||e<2)throw new Error("qByteLen must be a number");this.v=new Uint8Array(t).fill(1),this.k=new Uint8Array(t).fill(0),this.counter=0}hmac(...t){return e.utils.hmacSha256(this.k,...t)}hmacSync(...t){return z(this.k,...t)}checkSync(){if("function"!=typeof z)throw new p("hmacSha256Sync needs to be set")}incr(){if(this.counter>=1e3)throw new Error("Tried 1,000 k values for sign(), all were invalid");this.counter+=1}async reseed(t=new Uint8Array){this.k=await this.hmac(this.v,Uint8Array.from([0]),t),this.v=await this.hmac(this.v),0!==t.length&&(this.k=await this.hmac(this.v,Uint8Array.from([1]),t),this.v=await this.hmac(this.v))}reseedSync(t=new Uint8Array){this.checkSync(),this.k=this.hmacSync(this.v,Uint8Array.from([0]),t),this.v=this.hmacSync(this.v),0!==t.length&&(this.k=this.hmacSync(this.v,Uint8Array.from([1]),t),this.v=this.hmacSync(this.v))}async generate(){this.incr();let t=0;const e=[];for(;t<this.qByteLen;){this.v=await this.hmac(this.v);const r=this.v.slice();e.push(r),t+=this.v.length}return x(...e)}generateSync(){this.checkSync(),this.incr();let t=0;const e=[];for(;t<this.qByteLen;){this.v=this.hmacSync(this.v);const r=this.v.slice();e.push(r),t+=this.v.length}return x(...e)}}function j(t){return i<t&&t<f.n}function V(t){return i<t&&t<f.P}function W(t,e,r,n=!0){const{n:o}=f,a=C(t,!0);if(!j(a))return;const c=L(a,o),h=b.BASE.multiply(a),u=R(h.x,o);if(u===i)return;const l=R(c*R(e+r*u,o),o);if(l===i)return;let d=new E(u,l),p=(h.x===d.r?0:2)|Number(h.y&s);return n&&d.hasHighS()&&(d=d.normalizeS(),p^=1),{sig:d,recovery:p}}function K(t){let e;if("bigint"==typeof t)e=t;else if("number"==typeof t&&Number.isSafeInteger(t)&&t>0)e=BigInt(t);else if("string"==typeof t){if(64!==t.length)throw new Error("Expected 32 bytes of private key");e=H(t)}else{if(!(t instanceof Uint8Array))throw new TypeError("Expected valid private key");if(32!==t.length)throw new Error("Expected 32 bytes of private key");e=U(t)}if(!j(e))throw new Error("Expected private key: 0 < key < n");return e}function Y(t){return t instanceof b?(t.assertValidity(),t):b.fromHex(t)}function X(t){if(t instanceof E)return t.assertValidity(),t;try{return E.fromDER(t)}catch(e){return E.fromCompact(t)}}function $(t){const e=t instanceof Uint8Array,r="string"==typeof t,n=(e||r)&&t.length;return e?33===n||65===n:r?66===n||130===n:t instanceof b}function q(t){return U(t.length>32?t.slice(0,32):t)}function G(t){const e=q(t),r=R(e,f.n);return Z(r<i?e:r)}function Z(t){return T(t)}function J(t,r,n){if(null==t)throw new Error(`sign: expected valid message hash, not "${t}"`);const i=O(t),s=K(r),o=[Z(s),G(i)];if(null!=n){!0===n&&(n=e.utils.randomBytes(32));const t=O(n);if(32!==t.length)throw new Error("sign: Expected 32 bytes of extra data");o.push(t)}return{seed:x(...o),m:q(i),d:s}}function Q(t,e){const{sig:r,recovery:n}=t,{der:i,recovered:s}=Object.assign({canonical:!0,der:!0},e),o=i?r.toDERRawBytes():r.toCompactRawBytes();return s?[o,n]:o}e.getPublicKey=function(t,e=!1){return b.fromPrivateKey(t).toRawBytes(e)},e.recoverPublicKey=function(t,e,r,n=!1){return b.fromSignature(t,e,r).toRawBytes(n)},e.getSharedSecret=function(t,e,r=!1){if($(t))throw new TypeError("getSharedSecret: first arg must be private key");if(!$(e))throw new TypeError("getSharedSecret: second arg must be public key");const n=Y(e);return n.assertValidity(),n.multiply(K(t)).toRawBytes(r)},e.sign=async function(t,e,r={}){const{seed:n,m:i,d:s}=J(t,e,r.extraEntropy),o=new N(32,32);let a;for(await o.reseed(n);!(a=W(await o.generate(),i,s,r.canonical));)await o.reseed();return Q(a,r)},e.signSync=function(t,e,r={}){const{seed:n,m:i,d:s}=J(t,e,r.extraEntropy),o=new N(32,32);let a;for(o.reseedSync(n);!(a=W(o.generateSync(),i,s,r.canonical));)o.reseedSync();return Q(a,r)};const tt={strict:!0};function et(t){return R(U(t),f.n)}e.verify=function(t,e,r,n=tt){let i;try{i=X(t),e=O(e)}catch(t){return!1}const{r:s,s:o}=i;if(n.strict&&i.hasHighS())return!1;const a=C(e);let c;try{c=Y(r)}catch(t){return!1}const{n:h}=f,u=L(o,h),l=R(a*u,h),d=R(s*u,h),p=b.BASE.multiplyAndAddUnsafe(c,l,d);return!!p&&R(p.x,h)===s};class rt{constructor(t,e){this.r=t,this.s=e,this.assertValidity()}static fromHex(t){const e=O(t);if(64!==e.length)throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${e.length}`);const r=U(e.subarray(0,32)),n=U(e.subarray(32,64));return new rt(r,n)}assertValidity(){const{r:t,s:e}=this;if(!V(t)||!j(e))throw new Error("Invalid signature")}toHex(){return S(this.r)+S(this.s)}toRawBytes(){return I(this.toHex())}}class nt{constructor(t,r,n=e.utils.randomBytes()){if(null==t)throw new TypeError(`sign: Expected valid message, not "${t}"`);this.m=O(t);const{x:i,scalar:s}=this.getScalar(K(r));if(this.px=i,this.d=s,this.rand=O(n),32!==this.rand.length)throw new TypeError("sign: Expected 32 bytes of aux randomness")}getScalar(t){const e=b.fromPrivateKey(t),r=e.hasEvenY()?t:f.n-t;return{point:e,scalar:r,x:e.toRawX()}}initNonce(t,e){return T(t^U(e))}finalizeNonce(t){const e=R(U(t),f.n);if(e===i)throw new Error("sign: Creation of signature failed. k is zero");const{point:r,x:n,scalar:s}=this.getScalar(e);return{R:r,rx:n,k:s}}finalizeSig(t,e,r,n){return new rt(t.x,R(e+r*n,f.n)).toRawBytes()}error(){throw new Error("sign: Invalid signature produced")}async calc(){const{m:t,d:r,px:n,rand:i}=this,s=e.utils.taggedHash,o=this.initNonce(r,await s(ft.aux,i)),{R:a,rx:c,k:f}=this.finalizeNonce(await s(ft.nonce,o,n,t)),h=et(await s(ft.challenge,c,n,t)),u=this.finalizeSig(a,f,h,r);return await ot(u,t,n)||this.error(),u}calcSync(){const{m:t,d:r,px:n,rand:i}=this,s=e.utils.taggedHashSync,o=this.initNonce(r,s(ft.aux,i)),{R:a,rx:c,k:f}=this.finalizeNonce(s(ft.nonce,o,n,t)),h=et(s(ft.challenge,c,n,t)),u=this.finalizeSig(a,f,h,r);return at(u,t,n)||this.error(),u}}function it(t,e,r){const n=t instanceof rt,i=n?t:rt.fromHex(t);return n&&i.assertValidity(),{...i,m:O(e),P:Y(r)}}function st(t,e,r,n){const i=b.BASE.multiplyAndAddUnsafe(e,K(r),R(-n,f.n));return!(!i||!i.hasEvenY()||i.x!==t)}async function ot(t,r,n){try{const{r:i,s,m:o,P:a}=it(t,r,n),c=et(await e.utils.taggedHash(ft.challenge,T(i),a.toRawX(),o));return st(i,a,s,c)}catch(t){return!1}}function at(t,r,n){try{const{r:i,s,m:o,P:a}=it(t,r,n),c=et(e.utils.taggedHashSync(ft.challenge,T(i),a.toRawX(),o));return st(i,a,s,c)}catch(t){if(t instanceof p)throw t;return!1}}e.schnorr={Signature:rt,getPublicKey:function(t){return b.fromPrivateKey(t).toRawX()},sign:async function(t,e,r){return new nt(t,e,r).calc()},verify:ot,signSync:function(t,e,r){return new nt(t,e,r).calcSync()},verifySync:at},b.BASE._setWindowSize(8);const ct={node:n,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},ft={challenge:"BIP0340/challenge",aux:"BIP0340/aux",nonce:"BIP0340/nonce"},ht={};e.utils={bytesToHex:A,hexToBytes:I,concatBytes:x,mod:R,invert:L,isValidPrivateKey(t){try{return K(t),!0}catch(t){return!1}},_bigintTo32Bytes:T,_normalizePrivateKey:K,hashToPrivateKey:t=>{if((t=O(t)).length<40||t.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");return T(R(U(t),f.n-s)+s)},randomBytes:(t=32)=>{if(ct.web)return ct.web.getRandomValues(new Uint8Array(t));if(ct.node){const{randomBytes:e}=ct.node;return Uint8Array.from(e(t))}throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>e.utils.hashToPrivateKey(e.utils.randomBytes(40)),precompute(t=8,e=b.BASE){const r=e===b.BASE?e:new b(e.x,e.y);return r._setWindowSize(t),r.multiply(a),r},sha256:async(...t)=>{if(ct.web){const e=await ct.web.subtle.digest("SHA-256",x(...t));return new Uint8Array(e)}if(ct.node){const{createHash:e}=ct.node,r=e("sha256");return t.forEach((t=>r.update(t))),Uint8Array.from(r.digest())}throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(t,...e)=>{if(ct.web){const r=await ct.web.subtle.importKey("raw",t,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),n=x(...e),i=await ct.web.subtle.sign("HMAC",r,n);return new Uint8Array(i)}if(ct.node){const{createHmac:r}=ct.node,n=r("sha256",t);return e.forEach((t=>n.update(t))),Uint8Array.from(n.digest())}throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(t,...r)=>{let n=ht[t];if(void 0===n){const r=await e.utils.sha256(Uint8Array.from(t,(t=>t.charCodeAt(0))));n=x(r,r),ht[t]=n}return e.utils.sha256(n,...r)},taggedHashSync:(t,...e)=>{if("function"!=typeof D)throw new p("sha256Sync is undefined, you need to set it");let r=ht[t];if(void 0===r){const e=D(Uint8Array.from(t,(t=>t.charCodeAt(0))));r=x(e,e),ht[t]=r}return D(r,...e)},_JacobianPoint:g},Object.defineProperties(e.utils,{sha256Sync:{configurable:!1,get:()=>D,set(t){D||(D=t)}},hmacSha256Sync:{configurable:!1,get:()=>z,set(t){z||(z=t)}}})},9611:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.MerkleMountainRange=void 0;const i=r(6765),s=n(r(3009)),o=n(r(7284));class a extends o.default{constructor(t=s.default,e=[],r,n,o){super(),this.root=i.Buffer.alloc(0),this.size=0,this.width=0,this.hashes={},this.data={},e=e.map(this.bufferify),this.hashFn=this.bufferifyFn(t),this.hashLeafFn=r,this.peakBaggingFn=n,this.hashBranchFn=o;for(const t of e)this.append(t)}append(t){t=this.bufferify(t);const e=this.hashFn(t),r=this.bufferToHex(e);this.data[r]&&this.bufferToHex(this.hashFn(this.data[r]))===r||(this.data[r]=t);const n=this.hashLeaf(this.size+1,e);this.hashes[this.size+1]=n,this.width+=1;const i=this.getPeakIndexes(this.width);this.size=this.getSize(this.width);const s=[];for(let t=0;t<i.length;t++)s[t]=this._getOrCreateNode(i[t]);this.root=this.peakBagging(this.width,s)}hashLeaf(t,e){return e=this.bufferify(e),this.hashLeafFn?this.bufferify(this.hashLeafFn(t,e)):this.hashFn(i.Buffer.concat([this.bufferify(t),e]))}hashBranch(t,e,r){return this.hashBranchFn?this.bufferify(this.hashBranchFn(t,e,r)):this.hashFn(i.Buffer.concat([this.bufferify(t),this.bufferify(e),this.bufferify(r)]))}getPeaks(){const t=this.getPeakIndexes(this.width),e=[];for(let r=0;r<t.length;r++)e[r]=this.hashes[t[r]];return e}getLeafIndex(t){return t%2==1?this.getSize(t):this.getSize(t-1)+1}getPeakIndexes(t){const e=this.numOfPeaks(t),r=[];let n=0,i=0;for(let s=255;s>0&&!(t&1<<s-1&&(i=i+(1<<s)-1,r[n++]=i,r.length>=e));s--);if(n!==r.length)throw new Error("invalid bit calculation");return r}numOfPeaks(t){let e=t,r=0;for(;e>0;)e%2==1&&r++,e>>=1;return r}peakBagging(t,e){const r=this.getSize(t);if(this.numOfPeaks(t)!==e.length)throw new Error("received invalid number of peaks");return 0!==t||e.length?this.peakBaggingFn?this.bufferify(this.peakBaggingFn(r,e)):this.hashFn(i.Buffer.concat([this.bufferify(r),...e.map(this.bufferify)])):i.Buffer.alloc(0)}getSize(t){return(t<<1)-this.numOfPeaks(t)}getRoot(){return this.root}getHexRoot(){return this.bufferToHex(this.getRoot())}getNode(t){return this.hashes[t]}mountainHeight(t){let e=1;for(;1<<e<=t+e;)e++;return e-1}heightAt(t){let e=t,r=0,n=0;for(;e>r;)e-=(1<<n)-1,n=this.mountainHeight(e),r=(1<<n)-1;return n-(r-e)}isLeaf(t){return 1===this.heightAt(t)}getChildren(t){const e=t-(1<<this.heightAt(t)-1),r=t-1;if(e===r)throw new Error("not a parent");return[e,r]}getMerkleProof(t){if(t>this.size)throw new Error("out of range");if(!this.isLeaf(t))throw new Error("not a leaf");const e=this.root,r=this.width,n=this.getPeakIndexes(this.width),i=[];let s=0;for(let e=0;e<n.length;e++)i[e]=this.hashes[n[e]],n[e]>=t&&0===s&&(s=n[e]);let o=0,a=0,c=this.heightAt(s);const f=[];for(;s!==t;)c--,[o,a]=this.getChildren(s),s=t<=o?o:a,f[c-1]=this.hashes[t<=o?a:o];return{root:e,width:r,peakBagging:i,siblings:f}}verify(t,e,r,n,i,s){if(n=this.bufferify(n),this.getSize(e)<r)throw new Error("index is out of range");if(!t.equals(this.peakBagging(e,i)))throw new Error("invalid root hash from the peaks");let o,a=0;const c=this.getPeakIndexes(e);for(let t=0;t<c.length;t++)if(c[t]>=r){o=i[t],a=c[t];break}if(!o)throw new Error("target not found");let f=s.length+1;const h=new Array(f);let u,l=0,d=0;for(;f>0&&(h[--f]=a,a!==r);)[l,d]=this.getChildren(a),a=r>l?d:l;for(;f<h.length;)a=h[f],u=0===f?this.hashLeaf(a,this.hashFn(n)):a-1===h[f-1]?this.hashBranch(a,s[f-1],u):this.hashBranch(a,u,s[f-1]),f++;if(!u.equals(o))throw new Error("hashed peak is invalid");return!0}peaksToPeakMap(t,e){const r={};let n=0,i=0,s=e.length;for(let o=1;o<=32;o++)n=32-o,i=1<<o-1,r[n]=t&i?e[--s]:0;if(0!==s)throw new Error("invalid number of peaks");return r}peakMapToPeaks(t,e){const r=this.numOfPeaks(t),n=new Array(r);let i=0;for(let t=0;t<32;t++)0!==e[t]&&(n[i++]=e[t]);if(i!==r)throw new Error("invalid number of peaks");return n}peakUpdate(t,e,r){const n={},i=t+1;let s=this.getLeafIndex(i),o=this.hashLeaf(s,r),a=0,c=0,f=!1,h=!1,u=!1;for(let r=1;r<=32;r++)a=32-r,u?n[a]=e[a]:(c=1<<r-1,f=!!(t&c),h=!!(i&c),s++,f&&(o=this.hashBranch(s,e[a],o)),h?(n[a]=f?e[a]:o,u=!0):n[a]=0);return n}rollUp(t,e,r,n){if(!t.equals(this.peakBagging(e,r)))throw new Error("invalid root hash from the peaks");let i=e,s=this.peaksToPeakMap(e,r);for(let t=0;t<n.length;t++)s=this.peakUpdate(i,s,n[t]),i++;return this.peakBagging(i,this.peakMapToPeaks(i,s))}_getOrCreateNode(t){if(t>this.size)throw new Error("out of range");if(!this.hashes[t]){const[e,r]=this.getChildren(t),n=this._getOrCreateNode(e),i=this._getOrCreateNode(r);this.hashes[t]=this.hashBranch(t,n,i)}return this.hashes[t]}}e.MerkleMountainRange=a,"undefined"!=typeof window&&(window.MerkleMountainRange=a),e.default=a},9615:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hmac=void 0;const n=r(9175);class i extends n.Hash{constructor(t,e){super(),this.finished=!1,this.destroyed=!1,(0,n.assertHash)(t);const r=(0,n.toBytes)(e);if(this.iHash=t.create(),!(this.iHash instanceof n.Hash))throw new TypeError("Expected instance of class which extends utils.Hash");const i=this.blockLen=this.iHash.blockLen;this.outputLen=this.iHash.outputLen;const s=new Uint8Array(i);s.set(r.length>this.iHash.blockLen?t.create().update(r).digest():r);for(let t=0;t<s.length;t++)s[t]^=54;this.iHash.update(s),this.oHash=t.create();for(let t=0;t<s.length;t++)s[t]^=106;this.oHash.update(s),s.fill(0)}update(t){if(this.destroyed)throw new Error("instance is destroyed");return this.iHash.update(t),this}digestInto(t){if(this.destroyed)throw new Error("instance is destroyed");if(!(t instanceof Uint8Array)||t.length!==this.outputLen)throw new Error("HMAC: Invalid output buffer");if(this.finished)throw new Error("digest() was already called");this.finished=!0,this.iHash.digestInto(t),this.oHash.update(t),this.oHash.digestInto(t),this.destroy()}digest(){const t=new Uint8Array(this.oHash.outputLen);return this.digestInto(t),t}_cloneInto(t){t||(t=Object.create(Object.getPrototypeOf(this),{}));const{oHash:e,iHash:r,finished:n,destroyed:i,blockLen:s,outputLen:o}=this;return t.finished=n,t.destroyed=i,t.blockLen=s,t.outputLen=o,t.oHash=e._cloneInto(t.oHash),t.iHash=r._cloneInto(t.iHash),t}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}e.hmac=(t,e,r)=>new i(t,e).update(r).digest(),e.hmac.create=(t,e)=>new i(t,e),e.hmac.init=e.hmac.create},9655:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.IncrementalMerkleTree=void 0;const i=n(r(7284)),s=n(r(2539));class o extends i.default{constructor(t,e){if(super(),this.hashFn=t,e.depth&&(this.depth=e.depth),e.arity&&(this.arity=e.arity),this.depth<1)throw new Error("depth must be greater than 0");if(this.arity<1)throw new Error("arity must be greater than 0");const r=[];let n=e.zeroValue;if(this.zeroValue=n,this.zeroes=[],this.depth)for(let t=0;t<this.depth;t++)this.zeroes.push(n),r[t]=[],n=this.hashFn(Array(this.arity).fill(n));this.nodes=r,this.root=n}getRoot(){return this.root}getHexRoot(){return this.bufferToHex(this.bufferify(this.getRoot()))}insert(t){if(this.depth&&this.arity&&this.nodes[0].length>=this.getMaxLeaves())throw new Error("tree is full");let e=t,r=this.nodes[0].length;for(let t=0;t<this.depth;t+=1){const n=r-r%this.arity,i=n+this.arity,s=[];this.nodes[t][r]=e;for(let e=n;e<i;e+=1)e<this.nodes[t].length?s.push(this.nodes[t][e]):s.push(this.zeroes[t]);e=this.hashFn(s),r=Math.floor(r/this.arity)}this.root=e}delete(t){this.update(t,this.zeroValue)}update(t,e){if(t<0||t>=this.nodes[0].length)throw new Error("out of bounds");let r=e;for(let e=0;e<this.depth;e+=1){const n=t-t%this.arity,i=n+this.arity,s=[];this.nodes[e][t]=r;for(let t=n;t<i;t+=1)t<this.nodes[e].length?s.push(this.nodes[e][t]):s.push(this.zeroes[e]);r=this.hashFn(s),t=Math.floor(t/this.arity)}this.root=r}getDepth(){return this.depth}getArity(){return this.arity}getMaxLeaves(){return Math.pow(this.depth,this.arity)}indexOf(t){return this.nodes[0].indexOf(t)}getLeaves(){const t=this.copyList(this.nodes[0]);for(let e=this.nodes[0].length;e<this.getMaxLeaves();e++)t[e]=this.zeroValue;return t}copyList(t){return t.map((t=>BigInt(t)))}getLayers(){const t=[];for(const e of this.nodes)t.push(this.copyList(e));if(t[0].length<this.getMaxLeaves()){let e=t[0].length;for(let r=e;r<this.getMaxLeaves();r++)t[0][r]=this.zeroValue;for(let r=0;r<this.depth;r++){const n=e-e%this.arity,i=n+this.arity;for(let e=n;e<i;e++)e>=t[r].length&&(t[r][e]=this.zeroes[r]);e=Math.floor(e/this.arity)}}return t.push([this.root]),t}getHexLayers(){return this.getLayers().reduce(((t,e)=>(Array.isArray(e)?t.push(e.map((t=>this.bufferToHex(this.bufferify(t))))):t.push(e),t)),[])}getLayersAsObject(){const t=this.getLayers().map((t=>t.map((t=>this.bufferToHex(this.bufferify(t),!1))))),e=[];for(let r=0;r<t.length;r++){const n=[];for(let i=0;i<t[r].length;i++){const s={[t[r][i]]:null};if(e.length){s[t[r][i]]={};const n=e.shift(),o=Object.keys(n)[0];if(s[t[r][i]][o]=n[o],e.length){const n=e.shift(),o=Object.keys(n)[0];s[t[r][i]][o]=n[o]}}n.push(s)}e.push(...n)}return e[0]}computeRoot(){let t,e=this.nodes[0].length;for(let r=0;r<this.depth;r+=1){const n=e-e%this.arity,i=n+this.arity,s=[];for(let t=n;t<i;t+=1)t<this.nodes[r].length?s.push(this.nodes[r][t]):s.push(this.zeroes[r]);t=this.hashFn(s),e=Math.floor(e/this.arity)}return t}getProof(t){if(t<0||t>=this.nodes[0].length)throw new Error("The leaf does not exist in this tree");const e=[],r=[],n=t;for(let n=0;n<this.depth;n+=1){const i=t%this.arity,s=t-i,o=s+this.arity;r[n]=i,e[n]=[];for(let r=s;r<o;r+=1)r!==t&&(r<this.nodes[n].length?e[n].push(this.nodes[n][r]):e[n].push(this.zeroes[n]));t=Math.floor(t/this.arity)}return{root:this.root,leaf:this.nodes[0][n],pathIndices:r,siblings:e}}verify(t){let e=t.leaf;for(let r=0;r<t.siblings.length;r+=1){const n=t.siblings[r].slice();n.splice(t.pathIndices[r],0,e),e=this.hashFn(n)}return t.root===e}toString(){return this.toTreeString()}toTreeString(){const t=this.getLayersAsObject();return s.default.asTree(t,!0)}}e.IncrementalMerkleTree=o,"undefined"!=typeof window&&(window.IncrementalMerkleTree=o),e.default=o}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var s=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(s.exports,s,s.exports,r),s.loaded=!0,s.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var n=r(44);organicMoney=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,